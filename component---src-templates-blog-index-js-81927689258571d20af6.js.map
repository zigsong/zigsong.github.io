{"version":3,"file":"component---src-templates-blog-index-js-81927689258571d20af6.js","mappings":"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","sources":["webpack://gatsby-simple-blog/./src/components/PostAbbrev/PostAbbrev.js","webpack://gatsby-simple-blog/./src/components/SEO/SEO.js","webpack://gatsby-simple-blog/./src/components/TagList/TagList.js","webpack://gatsby-simple-blog/./src/components/Pagination/Pagination.js","webpack://gatsby-simple-blog/./src/templates/blog-index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport { rhythm } from 'utils/typography';\nimport { formatReadingTime } from 'utils/helpers';\nimport { formatDate } from 'utils/i18n';\n\nimport TagList from '../TagList';\n\nconst PostAbbrev = function({ slug, title, date, timeToRead, excerpt, tags, base }) {\n  let excerptPart;\n  if (excerpt) {\n    excerptPart = (\n      <p\n        dangerouslySetInnerHTML={{\n          __html: excerpt,\n        }}\n      />\n    );\n  }\n\n  let tagsPart;\n  if (tags) {\n    tagsPart = (\n      <TagList style={{ margin: '0.5rem 0 -0.5rem -0.5rem' }} tags={tags} baseUrl={`${base}tags`} />\n    );\n  }\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            fontFamily: 'Montserrat, sans-serif',\n            fontSize: rhythm(1),\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: 'none' }} to={slug} rel=\"bookmark\">\n            {title}\n          </Link>\n        </h3>\n        {tagsPart}\n        <small>{`${formatDate(date)} â€¢ ${formatReadingTime(timeToRead)}`}</small>\n        {excerptPart}\n      </header>\n    </article>\n  );\n}\n\nPostAbbrev.propTypes = {\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  excerpt: PropTypes.string,\n  tags: PropTypes.array,\n  base: PropTypes.string,\n};\n\nPostAbbrev.defaultProps = {\n  title: null,\n  excerpt: null,\n  tags: null,\n  base: '',\n};\n\nexport default PostAbbrev;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { useLang } from 'context/LanguageContext';\n\nconst SEO = function({ description, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            lang\n          }\n        }\n      }\n    `,\n  );\n\n  const { lang } = useLang();\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: lang || site.siteMetadata.lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nSEO.defaultProps = {\n  meta: [],\n  keywords: [],\n  description: '',\n};\n\nexport default SEO;\n","import './TagList.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { kebabCase } from 'utils/helpers';\nimport Tag from '../Tag';\n\nconst TagList = function({ tags, baseUrl, ...restProps }) {\n  return (\n    <ul className=\"tag-ul\" {...restProps}>\n      {tags.map((text) => (\n        <li key={text}>\n          <Tag text={text} url={`${baseUrl}/${kebabCase(text)}`} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nTagList.propTypes = {\n  tags: PropTypes.array.isRequired,\n  baseUrl: PropTypes.string,\n};\n\nTagList.defaultProps = {\n  baseUrl: '',\n};\n\nexport default TagList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\nimport { useLang } from 'context/LanguageContext';\n\nimport './Pagination.css';\n\nconst Pagination = function ({ currentPage, totalPageNumber }) {\n  const { homeLink } = useLang();\n\n  const befMark =\n    currentPage === 1 ? (\n      <span className=\"disabled\">&laquo;</span>\n    ) : (\n      <Link to={`${homeLink}${currentPage - 1}`}>&laquo;</Link>\n    );\n  const nextMark =\n    currentPage === totalPageNumber ? (\n      <span className=\"disabled\">&raquo;</span>\n    ) : (\n      <Link to={`${homeLink}${currentPage + 1}`}>&raquo;</Link>\n    );\n\n  return (\n    <div className=\"pagination\">\n      {befMark}\n      {Array.from({ length: 12 })\n        .map((_, ind) => 12 * Math.floor((currentPage - 1) / 12) + ind + 1)\n        .map((pageNum) => {\n          return pageNum === currentPage ? (\n            <span key={`pageNum-${pageNum}`} className=\"active\">\n              {pageNum}\n            </span>\n          ) : (\n            <Link key={`pageNum-${pageNum}`} to={`${homeLink}${pageNum}`}>\n              {pageNum}\n            </Link>\n          );\n        })}\n      {nextMark}\n    </div>\n  );\n};\n\nPagination.propTypes = {\n  currentPage: PropTypes.number,\n  totalPageNumber: PropTypes.number,\n};\n\nPagination.defaultProps = {\n  currentPage: 1,\n  totalPageNumber: 1,\n};\n\nexport default Pagination;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport Bio from 'components/Bio';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport PostAbbrev from 'components/PostAbbrev';\nimport Pagination from 'components/Pagination';\nimport { useLang } from 'context/LanguageContext';\nimport { formatMessage } from 'utils/i18n';\n\nconst BlogIndex = function ({ pageContext, data, location }) {\n  const { from, to, currentPage, numPages } = pageContext;\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  const { lang, homeLink } = useLang();\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={formatMessage('tIndTitle')} keywords={formatMessage('taIndKeywords')} />\n      <aside>\n        <Bio />\n      </aside>\n      <h3>\n        {formatMessage('tfIndCountPosts', { count: data.allMarkdownRemark.totalCount, from, to })}\n      </h3>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        return (\n          <PostAbbrev\n            lang={lang}\n            base={homeLink}\n            key={node.fields.slug}\n            slug={node.fields.slug}\n            date={node.frontmatter.date}\n            timeToRead={node.timeToRead}\n            title={title}\n            excerpt={node.frontmatter.description || node.excerpt}\n            tags={node.frontmatter.tags}\n          />\n        );\n      })}\n      <Pagination currentPage={currentPage} totalPageNumber={numPages} />\n    </Layout>\n  );\n};\n\nBlogIndex.propTypes = {\n  pageContext: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nBlogIndex.defaultProps = {};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query ($langKey: String!, $skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { langKey: { eq: $langKey } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          fields {\n            slug\n            langKey\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["PostAbbrev","_ref","excerptPart","tagsPart","slug","title","date","timeToRead","excerpt","tags","base","React","dangerouslySetInnerHTML","__html","TagList","style","margin","baseUrl","fontFamily","fontSize","rhythm","marginBottom","Link","boxShadow","to","rel","formatDate","formatReadingTime","defaultProps","SEO","description","meta","keywords","site","useStaticQuery","lang","useLang","metaDescription","siteMetadata","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","restProps","Object","assign","className","map","text","key","Tag","url","kebabCase","Pagination","currentPage","totalPageNumber","homeLink","befMark","nextMark","Array","from","_","ind","Math","floor","pageNum","BlogIndex","pageContext","data","location","numPages","siteTitle","posts","allMarkdownRemark","edges","Layout","formatMessage","Bio","count","totalCount","_ref2","node","frontmatter","fields"],"sourceRoot":""}