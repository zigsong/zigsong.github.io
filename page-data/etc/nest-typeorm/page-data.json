{"componentChunkName":"component---src-templates-blog-post-js","path":"/etc/nest-typeorm/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"3893b9e5-aae8-5b79-9607-2a4152fbb2b1","excerpt":"이 얼마나 거창한 제목인가… 사내 웹프론트그룹에서 하고 있는 어떠한 비밀(?..) 프로젝트에서, 막내라는 이유로 그룹장을 하고 있당. 최종적으로 만들고 싶은 플랫폼의 프로토타이핑을 하고, 각자의 꿈을 펼쳐보기로… 그렇게 무모하게 Nest.js가 뭔지도 잘 모른채, 그저 fancy…","html":"<p>이 얼마나 거창한 제목인가…</p>\n<!-- more -->\n<p>사내 웹프론트그룹에서 하고 있는 어떠한 비밀(?..) 프로젝트에서, 막내라는 이유로 그룹장을 하고 있당. 최종적으로 만들고 싶은 플랫폼의 프로토타이핑을 하고, 각자의 꿈을 펼쳐보기로…</p>\n<img src=\"01.png\" />\n<p>그렇게 무모하게 Nest.js가 뭔지도 잘 모른채, 그저 fancy하다는 이유로 첫 삽을 파보았다.</p>\n<hr>\n<h2 id=\"nestjs\" style=\"position:relative;\"><a href=\"#nestjs\" aria-label=\"nestjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NestJS</h2>\n<blockquote>\n<p>Nest (NestJS) is a framework for building efficient, scalable <strong><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js</a></strong> server-side applications</p>\n</blockquote>\n<p>라고 한다. 효율적이고, 확장 가능한 Node.js 기반의 서버사이드 앱을 만들기 위한 프레임워크다. 뭐든 자기 앱이 제일 개쩌니까~! 딱히 웅장하진 않은 재미없고 딱딱한 소개를 하고 있다.</p>\n<p>조금 trendy하다고 느낀 건, 기본으로 TypeScript를 지원한다는 사실이다. 아아… 타입스크립트 없이는 살지 못해…</p>\n<p>이 NestJS의 구조는 크게 <strong>Controller</strong>, <strong>Provider</strong>, <strong>Module</strong>로 나뉜다.</p>\n<p>✔️ <strong>Controller</strong></p>\n<p>클라이언트에서 들어오는 요청을 처리하고 응답을 반환하는 역할을 수행한다. 나는 TechStack을 만들고 싶으므로 아래와 같이 야심차게 시작해본다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// tech-stacks.controller.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tech-stacks'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TechStacksController</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello, techStacks'</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>컨트롤러는 엔드포인트 라우팅(routing) 메커니즘을 통해 각 컨트롤러가 받을 수 있는 요청을 분류한다. 그래서 컨트롤러를 사용 목적에 따라 잘 구분하면 구조적이고 모듈화된 소프트웨어를 작성할 수 있다고 한다.</p>\n<p>직접 컨트롤러 파일을 만들지 않고도 아래 명령어로 fancy하게 자동으로 파일을 만들 수 있다. MZ세대 취향저격</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">nest g controller <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span></code></pre></div>\n<p>난 분명 <code class=\"language-text\">techStacks</code> 로 CLI를 돌렸는데 자동으로 <code class=\"language-text\">tech-stacks</code> 이름으로 파일이 생성됐다. 저기 컨벤션인가보다.</p>\n<p>컨트롤러만 단독으로 만드는 대신 CRUD 보일러플레이트 코드를 한번에 생성할 수도 있다고 한다. 아아… 이 얼마나 멋진…</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">nest g resource <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span></code></pre></div>\n<img src=\"02.png\" width=\"400px\" />\n<p>✔️ <strong>Provider</strong></p>\n<p>Nest의 핵심 개념으로, 여러 소스들로 프로바이더를 구현할 수 있다. 이를테면 service, repository, factory, helper, 등등… (하나만 해라 제발)</p>\n<p>프로바이더는 의존성으로 주입될 수 있는 데이터 가공 함수들을 모아둔 객체다. 수없이 되뇌었던 그 이름..! IoC! 의존성을 이렇게 분리하다니. 역시 fancy한 프레임워크다. 사실 다른 프레임워크에서는 어떻게 하고 있는지 잘 모른다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// tech-stacks.service.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TechStack <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./interfaces/techStack.interface\"</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TechStacksService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> techStacks<span class=\"token operator\">:</span> TechStack<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>techStacks<span class=\"token operator\">:</span> TechStack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>techStacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>TechStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TechStack<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>techStacks<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>앱이 제공하고자 하는 핵심 기능, 즉 비즈니스 로직을 수행하는 역할을 하는 것이 프로바이더이다. 컨트롤러가 이 역할을 수행할 수도 있겠지만 소프트웨어 구조상 분리해 두는 것이 단일 책임 원칙(SRP, Single Responsibility Principle)에 더 부합하기 때문이라고 한다. IoC, SRP 이런 말 써줘야 또 있어보인다.</p>\n<p>✔️ <strong>Module</strong></p>\n<p>일반적으로 모듈이라고 하면 조그만 클래스나 함수처럼 한가지 일만 수행하는 소프트웨어 컴포넌트가 아니라, 여러 컴포넌트를 조합하여 작성한 좀 더 큰 작업을 수행하는 단위를 말한다.</p>\n<p>Nest에서 모듈은 앱의 구조 설계를 위한 metadata를 제공한다. metadata라고만 말하고 있으니 도통 무슨 소린지 알 수가 없다. 그냥 앱의 루트 모듈이 있고, 하위에 도메인별로 모듈을 나눴다고 생각하면 될 듯하다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// app.module.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TechStacksController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./tech-stacks/tech-stacks.controller\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.controller\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.service\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TechStacksService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./tech-stacks/tech-stacks.service\"</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">,</span> TechStacksController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">,</span> TechStacksService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>귀차나서 Nest가 기본으로 만들어준 <code class=\"language-text\">app.module</code> 파일에 <code class=\"language-text\">TechStack</code> 도메인의 아이들도 같이 욱여넣어줬다.</p>\n<p><code class=\"language-text\">yarn</code> 으로 로컬 서버를 실행하고 3000번 포트로 접속하면, <code class=\"language-text\">Hello, techStacks</code> 텍스트가 썰렁하게 등장한다! (포스팅을 쓰는 지금 시점에서는 코드가 많이 바뀐 상태이므로 그냥 그랬을 것이라고 이해하자.)</p>\n<p>그렇게 별 문제없이 아주 야심차게 시작하는 듯 했으나..!</p>\n<p>TypeORM을 연결하려면 실제 DB가 있어야 한다..! MongoDB도 잠깐 해봤고, MySQL도 해보긴 했다. 프로토타이핑을 하는 가벼운(?) 단계에서 선택 기준은 그저 ‘소스가 얼마나 많은가’. 역시 MySQL로 ㄱㄱ</p>\n<p>그렇게 Nest에 MySQL을 등에 업은 TypeORM 연결을 위해 검색에 나섰는데, 아마 첫 번째 검색 결과가 화근이었을까. docker로 하고 있는 게 아니겠는가..! 분명 모두가 docker를 사용하고 있는 것 같았는데, 지금 다시 검색해보니 꼭 그렇지만은 않은 것 같다.</p>\n<p>하지만… 며칠 전의 나는 docker를 꼭 해야한다고 생각했고… 그렇게 TypeORM, MySQL을 뒤로 한 채 docker로 가보았다.</p>\n<hr>\n<h2 id=\"docker\" style=\"position:relative;\"><a href=\"#docker\" aria-label=\"docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker</h2>\n<p>도커는 컨테이너 기반의 오픈소스 가상화 플랫폼이다. 컨테이너 안에는 다양한 프로그램, 실행 환경을 ‘컨테이너’라는 개념으로 추상화하고 클라우드, PC 등 어디서든 실행할 수 있다.</p>\n<p>자세한 설명이나 등장 배경은 이미 다른 검색 결과에 많으니 생략한다.</p>\n<p>도커 설치부터 애를 먹었다.</p>\n<p>도커를 자동으로 설치해주는 아래 커맨드</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">sudo</span> <span class=\"token function\">wget</span> -qO- https://get.docker.com/ <span class=\"token operator\">|</span> <span class=\"token function\">sh</span></code></pre></div>\n<p>를 입력하면 <code class=\"language-text\">wget: command not found</code> 에러가 뜨고, 그래서 <code class=\"language-text\">wget</code>을 설치해주려고 하면 <code class=\"language-text\">yum</code>을 사용하란다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">yum <span class=\"token function\">install</span> <span class=\"token function\">wget</span></code></pre></div>\n<p>커맨드를 입력하면 <code class=\"language-text\">yum: command not found</code></p>\n<p>잠시 숨을 고르고 <code class=\"language-text\">yum</code>도 설치하라는 대로 해준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> yum</code></pre></div>\n<p>결과는</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">apt-get: <span class=\"token builtin class-name\">command</span> not found</code></pre></div>\n<img src=\"03.png\" width=\"400px\" />\n<p>(아마도) <code class=\"language-text\">homebrew</code>로 간신히 도커를 설치하고, mysql 실행을 위해 mysql image를 pull해준다. 아니?! 이게 대체 무슨 소리냐</p>\n<ul>\n<li><strong>docker hub(registry)</strong>: 앱스토어 역할이다. 필요한 프로그램을 다운로드받을 수 있는 곳이다. (마치 npm에 여러 패키지가 등록되어 있고, 개발자가 필요한 패키지를 <code class=\"language-text\">npm install</code>로 설치하는 것과 같다.)</li>\n<li><strong>image</strong>: docker hub의 프로그램(ex. apache, mysql)을 컴퓨터에 다운로드받은 것이다.</li>\n<li><strong>container</strong>: 다운받은 image를 실행하는 것이다. image는 여러 개의 container를 가질 수 있다.</li>\n</ul>\n<p>docker hub에서 image를 다운 받는 과정을 <code class=\"language-text\">pull</code>, <code class=\"language-text\">image</code>를 실행시키는 행위를 <code class=\"language-text\">run</code> 이라고 한다. <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hub.docker.com/</a> 에서 원하는 이미지를 다운로드받을 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">docker</span> pull mysql</code></pre></div>\n<p>다운로드 받은 image를 확인하려면 아래 명령어를 입력한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">docker</span> images</code></pre></div>\n<img src=\"04.png\" />\n<p>mysql이 잘 받아진 것 같다 <em>^^</em></p>\n<p>어느 단계에서인지 까먹었으나, 아래와 같은 에러가 뜨는 경우가 있다.</p>\n<blockquote>\n<p>🚨 no matching manifest for linux/arm64/v8 in the manifest list entries</p>\n</blockquote>\n<p>회사에서 준 최고 빠른 M1 Mac은 정말 사랑스럽고 손이 많이 가는 친구다. 뭐 하나 설치하려 해도 낯선 에러가 떠서 검색해보면, M1 칩 이슈라고 한다^^…</p>\n<p>에러 메시지를 검색해서 나온 블로그가 작년에 우테코를 같이 했던 <a href=\"https://unluckyjung.github.io/develop-setting/2021/03/27/M1-Docker-Mysql-Error/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">백엔드 크루(지만 서로 모르는…)의 글</a>이었다.</p>\n<p><code class=\"language-text\">docker-compose.yml</code> 파일을 만들어 다음과 같이 작성해준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">local-db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">platform</span><span class=\"token punctuation\">:</span> linux/x86_64 <span class=\"token comment\"># m1 mac 이슈</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> library/mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> local<span class=\"token punctuation\">-</span>db\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 3306<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> secret\n      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Seoul\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./db/mysql/data<span class=\"token punctuation\">:</span>/var/lib/mysql\n      <span class=\"token punctuation\">-</span> ./db/mysql/init<span class=\"token punctuation\">:</span>/docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.</code></pre></div>\n<p>그리고 <code class=\"language-text\">compose</code> 명령어를 입력해준다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></code></pre></div>\n<p>이제 mysql 컨테이너를 만들어준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> <span class=\"token punctuation\">[</span>container name<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>password<span class=\"token operator\">></span> <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3306</span>:3306 mysql</code></pre></div>\n<p><code class=\"language-text\">3306:3306</code>은, 각각 host의 포트와 container의 포트를 가리킨다. host의 3306번 포트와 docker container의 3306번 포트를 연결하라는 의미다. 처음에 무지성으로 쓰다가, 위대하신 이고잉 선생님의 강의를 듣고 이해 완.</p>\n<img src=\"05.png\" />\n<p><em>(영광스러운 캡쳐도 떠 두었다.)</em></p>\n<p>이를 port forwarding이라고 한다. <del>포워딩 별거 없네</del></p>\n<p>그런데 계속 아래와 같은 에러가 뜨는 게 아니겠어..</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">🚨 Ports are not available: listen tcp 0.0.0.0:3306: bind: address already in use</code></pre></div>\n<p>이미 mysql용 3306번 포트를 차지하고 있는 프로세스를 찾아서 <code class=\"language-text\">sudo kill -9 [process_number]</code> 를 입력해줘도 계속해서 끈질기게 포트를 차지해버리는 누군가…</p>\n<p>거의 반나절을 고민한 끝에 찾아냈다.</p>\n<img src=\"06.png\" />\n<p>🤯🤯🤯</p>\n<p>후… 도커의 개념을 제대로 이해하지 못한 채로 이상한 데서 헤매고 있었다.</p>\n<p>로컬에서 돌아가고 있던 MySQL 서버를 꺼준 후 다시 실행하면, 짜잔!</p>\n<img src=\"07.png\" />\n<p><em>(갑자기 나타난 docker desktop)</em></p>\n<p>개발자를 안심시키는 초록불과 함께 mysql-local 이름으로 지정한 mysql container가 돌아가는 것을 볼 수 있다.</p>\n<p><code class=\"language-text\">docker run</code> 명령어는, <code class=\"language-text\">docker create</code> + <code class=\"language-text\">docker start</code> + <code class=\"language-text\">docker attach</code> 명령을 합친 것이라고 한다. <code class=\"language-text\">create</code>와 <code class=\"language-text\">start</code> 는 알겠고, <code class=\"language-text\">attach</code>까지 알아보기엔 힘이 달렸다.</p>\n<p>도커로 실행중인 프로세스를 보기 위해 <code class=\"language-text\">docker ps</code> 명령어를 입력한다. 아마 <code class=\"language-text\">process status</code>의 약자였던 것 같다. 진정한 별다줄의 세계는 프로그래밍 세계에서 탄생한 것이 아닐까, 생각한다.</p>\n<p>현재 실행중인 프로세스 뿐 아니라 전체 프로세스를 확인하기 위해서는 <code class=\"language-text\">docker ps -a</code> 를 입력하면 된다. (<code class=\"language-text\">-a</code>는 누가 봐도 <code class=\"language-text\">all</code> 임을 짐작할 수 있다. 아님 말고)</p>\n<img src=\"08.png\" />\n<p>컨테이너가 하나밖에 없어서 썰렁하다. 새 컨테이너를 만들긴 귀찮으니 잠시 <code class=\"language-text\">mysql-local</code> 컨테이너를 꺼준 후 뭐가 나오는지 봐준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">docker</span> stop mysql-local</code></pre></div>\n<img src=\"09.png\" />\n<p>아까와는 달리 <code class=\"language-text\">STATUS</code>가 <code class=\"language-text\">Exited</code>로 표기된 것을 알 수 있다. 이제 보여주기식 실행이 끝났으니 다시 실행시킨다. <code class=\"language-text\">docker start mysql-local</code>을 하면 될 것 같았으나, 안 된다. 1년차 개발자의 짬을 믿고 <code class=\"language-text\">docker restart mysql-local</code> 을 입력해준다. 성공. ✌️</p>\n<p>이제 이상한 짓은 그만두고 도커 실행 명령어를 입력한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> mysql-local <span class=\"token function\">bash</span></code></pre></div>\n<p>아니, 아까는 <code class=\"language-text\">run</code> 하라며 갑자기 <code class=\"language-text\">exec</code>이 웬말이냐??</p>\n<p><code class=\"language-text\">docker run</code>은 도커 컨테이너를 생성하고 실행까지 한번에 해주는 명령어다.</p>\n<p>반면 <code class=\"language-text\">docker exec</code>는 실행중인 컨테이너에만 실행할 수 있는 명령어다. 일반적인 컨테이너 실행 명령어인 <code class=\"language-text\">run</code>과 달리 컨테이너 상태를 디버깅하기 위한 용도로 주로 사용한다.</p>\n<p><code class=\"language-text\">docker exec</code>에는 주로 뒤에 여러 commands를 붙여서 실행한다.</p>\n<p>ex) <code class=\"language-text\">docker exec mysql-test pwd</code></p>\n<p>여기서는 bash에서 interactive shell을 열 목적으로 뒤에 <code class=\"language-text\">-it [container_name] bash</code> 옵션을 줄줄이 붙여줬다.</p>\n<p>아무튼 그렇게 실행해준다.</p>\n<img src=\"10.png\" />\n<ul>\n<li><code class=\"language-text\">-i</code> : interactive shell</li>\n<li><code class=\"language-text\">-t</code>: terminal</li>\n</ul>\n<p>여기서 사용한 <code class=\"language-text\">-it</code> 는 <code class=\"language-text\">-i</code>와 <code class=\"language-text\">-t</code>를 합친 것으로, 터미널 입력을 위한 옵션을 뜻한다.</p>\n<p>이밖에도 자주 사용되는 docker CLI option들은 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">옵션</th>\n<th align=\"left\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">-d</td>\n<td align=\"left\">detached mode; 백그라운드 모드</td>\n</tr>\n<tr>\n<td align=\"left\">-p</td>\n<td align=\"left\">호스트와 컨테이너의 포트를 연결(포워딩)</td>\n</tr>\n<tr>\n<td align=\"left\">-v</td>\n<td align=\"left\">호스트와 컨테이너의 디렉토리를 연결(마운트)</td>\n</tr>\n<tr>\n<td align=\"left\">-e</td>\n<td align=\"left\">컨테이너 내에서 사용할 환경변수 설정</td>\n</tr>\n<tr>\n<td align=\"left\">-name</td>\n<td align=\"left\">컨테이너 이름 설정</td>\n</tr>\n<tr>\n<td align=\"left\">-rm</td>\n<td align=\"left\">프로세스 종료시 컨테이너 자동 제거</td>\n</tr>\n<tr>\n<td align=\"left\">-link</td>\n<td align=\"left\">컨테이너 연결 [컨테이너명:별칭]</td>\n</tr>\n</tbody>\n</table>\n<p>docker는 아무리 찾아봐도 이해가 되지 않았는데, <a href=\"https://www.youtube.com/watch?v=Ps8HDIAyPD0&#x26;list=PLuHgQVnccGMDeMJsGq2O-55Ymtx0IdKWf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이고잉 선생님의 도커 입문 수업</a>을 듣고 갈증이 싹 가셨다.</p>\n<img src=\"11.png\" />\n<hr>\n<h2 id=\"mysql\" style=\"position:relative;\"><a href=\"#mysql\" aria-label=\"mysql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL</h2>\n<p>MySQL을 실행하려면 물론 MySQL을 다운받아야 한다. 그냥 <a href=\"https://www.mysql.com/downloads/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">공식 홈페이지</a>에서 직접 다운 받았다.</p>\n<p>그리고 명령어 공부하기 귀찮아서 구이…구이(GUI)를 찾다가 <a href=\"https://dev.mysql.com/downloads/workbench/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">workbench</a>도 다운 받았다. (근데 딱히 편한 건 모르겠다^^ 이쁘지도 않다.)</p>\n<p><code class=\"language-text\">docker exec</code>으로 실행한 shell에 아래 명령어를 입력하여 mysql 서버를 실행한다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">-u</code> <code class=\"language-text\">root</code>: root user를 사용ㅎ안다.</li>\n<li><code class=\"language-text\">-p</code> : <code class=\"language-text\">p</code>는 <code class=\"language-text\">password</code>의 약자다. <code class=\"language-text\">-p [password]</code> 와 같은 식으로 바로 입력해줄 수도 있다. 패스워드를 생략하고 <code class=\"language-text\">-p</code> 만 사용하면 아래와 같은 패스워드 입력창이 뜬다.</li>\n</ul>\n<img src=\"12.png\" />\n<p>패스워드까지 입력하면, ta-da! 🎉</p>\n<img src=\"13.png\" />\n<p>mysql 서버가 실행되었다.</p>\n<p>그치만 난 쿼리를 해본지 오래됐으므로 workbench로 간다.</p>\n<img src=\"14.png\" />\n<p>UI는 정말 못생겼지만, 맥도날드 키오스크에서 헤매고 계실 우리 어머니들의 심정을 헤아려가며 찾다보면 어떻게든 테이블과 데이터를 만들 수 있다. 우여곡절을 거친 신입 개발자는 이제 뭘 클릭하는 데 거침없다. 우당탕탕 만들었기 때문에 어떻게 만들었는지 설명하진 못한다.</p>\n<p>적당히 <code class=\"language-text\">techtree</code> 라는 이름의 테이블을 생성하고, <code class=\"language-text\">name</code>, <code class=\"language-text\">desc</code>, <code class=\"language-text\">image</code>, <code class=\"language-text\">url</code>, <code class=\"language-text\">type</code>, <code class=\"language-text\">id</code> 라는 필드(column이라고 해야될 듯 하다.)를 만들어주었다.</p>\n<img src=\"15.png\" />\n<p>그리고 데이터도 2개 심어주었는데, 워크벤치 껐다가 다시 켜니 이전에 심어둔 데이터를 어디서 확인하는지 도통 모르겠다 ㅡㅡ 내 데이터 내놔라 👊</p>\n<p>그래서 이건 그냥 shell에서 확인했다.</p>\n<img src=\"16.png\" />\n<p><code class=\"language-text\">desc</code>는 한글로 썼다고 저렇게 표시해주냐 ㅡㅡ 성공한 사람이 되어서 한글을 전세계 제1언어가 되게 하리라. 물론 거짓말이다. 그냥 아무도 모르게 조용히 살고 싶다.</p>\n<p>그럼 이제 TypeORM으로 가보자고</p>\n<hr>\n<h2 id=\"typeorm\" style=\"position:relative;\"><a href=\"#typeorm\" aria-label=\"typeorm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeORM</h2>\n<p><strong>ORM</strong>이란 **‘Object Relational Mapping’**의 약자로, 객체-관계 매핑을 의미한다. 풀어서 설명하면, 객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결)해주는 것을 말한다.</p>\n<p>객체 지향 프로그래밍은 클래스를 사용하고, 관계형 데이터베이스는 테이블을 사용하기 때문에 객체 모델과 관계형 모델 간에 불일치가 존재한다. ORM을 사용하면 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하여 불일치를 해결할 수 있다.</p>\n<p>이런 멋드러지는 소리들은 이제 그만하고, NestJS에 TypeORM을 연결해보자.</p>\n<p>우선 <code class=\"language-text\">ormconfig.json</code> 파일을 만든다. (딴소리지만, ORM 대문자로 썼을 때는 꽤나 있어보이는데 orm 소문자로 쓰니까 정말 없어보인다.) 이 config 파일의 옵션들을 앱과 연결시키기 위해 <code class=\"language-text\">app.module.ts</code> 파일에서 아래와 같이 갖은 방법을 사용했는데,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRootAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">useFactory</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getConnectionOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">autoLoadEntities</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>뭘 해도 deprecated된 메서드(<code class=\"language-text\">getConnectionOptions()</code> 등) 라고 하며 줄이 좍좍 그어졌다 ㅡㅡ</p>\n<p>알고 보니 루트 디렉토리에 <code class=\"language-text\">ormconfig.json</code> 파일이 있다면 <code class=\"language-text\">TypeOrmModule.forRoot()</code>에 옵션 객체를 전달하지 않아도 된다고 한다. 그니까 그냥 아래처럼 쓰면 된다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TechStackModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">controllers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">providers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>fancy하다고 칭찬했던 Nest는 어서 공식문서를 개편하지 않는다면 죽음을 면치 못하리라. 😡</p>\n<p>엔티티를 작성해준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// techstack.entity.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Column<span class=\"token punctuation\">,</span> Entity<span class=\"token punctuation\">,</span> PrimaryGeneratedColumn<span class=\"token punctuation\">,</span> Unique <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"typeorm\"</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Entity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"techstack\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n@<span class=\"token function\">Unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TechStackEntity</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">PrimaryGeneratedColumn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"varchar\"</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"varchar\"</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  desc<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"varchar\"</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  image<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"varchar\"</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"varchar\"</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>완전 성의없이 MySQL 테이블 형태 그대로 갖다 적었다. <code class=\"language-text\">PrimaryGeneratedColumn()</code> 데코레이터는, 이름에서도 알 수 있듯이 새로운 데이터가 추가될 때 해당 필드의 값을 자동으로 1씩 증가시켜 할당해준다. 정말 사랑스러운 녀석…</p>\n<p>dto가 대체 뭔진 모르겠지만 (물론 Data Transfer Object의 약자라고 한다.) 그냥 인터페이스처럼 만들면 되나보다. 다른 소스들에서 그렇게 하라길래 대충 <code class=\"language-text\">CreateTechStackDto</code>라고 이름 지어놓고 <code class=\"language-text\">Create</code>가 아닌 곳에서도 여기저기 갖다 쓰고 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// techstack.dto.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateTechStackDto</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  desc<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  image<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  url<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  type<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">id</code>는 위에서 <code class=\"language-text\">PrimaryGeneratedColumn()</code> 데코레이터가 알아서 지어준다길래 여기서는 뺐다. ㅎㅎ</p>\n<p>이제 지쳤으므로 급전개가 이루어질 것이다.</p>\n<p>Nest의 프로바이더 역할을 했던 <code class=\"language-text\">service</code> 파일에, 위에서 생성한 <code class=\"language-text\">TechStackEntity</code> 를 집어넣는다. 이때 <code class=\"language-text\">InjectRepository</code> 데코레이터를 사용한다. repository가 바로 db 역할을 하는 것이다!</p>\n<p>그리고 메서드들도 수정해준다. 코드는 아래와 같다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// tech-stacks.service.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InjectRepository <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/typeorm\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TechStackEntity <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"src/tech-stacks/entity/techstack.entity\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Repository <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"typeorm\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CreateTechStackDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./dto/techstack.dto\"</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TechStacksService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    @<span class=\"token function\">InjectRepository</span><span class=\"token punctuation\">(</span>TechStackEntity<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> techstacksRepository<span class=\"token operator\">:</span> Repository<span class=\"token operator\">&lt;</span>TechStackEntity<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>CreateTechStackDto<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>techstacksRepository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>CreateTechStackDto<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>techstacksRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">createTechStack</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> CreateTechStackDto<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveTechStack</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token function\">saveTechStack</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> CreateTechStackDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> techStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TechStackEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    techStack<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    techStack<span class=\"token punctuation\">.</span>desc <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>techstacksRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>techStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nest가 제공하는 <code class=\"language-text\">Repository</code> 하나로 <code class=\"language-text\">find()</code>, <code class=\"language-text\">findOne()</code>, <code class=\"language-text\">save()</code> 등의 연산을 자동으로 할 수 있다니… 정말 경이롭지 않을 수 없다.</p>\n<p>controller 파일에 임시로 심어뒀던 메서드들도 다 갖다 치우고, 새로 단장한 service의 코드를 갖다 쓰는 방식으로 바꿔준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// tech-stacks.controller.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Body<span class=\"token punctuation\">,</span> Controller<span class=\"token punctuation\">,</span> Get<span class=\"token punctuation\">,</span> Param<span class=\"token punctuation\">,</span> Post <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CreateTechStackDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./dto/techstack.dto\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TechStacksService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./tech-stacks.service\"</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tech-stacks\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TechStacksController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> techStackService<span class=\"token operator\">:</span> TechStacksService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>CreateTechStackDto<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>techStackService<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:id\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> techId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>CreateTechStackDto<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>techStackService<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>techId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">Body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> techStack<span class=\"token operator\">:</span> CreateTechStackDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>techStackService<span class=\"token punctuation\">.</span><span class=\"token function\">createTechStack</span><span class=\"token punctuation\">(</span>techStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>사실 꼭 <code class=\"language-text\">Promise</code> 함수로 써야 하는지는 모르겠다. <code class=\"language-text\">Repository</code>의 내장 메서드들이 <code class=\"language-text\">Promise</code>를 쓰게 되어있나? 🤔 아아 … 궁금해하지만 말고 찾아보면 될 일. <code class=\"language-text\">Repository.d.ts</code>에 기재된 타입 시그니처는 대략 다음과 같다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * Finds entities that match given find options.\n */</span>\n<span class=\"token function\">find</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> FindManyOptions<span class=\"token operator\">&lt;</span>Entity<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Entity<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그래, <code class=\"language-text\">Promise</code>로 쓰란다.</p>\n<p>여담이지만, 소스코드를 공개하며 해당 파일명을 알려줄 때는 디렉토리 위치까지 알려줬음 좋겠다. 그게 모두 정답은 아니겠지만… 나도 내 멋대로 했기 때문에 파일명만 공개하기로 😇</p>\n<p>이제 마지막으로, 위대하신 Nest가 제공한다는 기본 모듈 분리의 원칙에 따라 <code class=\"language-text\">tech-stacks.module.ts</code> 파일을 생성하고, 코드를 작성해준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TypeOrmModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/typeorm\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TechStackEntity <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./entity/techstack.entity\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TechStacksController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./tech-stacks.controller\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TechStacksService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./tech-stacks.service\"</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forFeature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>TechStackEntity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>TechStacksService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>TechStacksController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TechStackModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">TypeOrmModule.forFeature()</code>는 누가 봐도, <code class=\"language-text\">TypeOrmModule.forRoot()</code>의 하위 모듈들을 만들기 위한 코드같으므로 설명은 생략한다. (<del>피곤해서 그런 건 아니다</del>)</p>\n<p>자 이제 <code class=\"language-text\">yarn start</code> 로 서버를 실행시켜주면…! 두둥탁 🥁</p>\n<img src=\"17.png\" />\n<p>인생은 원래 뜻대로 되는 일이 별로 없다.</p>\n<p>게다가 저 마지막 줄에 <code class=\"language-text\">TechStacksController (?)</code> 물음표는 정말 사람 킹받게 한다.</p>\n<img src=\"18.png\" />\n<p>여기저기 수소문한 끝에, 앱의 root가 되는 <code class=\"language-text\">app.module.ts</code>에서 중복으로 TechStack의 물건들을 갖다 써서 그런다고 한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TypeOrmModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/typeorm\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TechStacksController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./tech-stacks/tech-stacks.controller\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TechStackModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./tech-stacks/tech-stacks.module\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TechStacksService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./tech-stacks/tech-stacks.service\"</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TechStackModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ➕ TechStackModule 추가</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ➖ TechStacksService 제거</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ➖ TechStacksController 제거</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"19.png\" />\n<p>성공 🤩</p>\n<p>마음의 평화가 찾아왔다.</p>\n<p>이제 브라우저에서 localhost:3000으로 접속하면 아까 mysql로 봤던 데이터를 확인할 수 있다.</p>\n<img src=\"20.png\" />\n<p>포스트맨에서도 물론 잘 나온다규</p>\n<img src=\"21.png\" />\n<p>아까 만든 <code class=\"language-text\">Repository.create()</code> 메서드로 데이터 추가도 할 수 있다. 후후…\n<img src=\"22.gif\"></p>\n<p>이제 끝!</p>\n<p>이 아니고 프론트 만들러 가자</p>\n<hr>\n<h2 id=\"ref\" style=\"position:relative;\"><a href=\"#ref\" aria-label=\"ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ref</h2>\n<p><a href=\"https://wikidocs.net/book/7059\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wikidocs.net/book/7059</a>\n<a href=\"https://gmlwjd9405.github.io/2019/02/01/orm.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gmlwjd9405.github.io/2019/02/01/orm.html</a>\n<a href=\"https://www.youtube.com/watch?v=Ps8HDIAyPD0&#x26;list=PLuHgQVnccGMDeMJsGq2O-55Ymtx0IdKWf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=Ps8HDIAyPD0&#x26;list=PLuHgQVnccGMDeMJsGq2O-55Ymtx0IdKWf</a>\n<a href=\"https://zinirun.github.io/2020/08/15/how-to-use-docker/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://zinirun.github.io/2020/08/15/how-to-use-docker/</a>\n<a href=\"https://www.lainyzine.com/ko/article/docker-exec-executing-command-to-running-container/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.lainyzine.com/ko/article/docker-exec-executing-command-to-running-container/</a>\n<a href=\"https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html</a>\n<a href=\"https://www.hanumoka.net/2018/04/29/docker-20180429-docker-install-mysql/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.hanumoka.net/2018/04/29/docker-20180429-docker-install-mysql/</a></p>","timeToRead":14,"frontmatter":{"title":"Docker로 MySQL 띄워 NestJS + TypeORM과 연결하기","date":"May 12, 2022","description":null,"tags":["docker","mysql","nestjs","typeorm"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/etc/nest-typeorm/","previous":{"fields":{"slug":"/weekly/2022-5-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"May 14, 2022","description":"weekly-i-learned","title":"5월 2주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2022-5-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"May 07, 2022","description":"weekly-i-learned","title":"5월 1주차 기록","tags":["weekly"]}},"previousInSameTag":null,"nextInSameTag":null,"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}