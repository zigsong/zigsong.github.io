{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-typescript/effective-typescript-1/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"1d09d0d1-603c-55b9-afe4-80d7711d9e35","excerpt":"타입스크립트 알아보기 아이템 1: 타입스크립트와 자바스크립트의 관계 이해하기 “타입스크립트는 자바스크립트의 상위집합(superset…","html":"<p>타입스크립트 알아보기</p>\n<!-- more -->\n<hr>\n<h2 id=\"아이템-1-타입스크립트와-자바스크립트의-관계-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-1-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EA%B4%80%EA%B3%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 1 타입스크립트와 자바스크립트의 관계 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 1: 타입스크립트와 자바스크립트의 관계 이해하기</h2>\n<p><strong>“타입스크립트는 자바스크립트의 상위집합(superset)이다”</strong></p>\n<ul>\n<li>\n<p>그렇기 때문에 자바스크립트 코드는 이미 타입스크립트다.</p>\n<ul>\n<li>기존 자바스크립트 코드를 타입스크립트로 마이그레이션하는 데 엄청난 이점!</li>\n<li>타입 구문을 사용하는 순간부터 자바스크립트는 타입스크립트 영역으로 들어가게 된다</li>\n</ul>\n</li>\n<li>\n<p>타입 시스템에서는 런타임에 오류를 발생시킬 코드를 미리 찾아낸다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> states <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Alabama\"</span><span class=\"token punctuation\">,</span> capital<span class=\"token operator\">:</span> <span class=\"token string\">\"Montogmery\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Alaska\"</span><span class=\"token punctuation\">,</span> capital<span class=\"token operator\">:</span> <span class=\"token string\">\"Juneau\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Arizona\"</span><span class=\"token punctuation\">,</span> capital<span class=\"token operator\">:</span> <span class=\"token string\">\"Phoenix\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> state <span class=\"token keyword\">of</span> states<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>capitol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JS에서는 undefined, TS에서는 에러</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입을 명시적으로 선언하여 의도를 분명하게 하면 오류를 구체적으로 알 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  capital<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> states<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Alabama\"</span><span class=\"token punctuation\">,</span> capitol<span class=\"token operator\">:</span> <span class=\"token string\">\"Montogery\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Alaska\"</span><span class=\"token punctuation\">,</span> capitol<span class=\"token operator\">:</span> <span class=\"token string\">\"Juneau\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Arizona\"</span><span class=\"token punctuation\">,</span> capitol<span class=\"token operator\">:</span> <span class=\"token string\">\"Phoenix\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 🚨 Error</span>\n<span class=\"token comment\">// 'State' 형식에 'capitol'이 없습니다.</span>\n<span class=\"token comment\">// 'capital'을(를) 쓰려고 했습니까?</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> state <span class=\"token keyword\">of</span> states<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>capital<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입스크립트 타입 시스템은 자바스크립트의 런타임 동작을 ‘모델링’한다</p>\n</li>\n<li>\n<p>런타임에서 정상 동작하는 코드에 타입스크립트가 오류를 표시하는 경우</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ✅ JS에서는 a의 값이 7이 된다.</span>\n<span class=\"token comment\">// 🚨 TS Error: '+' 연산자를 ... 형식에 적용할 수 없습니다.</span></code></pre></div>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-2-타입스크립트-설정-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-2-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%84%A4%EC%A0%95-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 2 타입스크립트 설정 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 2: 타입스크립트 설정 이해하기</h2>\n<ul>\n<li>\n<p>tsconfig.json으로 타입스크립트 설정 작성하기</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">noImplicitAny</code> - 변수들이 미리 정의된 타입을 가져야 하는지 여부를 제어</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">add</code> 부분에 hover 시 타입스크립트가 추론한 함수의 타입 확인 가능</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>→ 이를 암시적 any라고 부른다</p>\n</li>\n<li>\n<p><code class=\"language-text\">noImplicitAny</code>가 설정되었다면 오류 발생</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">strictNullChecks</code></p>\n<ul>\n<li>\n<p><code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>가 모든 타입에서 허용되는지 확인한다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// strictNullChecks 해제 시</span>\n<span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n\n<span class=\"token comment\">// strictNullChecks 설정 시</span>\n<span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 에러: 'null' 형식은 'number' 형식에 할당할 수 없습니다.</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">null</code>을 사용하지 않으려면 <code class=\"language-text\">null</code>을 체크하는 코드나 단언문을 추가해야 한다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"Ready\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 에러</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  el<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"Ready\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상, null을 제외</span>\n<span class=\"token punctuation\">}</span>\nel<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"Ready\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상, el이 null이 아님을 단언</span></code></pre></div>\n</li>\n<li>\n<p>타입스크립트에서 엄격한 체크를 하고 싶다면 <code class=\"language-text\">strict</code> 설정을 고려</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-3-코드-생성과-타입이-관계없음을-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-3-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%83%80%EC%9E%85%EC%9D%B4-%EA%B4%80%EA%B3%84%EC%97%86%EC%9D%8C%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 3 코드 생성과 타입이 관계없음을 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 3: 코드 생성과 타입이 관계없음을 이해하기</h2>\n<ul>\n<li>\n<p>타입스크립트 컴파일러는 두 가지 역할을 수행한다.</p>\n<ul>\n<li>최신 타입스크립트/자바스크립트를 브라우저에서 동작할 수 있도록 구버전의 자바스크립트로 트랜스파일한다.</li>\n<li>코드의 타입 오류를 체크한다.</li>\n</ul>\n</li>\n<li>\n<p>타입 오류가 있는 코드도 컴파일이 가능하다.</p>\n<ul>\n<li>컴파일은 타입 체크와 독립적으로 동작하기 때문이다.</li>\n<li>작성한 타입스크립트가 유효한 자바스크립트라면 타입스크립트 컴파일러는 컴파일을 해 낸다.</li>\n</ul>\n</li>\n<li>\n<p>런타임에는 타입 체크가 불가능하다.</p>\n<ul>\n<li>\n<p>타입스크립트의 타입은 ‘제거 가능’하다. 즉 자바스크립트로 컴파일되는 과정에서 모든 인터페이스, 타입, 타입 구문은 그냥 제거되어 버린다</p>\n</li>\n<li>\n<p>런타임에 타입 정보를 유지하는 방법</p>\n<ul>\n<li>\n<p>특정 속성이 존재하는지 체크</p>\n</li>\n<li>\n<p>‘태그’ 기법 - 런타임에 접근 가능한 타입 정보를 명시적으로 저장</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token string\">\"square\"</span><span class=\"token punctuation\">;</span>\n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token string\">\"rectangle\"</span><span class=\"token punctuation\">;</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Square <span class=\"token operator\">|</span> Rectangle<span class=\"token punctuation\">;</span> <span class=\"token comment\">// '태그된 유니온(tagged union)'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"rectangle\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Rectangle</span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    shape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Square</span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입(런타임 접근 불가)과 값(런타임 접근 가능)을 둘 다 사용하는 기법</p>\n<ul>\n<li>타입을 클래스로 만들기 → 타입과 값으로 모두 사용할 수 있다</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>타입 연산은 런타임에 영향을 주지 않는다</p>\n<ul>\n<li>값을 정제하기 위해서는 런타임의 타입을 체크해야 하고 자바스크립트 연산을 통해 변환을 수행해야 한다</li>\n</ul>\n</li>\n<li>\n<p>런타임 타입은 선언된 타입과 다를 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">switch~case</code> 구문의 <code class=\"language-text\">default</code> 구문</li>\n<li>API 요청의 반환값을 사용하는 경우</li>\n</ul>\n</li>\n<li>\n<p>타입스크립트 타입으로는 함수를 오버로드할 수 없다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 🚨 에러: 중복된 함수 구현입니다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 🚨 에러: 중복된 함수 구현입니다.</span></code></pre></div>\n<ul>\n<li>\n<p>타입스크립트의 함수 오버로딩은 타입 수준에서만 가능하다 (구현체는 불가)</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>타입스크립트 타입은 런타임 성능에 영향을 주지 않는다</p>\n<ul>\n<li>타입과 타입 연산자는 자바스크립트 변환 시점에 제거되기 때문이다</li>\n<li>‘런타임’ 오베허드가 없는 대신, 타입스크립트 컴파일러는 ‘빌드타임’ 오버헤드가 있다</li>\n<li>타입스크립트가 컴파일하는 코드는 오래된 런타임 환경을 지원하기 위해 호환성을 높이고 성능 오버헤드를 감안할지, 호환성을 포기하고 성능 중심의 네이티브 구현체를 선택할지의 문제에 맞닥뜨릴 수도 있다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-4-구조적-타이핑에-익숙해지기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-4-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%97%90-%EC%9D%B5%EC%88%99%ED%95%B4%EC%A7%80%EA%B8%B0\" aria-label=\"아이템 4 구조적 타이핑에 익숙해지기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 4: 구조적 타이핑에 익숙해지기</h2>\n<ul>\n<li>\n<p>자바스크립트는 본질적으로 덕 타이핑(duck typing) 기반</p>\n<blockquote>\n<p>🐤 <strong>덕 타이핑</strong>\n객체가 어떤 타입에 부합하는 변수와 메서드를 가질 경우 객체를 해당 타입에 속하는 것으로 간주하는 방식</p>\n</blockquote>\n</li>\n<li>\n<p>타입스크립트는 이 동작을 그대로 모델링한다.</p>\n</li>\n<li>\n<p>예제</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateLength</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> Vector2D<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">NamedVector</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">NamedVector</code>의 구조가 <code class=\"language-text\">Vector2D</code>와 호환되기 때문에 <code class=\"language-text\">calculateLength</code> 함수 호출 가능</li>\n</ul>\n</li>\n<li>\n<p>🚨 문제</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector3D</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> Vector3D<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> <span class=\"token function\">calculateLength</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token operator\">:</span> v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">/</span> length<span class=\"token punctuation\">,</span>\n    y<span class=\"token operator\">:</span> v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">/</span> length<span class=\"token punctuation\">,</span>\n    z<span class=\"token operator\">:</span> v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">/</span> length<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { x: 0.6, y: 0.8, z: 1 }</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Vector3D</code> 는 <code class=\"language-text\">calculateLength</code> 함수 호출 시 <code class=\"language-text\">Vector2D</code>와 호환된다</li>\n<li>이때 <code class=\"language-text\">z</code>가 정규화에서 무시되기 때문에 잘못된 결과를 출력한다</li>\n</ul>\n</li>\n<li>\n<p>구조적 타이핑과 클래스 할당문</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"instanceof C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> d<span class=\"token operator\">:</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">\"object literal\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li>d는 string 타입의 foo 속성을 가지고, <code class=\"language-text\">Object.prototype</code>으로부터 비롯된 생성자를 가진다</li>\n</ul>\n</li>\n<li>\n<p>구조적 타이핑을 사용하면 유닛 테스트를 쉽게 할 수 있다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">DB</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">runQuery</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>sql<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getAuthors</span><span class=\"token punctuation\">(</span>database<span class=\"token operator\">:</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Author<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> authorRows <span class=\"token operator\">=</span> database<span class=\"token punctuation\">.</span><span class=\"token function\">runQuery</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT FIRST, LAST FROM AUTHORS</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> authorRows<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> first<span class=\"token operator\">:</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>타입스크립트는 테스트 DB가 특정 인터페이스를 충족하는지 확인한다</li>\n<li>추상화(DB)를 함으로써, 로직과 테스트를 특정한 구현으로부터 분리한다</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-5-any-타입-지양하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-5-any-%ED%83%80%EC%9E%85-%EC%A7%80%EC%96%91%ED%95%98%EA%B8%B0\" aria-label=\"아이템 5 any 타입 지양하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 5: any 타입 지양하기</h2>\n<ul>\n<li>\n<p>any 타입에는 타입 안정성이 없다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\nage <span class=\"token operator\">=</span> <span class=\"token string\">\"12\"</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\nage <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 런타임에 정상, 🚨 age는 '121'</span></code></pre></div>\n</li>\n<li>\n<p>any는 함수 시그니처를 무시해 버린다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">calculateAge</span><span class=\"token punctuation\">(</span>birthDate<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> birthDate<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1997-09-12\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">calculateAge</span><span class=\"token punctuation\">(</span>birthDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상 (🚨 추후 에러 발생 가능)</span></code></pre></div>\n</li>\n<li>\n<p>any 타입에는 언어 서비스가 적용되지 않는다</p>\n<ul>\n<li>IDE의 자동완성 기능과 적절한 도움말 제공 불가</li>\n</ul>\n</li>\n<li>\n<p>any 타입은 코드 리팩터링 때 버그를 감춘다</p>\n<ul>\n<li>any가 아닌 구체적인 타입을 사용하여 타입 체커가 오류를 발견하도록 해야 한다</li>\n</ul>\n</li>\n<li>\n<p>any는 타입 설계를 감춰버린다</p>\n<ul>\n<li>애플리케이션 상태 등의 객체 설계 시 any 사용을 지양해야 한다</li>\n</ul>\n</li>\n<li>\n<p>any는 타입시스템의 신뢰도를 떨어뜨린다</p>\n<ul>\n<li>사람은 항상 실수를 한다</li>\n<li>any 타입을 쓰지 않으면 런타임에 발견될 오류를 미리 잡을 수 있고 신뢰도를 높일 수 있다</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>Ref</strong> 이펙티브 타입스크립트 1장: 타입스크립트 알아보기</p>","timeToRead":7,"frontmatter":{"title":"이펙티브 타입스크립트 1장","date":"December 02, 2021","description":null,"tags":["effective-typescript"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/effective-typescript/effective-typescript-1/","previous":{"fields":{"slug":"/javascript/js-functional-programming/","langKey":"en","directoryName":"javascript"},"frontmatter":{"date":"December 03, 2021","description":null,"title":"자바스크립트 함수형 프로그래밍과 파이프","tags":["javascript"]}},"next":{"fields":{"slug":"/wtc/wtc-week-40-41/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"November 26, 2021","description":null,"title":"우테코 마지막 주차 기록","tags":["woowacourse"]}},"previousInSameTag":{"fields":{"slug":"/effective-typescript/effective-typescript-2-2/","langKey":"en","directoryName":"effective-typescript"},"frontmatter":{"date":"December 11, 2021","description":null,"title":"이펙티브 타입스크립트 2장 - 2","tags":["effective-typescript"]}},"nextInSameTag":null,"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}