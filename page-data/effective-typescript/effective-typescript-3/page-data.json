{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-typescript/effective-typescript-3/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"9b2e994c-dea8-5fff-b3ab-0f0a42a8f0a0","excerpt":"타입 추론 아이템 1…","html":"<p>타입 추론</p>\n<!-- more -->\n<hr>\n<h2 id=\"아이템-19-추론-가능한-타입을-사용해-장황한-코드-방지하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-19-%EC%B6%94%EB%A1%A0-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4-%EC%9E%A5%ED%99%A9%ED%95%9C-%EC%BD%94%EB%93%9C-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"아이템 19 추론 가능한 타입을 사용해 장황한 코드 방지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 19: 추론 가능한 타입을 사용해 장황한 코드 방지하기</h2>\n<ul>\n<li>\n<p>코드의 모든 변수에 타입을 선언하는 것은 비생산적이며 형편없는 스타일이다.</p>\n</li>\n<li>\n<p>객체는 비구조화 할당문을 활용하자</p>\n<ul>\n<li>\n<p>모든 지역 변수의 타입이 추론되도록 한다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProduct</span><span class=\"token punctuation\">(</span>product<span class=\"token operator\">:</span> Product<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> product<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>타입 구문을 생략하는 경우</p>\n<ul>\n<li>함수 내에서 생성된 지역 변수</li>\n<li>함수 파라미터에 기본값이 있는 경우</li>\n</ul>\n</li>\n<li>\n<p>타입을 명시하면 좋은 경우</p>\n<ul>\n<li>\n<p>객체 리터럴을 정의할 때, 잉여 속성 체크가 동작한다</p>\n</li>\n<li>\n<p>함수의 반환 타입</p>\n<ul>\n<li>\n<p>함수의 입출력 타입에 대해 더욱 명확하게 알 수 있다</p>\n</li>\n<li>\n<p>명명된 타입을 사용할 수 있다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Vector2D<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Vector2D<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>→ 이 함수의 반환타입은 <code class=\"language-text\">Vector2D</code> 와 호환되지 않는다!</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>cf) eslint 규칙 중 <code class=\"language-text\">no-inferrable-types</code> 사용 가능</p>\n<ul>\n<li>작성된 모든 타입 구문이 정말로 필요한지 확인</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-20-다른-타입에는-다른-변수-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-20-%EB%8B%A4%EB%A5%B8-%ED%83%80%EC%9E%85%EC%97%90%EB%8A%94-%EB%8B%A4%EB%A5%B8-%EB%B3%80%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 20 다른 타입에는 다른 변수 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 20: 다른 타입에는 다른 변수 사용하기</h2>\n<ul>\n<li>\n<p>변수의 값은 바뀔 수 있지만 그 타입은 보통 바뀌지 않는다</p>\n</li>\n<li>\n<p>타입 확장하기 - 유니온 타입</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"12-34-56\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>→ 더 많은 문제가 발생할 위험이 있다</p>\n<ul>\n<li>차라리 별도의 변수를 도입하자</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"12-34-56\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> serial <span class=\"token operator\">=</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>→ 이렇게 하면 <code class=\"language-text\">let</code>이 아닌 <code class=\"language-text\">const</code>로 사용도 가능하다!</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-21-타입-넓히기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-21-%ED%83%80%EC%9E%85-%EB%84%93%ED%9E%88%EA%B8%B0\" aria-label=\"아이템 21 타입 넓히기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 21: 타입 넓히기</h2>\n<ul>\n<li>\n<p>타입스크립트가 작성된 코드를 체크하는 정적 분석 시점에, 변수는 <strong>‘가능한’ 값들의 집합인 타입</strong>을 가진다</p>\n</li>\n<li>\n<p>타입스크립트의 ‘넓히기’</p>\n<ul>\n<li>\n<p>지정된 단일 값을 가지고 할당 가능한 값들의 집합을 유추하는 것</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>→ 변수 <code class=\"language-text\">x</code>는 할당 시점에 넓히기가 동작해서 <code class=\"language-text\">string</code>으로 추론된다</p>\n</li>\n<li>\n<p>넓히기를 제어하는 것이 좋다</p>\n</li>\n</ul>\n</li>\n<li>\n<p>넓히기를 제어하는 방법</p>\n<ul>\n<li>\n<p><code class=\"language-text\">const</code>로 변수 선언하기</p>\n</li>\n<li>\n<p>객체에서 타입스크립트의 넓히기 알고리즘은 각 요소를 <code class=\"language-text\">let</code>으로 할당된 것처럼 다룬다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\nv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 '3' 형식은 'number' 형식에 할당할 수 없습니다.</span>\nv<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 '{ x: number; }' 형식에 'y' 속성이 없습니다.</span>\nv<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Pythagoras\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 '{ x: number; }' 형식에 'name' 속성이 없습니다</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>타입스크립트의 기본 동작 재정의하기</p>\n<ul>\n<li>\n<p>명시적 타입 구문 제공</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> v<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 { x: 1|3|5; }</span></code></pre></div>\n</li>\n<li>\n<p>타입 체커에 추가적인 문맥 제공</p>\n<ul>\n<li>ex) 함수의 매개변수로 값을 전달</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">const</code> 단언문 사용하기 (<code class=\"language-text\">as const</code>)</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> v1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\ty<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 타입은 { x: number, y: number; }</span>\n\n<span class=\"token keyword\">const</span> v2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입은 { x: 1, y: number; }</span>\n\n<span class=\"token keyword\">const</span> v3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\ty<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입은 { readonly x: 1; readonly y: 2; }</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-22-타입-좁히기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-22-%ED%83%80%EC%9E%85-%EC%A2%81%ED%9E%88%EA%B8%B0\" aria-label=\"아이템 22 타입 좁히기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 22: 타입 좁히기</h2>\n<ul>\n<li>\n<p>분기문에서 예외를 던지거나 함수를 반환하여 블록의 나머지 부분에서 변수의 타입 좁히기</p>\n</li>\n<li>\n<p><code class=\"language-text\">instanceof</code> 으로 타입 좁히기</p>\n</li>\n<li>\n<p>속성 체크로 타입 좁히기</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">pickAB</span><span class=\"token punctuation\">(</span>ab<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token keyword\">in</span> ab<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ab<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 A</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    ab<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 B</span>\n  <span class=\"token punctuation\">}</span>\n  ab<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 a | B</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Array.isArray</code> 등의 내장 함수로 타입 좁히기</p>\n</li>\n<li>\n<p>🚨주의! <code class=\"language-text\">null</code> 체크 시 <code class=\"language-text\">typeof null === 'object'</code>가 된다</p>\n</li>\n<li>\n<p>명시적 ‘태그’ 붙이기 (tagged union)</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleEvent</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> AppEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"download\"</span><span class=\"token operator\">:</span>\n      e<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"upload\"</span><span class=\"token operator\">:</span>\n      e<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입스크립트를 돕기 위해 커스텀 함수 도입 (사용자 정의 타입 가드)</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isInputElement</span><span class=\"token punctuation\">(</span>el<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> el <span class=\"token keyword\">is</span> HTMLInputElement <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"value\"</span> <span class=\"token keyword\">in</span> el<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>배열에서 <code class=\"language-text\">undefined</code> 걸러내기</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">isDefined</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> x <span class=\"token keyword\">is</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> members <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Janet\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>who<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> jackson5<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> who<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isDefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 string[]</span></code></pre></div>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-23-한꺼번에-객체-생성하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-23-%ED%95%9C%EA%BA%BC%EB%B2%88%EC%97%90-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"아이템 23 한꺼번에 객체 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 23: 한꺼번에 객체 생성하기</h2>\n<ul>\n<li>\n<p>타입스크립트의 타입은 일반적으로 변경되지 않는다. 따라서 객체를 생성할 때는 속성을 하나씩 추가하기보다는 여러 속성을 포함해서 한꺼번에 생성해야 타입 추론에 유리하다.</p>\n</li>\n<li>\n<p>객체를 제각각 나눠야 한다면, 타입 단언문(<code class=\"language-text\">as</code>)을 사용한다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> pt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Point<span class=\"token punctuation\">;</span>\npt<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\npt<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li><strong>객체 전개 연산자(<code class=\"language-text\">...</code>)</strong> 사용</li>\n</ul>\n</li>\n<li>\n<p>선택적 필드 방식으로 표현하기</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">addOptional</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> object<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  a<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token constant\">U</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> nameTitle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Khufu\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"Pharaoh\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> pharaoh <span class=\"token operator\">=</span> <span class=\"token function\">addOptional</span><span class=\"token punctuation\">(</span>\n  nameTitle<span class=\"token punctuation\">,</span>\n  hasDates <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">2589</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">2566</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-24-일관성-있는-별칭-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-24-%EC%9D%BC%EA%B4%80%EC%84%B1-%EC%9E%88%EB%8A%94-%EB%B3%84%EC%B9%AD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 24 일관성 있는 별칭 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 24: 일관성 있는 별칭 사용하기</h2>\n<ul>\n<li>\n<p>별칭을 남발하면 제어 흐름을 분석하기 어렵다</p>\n</li>\n<li>\n<p>객체의 속성을 별칭에 할당하면 <code class=\"language-text\">strictNullChecks</code>에서 걸릴 위험이 있다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Polygon</span> <span class=\"token punctuation\">{</span>\n  exterior<span class=\"token operator\">:</span> Coordinate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  holes<span class=\"token operator\">:</span> Coordinate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  bbox<span class=\"token operator\">?</span><span class=\"token operator\">:</span> BoundingBox<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPointInPolygon</span><span class=\"token punctuation\">(</span>polygon<span class=\"token operator\">:</span> Polygon<span class=\"token punctuation\">,</span> pt<span class=\"token operator\">:</span> Coordinate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  polygon<span class=\"token punctuation\">.</span>bbox<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 BoundingBox | undefined</span>\n  <span class=\"token keyword\">const</span> box <span class=\"token operator\">=</span> polygon<span class=\"token punctuation\">.</span>bbox<span class=\"token punctuation\">;</span>\n  box<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 BoundingBox | undefined</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>polygon<span class=\"token punctuation\">.</span>bbox<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    polygon<span class=\"token punctuation\">.</span>bbox<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 BoundingBox</span>\n    box<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 BoundingBox | undefined</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>속성 체크는 <code class=\"language-text\">polygon.bbox</code>의 타입을 정제했지만 <code class=\"language-text\">box</code>는 그렇지 않다\n→ <strong>객체 비구조화 할당</strong> 이용하기</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isPointInPolygon</span><span class=\"token punctuation\">(</span>polygon<span class=\"token operator\">:</span> Polygon<span class=\"token punctuation\">,</span> pt<span class=\"token operator\">:</span> Coordinate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> bbox <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> polygon<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bbox<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> bbox<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>객체 비구조화 이용 시 주의사항\n<ul>\n<li>전체 <code class=\"language-text\">bbox</code> 속성이 아니라 <code class=\"language-text\">x</code>와 <code class=\"language-text\">y</code>가 선택적 속성일 경우 속성 체크가 더 필요하다</li>\n<li><code class=\"language-text\">bbox</code>에는 선택적 속성이 적합했지만 <code class=\"language-text\">holes</code>에는 그렇지 않다</li>\n<li>런타임에도 혼동을 야기할 가능성\n<ul>\n<li>속성보다 지역 변수 사용하기</li>\n</ul>\n</li>\n<li>(교재 p.134 참조)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-25-비동기-코드에는-콜백-대신-async-함수-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-25-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%94%EB%93%9C%EC%97%90%EB%8A%94-%EC%BD%9C%EB%B0%B1-%EB%8C%80%EC%8B%A0-async-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 25 비동기 코드에는 콜백 대신 async 함수 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 25: 비동기 코드에는 콜백 대신 async 함수 사용하기</h2>\n<ul>\n<li>\n<p>과거 자바스크립트의 비동기 콜백 지옥</p>\n</li>\n<li>\n<p>ES2015는 <code class=\"language-text\">Promise</code> 개념을 도입</p>\n</li>\n<li>\n<p>ES2017에서는 <code class=\"language-text\">async</code>와 <code class=\"language-text\">await</code> 도입</p>\n</li>\n<li>\n<p>타입스크립트에서는 런타임에 관계없이 <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> 사용 가능!</p>\n<ul>\n<li>타입스크립트의 프로미스 반환 타입은 <code class=\"language-text\">Promise&lt;Response></code></li>\n</ul>\n</li>\n<li>\n<p>일반적으로 프로미스보다는 <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code>을 권장</p>\n<ul>\n<li>더 간결하고 직관적</li>\n<li><code class=\"language-text\">async</code> 함수는 항상 프로미스를 반환하도록 강제된다</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// function getNumber(): Promise&lt;number></span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>콜백이나 프로미스를 사용하면 실수로 반(half)동기 코드를 작성할 수 있지만, <code class=\"language-text\">async</code>를 사용하면 항상 비동기 코드를 작성할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> _cache<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchWithCache</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token keyword\">in</span> _cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _cache<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  _cache<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> requestStatus<span class=\"token operator\">:</span> <span class=\"token string\">\"loading\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"success\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  requestStatus <span class=\"token operator\">=</span> <span class=\"token string\">\"loading\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> profile <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchWithCache</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/user/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  requestStatus <span class=\"token operator\">=</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">async</code> 함수에서 프로미스를 반환하면 반환 타입은 <code class=\"language-text\">Promise&lt;Promise&lt;T>></code>가 아닌 <code class=\"language-text\">Promise&lt;T></code>가 된다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// function getJSON(url: string): Promise&lt;any></span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> jsonPromise <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Promise&lt;any></span>\n  <span class=\"token keyword\">return</span> jsonPromise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-26-타입-추론에-문맥이-어떻게-사용되는지-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-26-%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0%EC%97%90-%EB%AC%B8%EB%A7%A5%EC%9D%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94%EC%A7%80-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 26 타입 추론에 문맥이 어떻게 사용되는지 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 26: 타입 추론에 문맥이 어떻게 사용되는지 이해하기</h2>\n<ul>\n<li>\n<p>문자열 타입을 문자열 리터럴 타입의 유니온으로 사용하는 경우</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Language</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"TypeScript\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span>language<span class=\"token operator\">:</span> Language<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n\n<span class=\"token keyword\">let</span> language <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 에러</span></code></pre></div>\n<ul>\n<li>\n<p>해결 방법</p>\n<ul>\n<li>\n<p>타입 선언에서 language의 가능한 값을 제한</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> language<span class=\"token operator\">:</span> Language <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n<li>\n<p>language를 상수로 만들기</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> language <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<p>→ <code class=\"language-text\">const</code>를 사용하여 타입 체커에게 변경할 수 없다고 알려주기</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>튜플 사용 시 주의점</p>\n<ul>\n<li>\n<p>위와 마찬가지로 값을 분리 당함</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>where<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n\n<span class=\"token keyword\">const</span> loc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 🚨 'number[]' 형식의 인수는 '[number, number]' 형식의 매개변수에 할당될 수 없습니다</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>해결 방법</p>\n<ul>\n<li>\n<p>타입 선언 제공</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n<li>\n<p>상수 문맥 제공</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> loc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 🚨 에러: 'readonly [10, 20]' 형식은 '[number, number]'에 할당할 수 없습니다.</span></code></pre></div>\n</li>\n<li>\n<p>최선의 해결책</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>where<span class=\"token operator\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> loc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>객체 사용 시 주의점</p>\n<ul>\n<li>문자열 리터럴이나 튜플을 포함하는 큰 객체에서 상수를 뽑아낼 때, 프로퍼티 타입이 <code class=\"language-text\">string</code>으로 추론되는 경우 타입 단언이나 상수 단언을 사용할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>콜백 사용 시 주의점</p>\n<ul>\n<li>콜백을 다른 함수로 전달할 때, 타입스크립트는 콜백의 매개변수 타입을 추론하기 위해 문맥을 사용한다. 이 경우 넘겨주는 함수의 매개변수에 타입 구문을 추가해서 해결할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-27-함수형-기법과-라이브러리로-타입-흐름-유지하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-27-%ED%95%A8%EC%88%98%ED%98%95-%EA%B8%B0%EB%B2%95%EA%B3%BC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A1%9C-%ED%83%80%EC%9E%85-%ED%9D%90%EB%A6%84-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"아이템 27 함수형 기법과 라이브러리로 타입 흐름 유지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 27: 함수형 기법과 라이브러리로 타입 흐름 유지하기</h2>\n<ul>\n<li>\n<p>함수형 프로그래밍을 지원하는 최근의 라이브러리</p>\n<ul>\n<li>ex) <code class=\"language-text\">map</code>, <code class=\"language-text\">flatMap</code>, <code class=\"language-text\">filter</code>, <code class=\"language-text\">reduce</code> 등</li>\n<li>타입 정보가 그대로 유지되면서 타입 흐름(flow)이 계속 전달된다</li>\n</ul>\n</li>\n<li>\n<p>lodash의 <code class=\"language-text\">Dictionary</code> 타입</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> rows <span class=\"token operator\">=</span> rawRows\n  <span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rowStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span><span class=\"token function\">zipObject</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">,</span> rowStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 타입이 _.Dictionary&lt;string>[]</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Dictionary&lt;string></code>은 <code class=\"language-text\">{[key: string]: string}</code> 또는 <code class=\"language-text\">Record&lt;string, string></code> 과 동일하다</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">flat</code> 메서드</p>\n<ul>\n<li>\n<p><code class=\"language-text\">T[][] => T[]</code></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> rosters<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>team<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> BasketBallPlayer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> allPlayers <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>rosters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 타입이 BasketBallPlayer[]</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>기타 내장된 함수형 기법들</p>\n</li>\n<li>\n<p>타입스크립트의 많은 부분이 자바스크립트 라이브러리의 동작을 정확히 모델링하기 위해서 개발되었으므로, 라이브러리 사용 시 타입 정보가 잘 유지되는 점을 활용하자</p>\n</li>\n</ul>","timeToRead":10,"frontmatter":{"title":"이펙티브 타입스크립트 3장","date":"December 18, 2021","description":null,"tags":["effective-typescript"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/effective-typescript/effective-typescript-3/","previous":{"fields":{"slug":"/weekly/2021-12-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"December 19, 2021","description":"weekly-i-learned","title":"12월 3주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2021-12-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"December 12, 2021","description":"weekly-i-learned","title":"12월 2주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/effective-typescript/effective-typescript-4/","langKey":"en","directoryName":"effective-typescript"},"frontmatter":{"date":"December 22, 2021","description":null,"title":"이펙티브 타입스크립트 4장","tags":["effective-typescript"]}},"nextInSameTag":{"fields":{"slug":"/effective-typescript/effective-typescript-2-1/","langKey":"en","directoryName":"effective-typescript"},"frontmatter":{"date":"December 11, 2021","description":null,"title":"이펙티브 타입스크립트 2장 - 1","tags":["effective-typescript"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}