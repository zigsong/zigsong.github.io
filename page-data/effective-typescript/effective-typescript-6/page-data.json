{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-typescript/effective-typescript-6/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"55a15176-101b-5aea-8bfb-4d43983c2f47","excerpt":"타입 선언과 @types 아이템 45: devDependencies에 typescript와 @types 추가하기 npm의 의존성 구분 dependencies - 현재 프로젝트 실행 시 필수적인 라이브러리 devDependencies…","html":"<p>타입 선언과 @types</p>\n<!-- more -->\n<hr>\n<h2 id=\"아이템-45-devdependencies에-typescript와-types-추가하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-45-devdependencies%EC%97%90-typescript%EC%99%80-types-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"아이템 45 devdependencies에 typescript와 types 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 45: devDependencies에 typescript와 @types 추가하기</h2>\n<ul>\n<li>\n<p>npm의 의존성 구분</p>\n<ul>\n<li>dependencies - 현재 프로젝트 실행 시 필수적인 라이브러리</li>\n<li>devDependencies - 런타임에는 필요없는 라이브러리</li>\n<li>peerDependencies - 런타임에 필요하긴 하지만, 의존성을 직접 관리하지 않는 라이브러리</li>\n</ul>\n</li>\n<li>\n<p>타입스크립트는 개발 도구일 뿐이고 타입 정보는 런타임에 존재하지 않기 때문에, 타입스크립트와 관련된 라이브러리는 일반적으로 devDependencies에 속한다</p>\n</li>\n<li>\n<p>타입스크립트 프로젝트에서 고려해야 할 의존성</p>\n<ol>\n<li>타입스크립트 자체 의존성</li>\n</ol>\n<ul>\n<li>타입스크립트를 시스템 레벨로 설치하기보다는 devDependencies에 넣는 것을 권장한다\n→ <code class=\"language-text\">npm install</code> 시 팀원들 모두 항상 정확한 버전의 타입스크립트 설치 가능</li>\n<li>대부분의 타입스크립트 IDE와 빌드 도구는 devDependencies를 통해 설치된 타입스크립트의 버전을 인식할 수 있다</li>\n</ul>\n<ol>\n<li>타입 의존성(<code class=\"language-text\">@types</code>)을 고려</li>\n</ol>\n<ul>\n<li><code class=\"language-text\">DefinitelyTyped</code>에서 라이브러리에 대한 타입 정보를 얻을 수 있다</li>\n<li><code class=\"language-text\">@types</code> 라이브러리는 타입 정보만 포함하고 있으며 구현체는 포함하지 않는다</li>\n<li>원본 라이브러리 자체가 dependencies에 있더라도 <code class=\"language-text\">@types</code> 의존성은 devDependencies에 있어야 한다</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-46-타입-선언과-관련된-세-가지-버전-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-46-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EC%84%B8-%EA%B0%80%EC%A7%80-%EB%B2%84%EC%A0%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 46 타입 선언과 관련된 세 가지 버전 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 46: 타입 선언과 관련된 세 가지 버전 이해하기</h2>\n<ul>\n<li>\n<p>타입스크립트 사용 시 고려해야 할 사항</p>\n<ul>\n<li>라이브러리의 버전</li>\n<li>타입 선언(<code class=\"language-text\">@types</code>)의 버전</li>\n<li>타입스크립트의 버전</li>\n</ul>\n</li>\n<li>\n<p>타입스크립트에서 의존성을 사용하는 방식</p>\n<ul>\n<li>특정 라이브러리는 dependencies로, 타입 정보는 devDependencies로 설치</li>\n</ul>\n</li>\n<li>\n<p>실제 라이브러리와 타입 정보의 버전이 별도로 관리되는 방식의 문제점</p>\n<ol>\n<li>라이브러리를 업데이트했지만 실수로 타입 선언은 업데이트하지 않은 경우</li>\n</ol>\n<ul>\n<li>타입 선언도 업데이트하여 라이브러리와 버전을 맞춘다</li>\n<li>보강 기법 또는 타입 선언의 업데이트를 직접 작성한다</li>\n</ul>\n<ol start=\"2\">\n<li>라이브러리보다 타입 선언의 버전이 최신인 경우</li>\n</ol>\n<ul>\n<li>라이브러리 버전을 올리거나 타입 선언의 버전을 내리기</li>\n</ul>\n<ol start=\"3\">\n<li>프로젝트에서 사용하는 타입스크립트 버전보다 라이브러리에서 필요로 하는 타입스크립트 버전이 최신인 경우</li>\n</ol>\n<ul>\n<li>타입스크립트의 최신 버전을 사용한다</li>\n<li>라이브러리 타입 선언의 버전을 내리거나, <code class=\"language-text\">declare module</code> 선언으로 라이브러리의 타입 정보를 없애 버린다</li>\n</ul>\n<ol start=\"4\">\n<li><code class=\"language-text\">@types</code> 의존성이 중복되는 경우</li>\n</ol>\n<ul>\n<li>\n<p>ex) <code class=\"language-text\">@types/bar</code>가 현재 호환되지 않는 버전의 <code class=\"language-text\">@types/foo</code>에 의존하는 경우</p>\n<ul>\n<li>전역 네임스페이스에 있는 타입 선언 모듈인 경우 중복 문제가 발생한다.\n→ 서로 버전이 호환되도록 업데이트한다</li>\n</ul>\n</li>\n<li>\n<p>일부 라이브러리는 자체적으로 타입 선언을 포함(번들링)한다.</p>\n<ul>\n<li><code class=\"language-text\">package.json</code> 의 <code class=\"language-text\">types</code> 필드가 <code class=\"language-text\">.d.ts</code> 파일을 가리키도록 되어 있다</li>\n<li>버전 불일치 문제를 해결할 수 있지만, 네 가지 부수적인 문제점이 있다\n<ol>\n<li>번들된 타입 선언에 보강 기법으로 해결할 수 없는 오류가 있는 경우, 또는 공개 시점에는 잘 동작했지만 타입스크립트 버전이 올라가면서 오류가 발생하는 경우 - 번들된 타입에서는 <code class=\"language-text\">@types</code>의 버전 선택 불가능</li>\n<li>프로젝트 내의 타입 선언이 다른 라이브러리의 타입 선언에 의존하는 경우 - devDependencies에 들어간 의존성을 다른 사용자는 설치할 수 없기 때문\n→ <code class=\"language-text\">DefinitelyTyped</code>에 타입 선언을 공개하여 타입 선언을 <code class=\"language-text\">@types</code>로 분리한다</li>\n<li>프로젝트의 과거 버전에 있는 타입 선언에 문제가 있는 경우\n→ 과거 버전으로 돌아가서 패치 업데이트를 한다</li>\n<li>타입 선언의 패치 업데이트를 자주 하기 어렵다는 문제</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>잘 작성된 타입 선언은 라이브러리를 올바르게 사용하는 방법에 도움이 되며 생산성을 크게 향상시킨다</p>\n</li>\n<li>\n<p>라이브러리 공개 시, 타입 선언을 자체적으로 포함하는 것과 타입 정보만 분리하여 <code class=\"language-text\">DefinitelyTyped</code>에 공개하는 것의 장단점을 비교해 보자</p>\n</li>\n<li>\n<p>라이브러리가 타입스크립트로 작성된 경우만 타입 선언을 라이브러리에 포함하는 것을 권장한다</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-47-공개-api에-등장하는-모든-타입을-익스포트하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-47-%EA%B3%B5%EA%B0%9C-api%EC%97%90-%EB%93%B1%EC%9E%A5%ED%95%98%EB%8A%94-%EB%AA%A8%EB%93%A0-%ED%83%80%EC%9E%85%EC%9D%84-%EC%9D%B5%EC%8A%A4%ED%8F%AC%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"아이템 47 공개 api에 등장하는 모든 타입을 익스포트하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 47: 공개 API에 등장하는 모든 타입을 익스포트하기</h2>\n<ul>\n<li>\n<p>라이브러리 제작자는 프로젝트 초기에 타입 익스포트부터 작성해야 한다</p>\n<ul>\n<li>\n<p>타입을 익스포트하지 않았을 경우</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SecretName</span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  last<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SecretSanta</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> SecretName<span class=\"token punctuation\">;</span>\n  gift<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getGift</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> SecretName<span class=\"token punctuation\">,</span> gift<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SecretSanta <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>해당 라이브러리 사용자는 <code class=\"language-text\">SecretName</code> 또는 <code class=\"language-text\">SecretSanta</code> 를 직접 임포트할 수 없고, <code class=\"language-text\">getGift</code>만 임포트할 수 있다</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Parameters</code>와 <code class=\"language-text\">ReturnType</code>을 이용해 추출하기</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MySanta</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> getGift<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SecretSanta</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyName</span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> getGift<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SecretName</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<p>→ 사용자가 추출하기 전에 공개 메서드에 사용된 타입은 익스포트하자!</p>\n<hr>\n<h2 id=\"아이템-48-api-주석에-tsdoc-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-48-api-%EC%A3%BC%EC%84%9D%EC%97%90-tsdoc-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 48 api 주석에 tsdoc 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 48: API 주석에 TSDoc 사용하기</h2>\n<ul>\n<li>\n<p>함수 주석에 <code class=\"language-text\">// ...</code> 대신 JSDoc 스타일의 <code class=\"language-text\">/** ... **/</code> 을 사용하면 대부분의 편집기는 함수 사용부에서 주석을 툴팁으로 표시해 준다</p>\n</li>\n<li>\n<p>타입스크립트 관점의 TSDoc</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * Generate a greeting\n * @param name Name of the person to greet\n * @param title ...\n * returns ...\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greetFullTSDoc</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입 정의에 TSDoc 사용하기</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/** 특정 시간과 장소에서 수행된 측정 */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Measurement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** 어디에서 측정되었나? */</span>\n  position<span class=\"token operator\">:</span> Vector3D<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 언제 측정되었나? */</span>\n  time<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 측정된 운동량 */</span>\n  momentum<span class=\"token operator\">:</span> Vector3D<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>→ <code class=\"language-text\">Measurement</code> 객체의 각 필드에 마우스를 올려 보면 필드별로 설명을 볼 수 있다</p>\n</li>\n<li>\n<p>😮 주의! 타입스크립트에서는 타입 정보가 코드에 있기 때문에 TSDoc에서는 타입 정보를 명시하면 안 된다</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-49-콜백에서-this에-대한-타입-제공하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-49-%EC%BD%9C%EB%B0%B1%EC%97%90%EC%84%9C-this%EC%97%90-%EB%8C%80%ED%95%9C-%ED%83%80%EC%9E%85-%EC%A0%9C%EA%B3%B5%ED%95%98%EA%B8%B0\" aria-label=\"아이템 49 콜백에서 this에 대한 타입 제공하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 49: 콜백에서 this에 대한 타입 제공하기</h2>\n<ul>\n<li>\n<p>자바스크립트에서 this는 다이나믹 스코프</p>\n<ul>\n<li>‘정의된’ 방식이 아니라 ‘호출된’ 방식에 따라 달라진다</li>\n</ul>\n</li>\n<li>\n<p>타입스크립트는 자바스크립트의 this 바인딩을 그대로 모델링한다</p>\n</li>\n<li>\n<p>this를 사용하는 콜백 함수에서 this 바인딩 문제 해결하기</p>\n<ul>\n<li>\n<p>콜백 함수의 매개변수에 this를 추가하고, 콜백 함수를 <code class=\"language-text\">call</code>로 호출하는 방법</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">addKeyListener</span><span class=\"token punctuation\">(</span>\n  el<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span> e<span class=\"token operator\">:</span> KeyboardEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  el<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>👩‍🏫 이때 반드시 <code class=\"language-text\">call</code> 을 사용해야 한다</li>\n</ul>\n</li>\n<li>\n<p>만약 라이브러리 사용자가 콜백을 화살표 함수로 작성하고 this를 참조하려고 하면 타입스크립트가 문제를 잡아낸다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">registerHandler</span><span class=\"token punctuation\">(</span>el<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addKeyListener</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 'Foo' 유형에 'innerHTML' 속성이 없습니다</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>콜백 함수에서 this 값을 사용해야 한다면 this는 API의 일부가 되는 것이기 때문에 반드시 타입 선언에 포함해야 한다</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-50-오버로딩-타입보다는-조건부-타입을-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-50-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9-%ED%83%80%EC%9E%85%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 50 오버로딩 타입보다는 조건부 타입을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 50: 오버로딩 타입보다는 조건부 타입을 사용하기</h2>\n<ul>\n<li>\n<p>두 가지 타입의 매개변수를 받는 함수</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span></code></pre></div>\n<ul>\n<li>선언문에는 <code class=\"language-text\">number</code> 타입을 매개변수로 넣고 <code class=\"language-text\">string</code> 타입을 반환하는 경우도 포함되어 있다</li>\n</ul>\n<p>→ 제네릭을 사용하여 동작을 모델링할 수 있다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">double</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 12</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 'x' (😮 string을 원하고 있다.)</span></code></pre></div>\n<p>→ 타입이 너무 과하게 구체적인 문제</p>\n</li>\n<li>\n<p>조건부 타입</p>\n<ul>\n<li>\n<p>타입 공간의 if 구문</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">double</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>개별 타입의 유니온으로 일반화하기 때문에 타입이 더 정확해진다</p>\n</li>\n<li>\n<p>각각이 독립적으로 처리되는 타입 오버로딩과 달리, 조건부 타입은 타입 체커가 단일 표현식으로 받아들이기 때문에 유니온 문제를 해결할 수 있다</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-51-의존성-분리를-위해-미러-타입-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-51-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%B6%84%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%B4-%EB%AF%B8%EB%9F%AC-%ED%83%80%EC%9E%85-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 51 의존성 분리를 위해 미러 타입 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 51: 의존성 분리를 위해 미러 타입 사용하기</h2>\n<ul>\n<li>\n<p>CSV 파일을 파싱하는 라이브러리 작성 시 NodeJS 사용자를 위해 매개변수에 <code class=\"language-text\">Buffer</code> 타입을 허용하는 경우</p>\n<ul>\n<li><code class=\"language-text\">Buffer</code> 타입 정의를 위해 <code class=\"language-text\">@types/node</code> 패키지 필요</li>\n<li>그러나 다른 라이브러리 사용자들은 해당 패키지가 불필요하다</li>\n</ul>\n</li>\n<li>\n<p>각자가 필요한 모듈만 사용할 수 있도록 구조적 타이핑 적용하기</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CsvBuffer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span>\n  contents<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> CsvBuffer\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>column<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">CsvBuffer</code>가 <code class=\"language-text\">Buffer</code> 타입과 호환되기 때문에 NodeJS 프로젝트에서도 사용 가능</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"column1, column2\\nval2,val2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>미러링</strong>: 작성 중인 라이브러리가 의존하는 라이브러리의 구현과 무관하게 타입에만 의존한다면, 필요한 선언부만 추출하여 작성 중인 라이브러리에 넣는 것</p>\n</li>\n<li>\n<p>다른 라이브러리의 타입이 아닌 구현에 의존하는 경우에도 동일한 기법을 적용할 수 있고 타입 의존성을 피할 수 있다</p>\n</li>\n</ul>\n<p>→ 유닛 테스트와 상용 시스템 간의 의존성을 분리하는 데도 유용하다</p>\n<hr>\n<h2 id=\"아이템-52-테스팅-타입의-함정에-주의하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-52-%ED%85%8C%EC%8A%A4%ED%8C%85-%ED%83%80%EC%9E%85%EC%9D%98-%ED%95%A8%EC%A0%95%EC%97%90-%EC%A3%BC%EC%9D%98%ED%95%98%EA%B8%B0\" aria-label=\"아이템 52 테스팅 타입의 함정에 주의하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 52: 테스팅 타입의 함정에 주의하기</h2>\n<ul>\n<li>\n<p>타입 선언 테스트하기</p>\n<ul>\n<li>\n<p>유틸리티 라이브러리에서 제공하는 <code class=\"language-text\">map</code> 함수의 타입 작성하기</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>u<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">V</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>단순히 함수를 호출하는 테스트만으로는 반환값에 대한 체크가 누락될 수 있다 (’실행’에서의 오류만 검사한다)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>반환값을 특정 타입의 변수에 할당하여 간단히 반환 타입을 체크할 수 있는 방법</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> lengths<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"paul\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">number[]</code> 타입 선언은 <code class=\"language-text\">map</code> 함수의 반환 타입이 <code class=\"language-text\">number[]</code> 임을 보장한다</li>\n</ul>\n</li>\n<li>\n<p>그러나 테스팅을 위해 할당을 사용하는 방법에는 두 가지 문제가 있다</p>\n<ol>\n<li>불필요한 변수를 만들어야 한다</li>\n</ol>\n<ul>\n<li>\n<p>일반적인 해결책은 변수 도입 대신 헬퍼 함수를 정의하는 것이다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">assertType</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token generic-function\"><span class=\"token function\">assertType</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"paul\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<ol>\n<li>두 타입이 동일한지 체크하는 것이 아니라 할당 가능성을 체크한다</li>\n</ol>\n<ul>\n<li>\n<p>객체의 타입을 체크하는 경우</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> beatles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"paul\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"george\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ringo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-function\"><span class=\"token function\">assertType</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>beatles<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">,</span>\n    inYellowSubmarine<span class=\"token operator\">:</span> name <span class=\"token operator\">===</span> <span class=\"token string\">\"ringo\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li>반환된 배열은 <code class=\"language-text\">{name: string}[]</code> 에 할당 가능하지만, <code class=\"language-text\">inYellowSubmarine</code> 속성에 대한 부분이 체크되지 않았다</li>\n</ul>\n</li>\n<li>\n<p>타입스크립트의 함수는 매개변수가 더 적은 함수 타입에 할당 가능하다는 문제</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\nassertType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  정상?!</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Parameters</code>와 <code class=\"language-text\">ReturnType</code> 제네릭 타입을 이용해 함수의 매개변수 타입과 반환 타입만 분리하여 테스트할 수 있다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> p<span class=\"token operator\">:</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> double<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-function\"><span class=\"token function\">assertType</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 🚨 '[number]' 형식의 인수는 '[number, number]' 형식의 매개변수에 할당될 수 없습니다</span>\n<span class=\"token keyword\">let</span> r<span class=\"token operator\">:</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> double<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-function\"><span class=\"token function\">assertType</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">map</code>의 콜백 함수에서 사용하게 되는 this 값에 대한 타입 선언 테스트\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  array<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> u<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> array<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">V</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>타입 시스템 내에서 암시적 <code class=\"language-text\">any</code> 타입을 발견하기 위해 DefinitelyTyped의 타입 선언을 위한 도구 <code class=\"language-text\">dtslint</code> 사용하기</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> beatles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"paul\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"george\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ringo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n  beatles<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n    name<span class=\"token punctuation\">,</span> <span class=\"token comment\">// $ExpectType string</span>\n    i<span class=\"token punctuation\">,</span> <span class=\"token comment\">// $ExpectType number</span>\n    array <span class=\"token comment\">// $ExpectType string[]</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $ExpectType string[]</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// $ExpectType number[]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">dtslint</code>는 할당 가능성을 체크하는 대신 각 심벌의 타입을 추출하여 글자 자체가 같은지 비교한다</li>\n</ul>\n</li>\n</ul>","timeToRead":10,"frontmatter":{"title":"이펙티브 타입스크립트 6장","date":"January 06, 2022","description":null,"tags":["effective-typescript"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/effective-typescript/effective-typescript-6/","previous":{"fields":{"slug":"/weekly/2022-1-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 08, 2022","description":"weekly-i-learned","title":"1월 첫주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/retrospective/retrospective-2021/","langKey":"en","directoryName":"retrospective"},"frontmatter":{"date":"December 31, 2021","description":null,"title":"2021년 회고","tags":["retrospective"]}},"previousInSameTag":{"fields":{"slug":"/effective-typescript/effective-typescript-7/","langKey":"en","directoryName":"effective-typescript"},"frontmatter":{"date":"January 15, 2022","description":null,"title":"이펙티브 타입스크립트 7장","tags":["effective-typescript"]}},"nextInSameTag":{"fields":{"slug":"/effective-typescript/effective-typescript-5/","langKey":"en","directoryName":"effective-typescript"},"frontmatter":{"date":"December 29, 2021","description":null,"title":"이펙티브 타입스크립트 5장","tags":["effective-typescript"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}