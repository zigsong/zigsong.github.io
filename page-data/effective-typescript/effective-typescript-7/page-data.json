{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-typescript/effective-typescript-7/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"fe74c6d8-d159-5667-b046-902bd3c566dc","excerpt":"코드를 작성하고 실행하기 아이템 53: 타입스크립트 기능보다는 ECMAScript…","html":"<p>코드를 작성하고 실행하기</p>\n<!-- more -->\n<hr>\n<h2 id=\"아이템-53-타입스크립트-기능보다는-ecmascript-기능을-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-53-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B8%B0%EB%8A%A5%EB%B3%B4%EB%8B%A4%EB%8A%94-ecmascript-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 53 타입스크립트 기능보다는 ecmascript 기능을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 53: 타입스크립트 기능보다는 ECMAScript 기능을 사용하기</h2>\n<ul>\n<li>\n<p>자바스크립트에 새로 추가된 기능은 타입스크립트의 초기 기능과 호환성 문제를 발생시켰다</p>\n<ul>\n<li>자바스크립트의 신규 기능을 그대로 채택하고 타입스크립트 초기 버전과 호환성을 포기했다</li>\n<li>그러나 이미 사용되고 있던 몇 가지 기능(호환성 문제로 지양하는 방식)이 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>열거형(<code class=\"language-text\">enum</code>)</strong></p>\n<ul>\n<li>\n<p>몇몇 값의 모음을 나타내는 방식</p>\n</li>\n<li>\n<p>😵 문제점</p>\n<ul>\n<li>숫자 열거형에 0, 1, 2 외의 다른 숫자가 할당되면 매우 위험하다</li>\n<li>상수 열거형(<code class=\"language-text\">const enum</code>)은 런타임에 완전히 제거되어, 문자열 열거형에서 문제를 일으킨다</li>\n<li><code class=\"language-text\">preserveConstEnums</code> 플래그를 설정한 상수 열거형은 런타임 코드에 정보를 유지한다</li>\n<li>문자열 열거형은 구조적 타이핑이 아닌 명목적 타이핑을 사용한다</li>\n</ul>\n</li>\n<li>\n<p>문자열 열거형의 명목적 타이핑은 자바스크립트와 동작이 다르다는 문제가 있다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">enum</span> Flavor <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">VANILLA</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"vanilla\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">CHOCOLATE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"chocolate\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">STRAWBERRY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"strawberry\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> flavor <span class=\"token operator\">=</span> Flavor<span class=\"token punctuation\">.</span><span class=\"token constant\">CHOCOLATE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Flavor</span>\nflavor <span class=\"token operator\">=</span> <span class=\"token string\">\"strawberry\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 'strawberry' 형식은 'Flavor' 형식에 할당할 수 없습니다</span></code></pre></div>\n<p>→ 열거형 대신 리터럴 타입의 유니온 사용을 권장한다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Flavor</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"vanilla\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"chocolate\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"strawberry\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>매개변수 속성</strong></p>\n<ul>\n<li>\n<p>생성자의 매개변수를 사용하여 클래스 초기화 시 타입스크립트에는 간결한 문법을 제공한다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>😵 문제점</p>\n<ul>\n<li>실제로는 코드가 늘어난다</li>\n<li>매개변수 속성은 런타임에는 실제로 사용되지만, 타입스크립트에서는 사용되지 않는 것처럼 보인다</li>\n<li>매개변수 속성과 일반 속성을 섞어서 사용하면 클래스의 설계가 혼란스러워진다</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>네임스페이스와 트리플 슬래시 임포트</strong></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">namespace</span> foo <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// &lt;reference path=\"other.ts\" /></span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>→ ES2015 스타일의 모듈(<code class=\"language-text\">import</code>와 <code class=\"language-text\">export</code>) 사용을 권장한다</p>\n</li>\n<li>\n<p><strong>데코레이터</strong></p>\n<ul>\n<li>클래스, 메서드, 속성에 annotation을 붙이거나 기능을 추가하는 것</li>\n<li>😵 문제점\n<ul>\n<li>표준화가 완료되지 않았기 때문에 비표준으로 바뀌거나 호환성이 깨질 가능성이 있다</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-54-객체를-순회하는-노하우\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-54-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%88%9C%ED%9A%8C%ED%95%98%EB%8A%94-%EB%85%B8%ED%95%98%EC%9A%B0\" aria-label=\"아이템 54 객체를 순회하는 노하우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 54: 객체를 순회하는 노하우</h2>\n<ul>\n<li>\n<p>편집기에서 오류가 발생하는 경우</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  one<span class=\"token operator\">:</span> <span class=\"token string\">\"uno\"</span><span class=\"token punctuation\">,</span>\n  two<span class=\"token operator\">:</span> <span class=\"token string\">\"dos\"</span><span class=\"token punctuation\">,</span>\n  three<span class=\"token operator\">:</span> <span class=\"token string\">\"tres\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> k <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 🚨 obj에 인덱스 시그니처가 없기 때문에 엘리먼트는 암시적으로 'any' 타입입니다</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>→ <code class=\"language-text\">k</code>가 <code class=\"language-text\">string</code> 으로 인식되기 때문이다</p>\n<ul>\n<li>\n<p><code class=\"language-text\">k</code>의 타입을 더욱 구체적으로 명시해서 해결한다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>🤔 <code class=\"language-text\">k</code>가 <code class=\"language-text\">string</code>으로 추론된 이유</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">ABC</span></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>abc<span class=\"token operator\">:</span> <span class=\"token constant\">ABC</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> k <span class=\"token keyword\">in</span> abc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> abc<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">a</code>, <code class=\"language-text\">b</code>, <code class=\"language-text\">c</code> 외에 다른 속성이 존재하는 객체도 <code class=\"language-text\">foo</code> 함수의 매개변수 <code class=\"language-text\">abc</code>에 할당 가능하기 때문이다</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">keyof</code>을 사용하는 것의 문제</p>\n<ul>\n<li><code class=\"language-text\">v</code>도 <code class=\"language-text\">string | number</code>로 한정되어 범위가 너무 좁아진다</li>\n</ul>\n</li>\n<li>\n<p>단지 객체의 키와 값을 순회하고 싶다면 <code class=\"language-text\">Object.entries</code>를 사용한다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>abc<span class=\"token operator\">:</span> <span class=\"token constant\">ABC</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    k<span class=\"token punctuation\">;</span> <span class=\"token comment\">// string 타입</span>\n    v<span class=\"token punctuation\">;</span> <span class=\"token comment\">// any 타입</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-55-dom-계층-구조-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-55-dom-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 55 dom 계층 구조 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 55: DOM 계층 구조 이해하기</h2>\n<ul>\n<li>DOM 엘리먼트를 사용할 때 타입스크립트의 에러</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">타입</th>\n<th align=\"left\">예시</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">EventTarget</td>\n<td align=\"left\">window, XMLTHttpRequest</td>\n</tr>\n<tr>\n<td align=\"left\">Node</td>\n<td align=\"left\">document, Text, Comment</td>\n</tr>\n<tr>\n<td align=\"left\">Element</td>\n<td align=\"left\">HTMLElement, SVGElement 포함</td>\n</tr>\n<tr>\n<td align=\"left\">HTMLElement</td>\n<td align=\"left\"><code class=\"language-text\">&lt;i></code>, <code class=\"language-text\">&lt;b></code></td>\n</tr>\n<tr>\n<td align=\"left\">HTMLButtonElement</td>\n<td align=\"left\"><code class=\"language-text\">&lt;button></code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p><code class=\"language-text\">EventTarget</code></p>\n<ul>\n<li>\n<p>DOM 타입 중 가장 추상화된 타입으로, 이벤트리스너의 추가/제거, 이벤트 보내기만 가능</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleDrag</span><span class=\"token punctuation\">(</span>eDown<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> targetEl <span class=\"token operator\">=</span> eDown<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">;</span>\n  targetEl<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragging'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 🚨 개체가 null인 것 같습니다.</span>\n  <span class=\"token comment\">// 🚨 'EventTarget' 형식에 'classList' 속성이 없습니다</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Event</code>의 <code class=\"language-text\">currentTarget</code> 속성의 타입은 <code class=\"language-text\">EventTarget | null</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Node</code></p>\n<ul>\n<li><code class=\"language-text\">Element</code>가 아닌 <code class=\"language-text\">Node</code></li>\n<li>텍스트 조각과 주석</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Element</code>와 <code class=\"language-text\">HTMLElement</code></p>\n<ul>\n<li>HTML이 아닌 엘리먼트</li>\n<li><code class=\"language-text\">SVGSvgElement</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">HTMLxxxElement</code></p>\n<ul>\n<li>\n<p><code class=\"language-text\">HTMLxxxElement</code> 형태의 특정 엘리먼트들은 자신만의 고유한 속성을 가지고 있다</p>\n<ul>\n<li>ex) <code class=\"language-text\">HTMLImageElement</code> - <code class=\"language-text\">src</code>, <code class=\"language-text\">HTMLInputElement</code> - <code class=\"language-text\">value</code></li>\n</ul>\n</li>\n<li>\n<p>항상 정확한 타입을 얻을 수 있는 것은 아니다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 정확한 타입</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLButtonElement</span>\n\n<span class=\"token comment\">// 정확한 타입이 아닌 경우</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLElement</span></code></pre></div>\n</li>\n<li>\n<p>타입 단언문 사용</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-div\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLDivElement<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">strictNullChecks</code> 설정 시 엘리먼트가 <code class=\"language-text\">null</code>인 경우를 체크한다</p>\n</li>\n<li>\n<p><code class=\"language-text\">Event</code> 는 가장 추상화된 이벤트로, 별도의 계층구조를 가진다</p>\n<ul>\n<li>ex) <code class=\"language-text\">UIEvent</code>, <code class=\"language-text\">MouseEvent</code>, <code class=\"language-text\">TouchEvent</code>, <code class=\"language-text\">WheelEvent</code>, <code class=\"language-text\">KeyboardEvent</code></li>\n<li>더 많은 문맥 정보를 제공하여 DOM에 대한 타입 추론을 가능하게 해야 한다</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-56-정보를-감추는-목적으로-private-사용하지-않기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-56-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EA%B0%90%EC%B6%94%EB%8A%94-%EB%AA%A9%EC%A0%81%EC%9C%BC%EB%A1%9C-private-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B8%B0\" aria-label=\"아이템 56 정보를 감추는 목적으로 private 사용하지 않기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 56: 정보를 감추는 목적으로 private 사용하지 않기</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">public</code>, <code class=\"language-text\">protected</code>, <code class=\"language-text\">private</code> 같은 접근 제어자</p>\n<ul>\n<li>타입스크립트 키워드기 때문에 컴파일 후에 제거된다</li>\n</ul>\n</li>\n<li>\n<p>심지어 단언문을 사용하면 타입스크립트 상태에서도 <code class=\"language-text\">private</code> 속성에 접근 가능하다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Diary</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> secret <span class=\"token operator\">=</span> <span class=\"token string\">\"cheated on my English test\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> diary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Diary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>diary <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>secret<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<p>→ 정보를 감추기 위해 <code class=\"language-text\">private</code> 을 사용하면 안 된다</p>\n</li>\n<li>\n<p>정보를 감추기 위해 클로저 사용하기</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PasswordChecker</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">checkPassword</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>passwordHash<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">checkPassword</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> passwordHash<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> checker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PasswordChecker</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s3cret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchecker<span class=\"token punctuation\">.</span><span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s3cret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">PasswordChecker</code> 의 생성자 외부에서 <code class=\"language-text\">passwordHash</code> 변수에 접근할 수 없기 때문에 정보가 숨겨진다</p>\n<ul>\n<li>이때 <code class=\"language-text\">passwordHash</code>에 접근하는 메서드 역시 생성자 내부에 정의되어야 한다</li>\n<li>메서드 정의가 생성자 내부에 있으면, 인스턴스 메서드로 생성된다는 점을 기억하자 (메모리 낭비)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>비공개 필드 (현재 표준화 진행중) 사용하기</p>\n<ul>\n<li>접두사 <code class=\"language-text\">#</code></li>\n<li>타입 체크와 런타임 모두에서 비공개</li>\n<li>클래스 외부에서는 접근할 수 없지만, 클래스 메서드나 동일 클래스의 개별 인스턴스끼리는 접근이 가능하다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"아이템-57-소스맵을-사용하여-타입스크립트-디버깅하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-57-%EC%86%8C%EC%8A%A4%EB%A7%B5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%94%94%EB%B2%84%EA%B9%85%ED%95%98%EA%B8%B0\" aria-label=\"아이템 57 소스맵을 사용하여 타입스크립트 디버깅하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 57: 소스맵을 사용하여 타입스크립트 디버깅하기</h2>\n<ul>\n<li>\n<p>디버거는 런타임에 동작하며, 현재 동작하는 코드가 어떤 과정을 거쳤는지 모른다</p>\n</li>\n<li>\n<p>디버깅 문제를 해결하기 위해 브라우저는 소스맵(source map) 기능을 제공한다</p>\n<ul>\n<li>변환된 코드의 위치와 심벌들을 원본 코드의 원래 위치와 심벌들로 매핑한다</li>\n</ul>\n</li>\n<li>\n<p>타입스크립트의 소스맵 활성화</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>→ 각 <code class=\"language-text\">.ts</code> 파일에 대해서 <code class=\"language-text\">.js</code>와 <code class=\"language-text\">.js.map</code> 두 개의 파일을 생성한다</p>\n</li>\n<li>\n<p>소스맵에 대해 알아야 할 사항들</p>\n<ul>\n<li>타입스크립트와 함께 번들러나 압축기를 사용하고 있다면, 번들러나 압축기가 각자의 소스맵을 생성한다. 이상적인 디버깅을 위해서는 생성된 자바스크립트가 아닌 원본 타입스크립트 소스로 매핑되도록 해야 한다.</li>\n<li>상용 환경에 소스맵이 유출되고 있는지 확인해야 한다. 소스맵에 원본 코드의 인라인 복사본이 포함되어 있다면 공개해서는 안될 내용이 들어있을 수 있다.</li>\n</ul>\n</li>\n</ul>","timeToRead":7,"frontmatter":{"title":"이펙티브 타입스크립트 7장","date":"January 15, 2022","description":null,"tags":["effective-typescript"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/effective-typescript/effective-typescript-7/","previous":{"fields":{"slug":"/weekly/2022-1-week-2-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 20, 2022","description":"weekly-i-learned","title":"1월 2~3주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2022-1-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 08, 2022","description":"weekly-i-learned","title":"1월 첫주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/effective-typescript/effective-typescript-8/","langKey":"en","directoryName":"effective-typescript"},"frontmatter":{"date":"January 20, 2022","description":null,"title":"이펙티브 타입스크립트 8장","tags":["effective-typescript"]}},"nextInSameTag":{"fields":{"slug":"/effective-typescript/effective-typescript-6/","langKey":"en","directoryName":"effective-typescript"},"frontmatter":{"date":"January 06, 2022","description":null,"title":"이펙티브 타입스크립트 6장","tags":["effective-typescript"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}