{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/js-reactivity/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"c47d6488-3d12-553b-9f8a-7ee2310e953c","excerpt":"자바스크립트 반응형 아래와 같은 코드가 있다. 의 값을 20으로 바꿨으므로 에 의존하는  값이 40으로 바뀔 것이라고 기대한다. 하지만 을 찍어보면 여전히 10이 나온다. 자바스크립트는 반응형이 아닌 절차적(procedural…","html":"<p>자바스크립트 반응형</p>\n<!-- more -->\n<hr>\n<p>아래와 같은 코드가 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> price <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> quantity <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> quantity<span class=\"token punctuation\">;</span>\nprice <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<p><code class=\"language-text\">price</code>의 값을 20으로 바꿨으므로 <code class=\"language-text\">price</code>에 의존하는 <code class=\"language-text\">total</code> 값이 40으로 바뀔 것이라고 기대한다. 하지만 <code class=\"language-text\">total</code>을 찍어보면 여전히 10이 나온다.</p>\n<p>자바스크립트는 반응형이 아닌 절차적(procedural) 언어이기 때문이다.</p>\n<p>사실 <code class=\"language-text\">total</code>을 변수가 아닌 함수로 만든다면, 런타임에 값이 결정되기 때문에 반응형처럼 동작하게 만들 수도 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">total</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> price <span class=\"token operator\">*</span> quantity<span class=\"token punctuation\">;</span>\nprice <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">total</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 40</span></code></pre></div>\n<p>하지만… 너무 노간지인걸…</p>\n<p>위 코드를 옵저버 패턴을 구현하는 의존 클래스로 캡슐화해보자.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dep</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sub</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>써놓고 보니 lv1에서 순수 자바스크립트로 구현했던 코드와 매우 유사하다…!\n<a href=\"https://github.com/zigsong/javascript-youtube-classroom/blob/zig-step3/src/js/models/Store.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lv1 코드는 어땠길래</a></p>\n<p><code class=\"language-text\">subscribers</code>에 익명 함수를 저장하여, 상태들을 모아놓는 storage처럼 활용한다. <code class=\"language-text\">depend</code> 함수는 함수 실행에 앞서 바뀐 값을 저장하는 역할, <code class=\"language-text\">notify</code>는 값이 바뀌었을 때 실행되어야 할 동작이다.</p>\n<p>사용은 아래처럼!</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> price <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> quantity <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  total <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> quantity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\nprice <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\ndep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span></code></pre></div>\n<p>중간의 <code class=\"language-text\">watcher</code> 함수는 무슨 역할을 할까? <code class=\"language-text\">watcher</code>는 업데이트를 감지하는 익명 함수를 캡슐화한 것이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">watcher</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  target <span class=\"token operator\">=</span> myFunc<span class=\"token punctuation\">;</span>\n  dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">watcher</code>는 <code class=\"language-text\">myFunc</code>를 인자로 전달받고, 전역 변수인 <code class=\"language-text\">target</code>에 <code class=\"language-text\">myFunc</code>를 할당한다. 그리고 <code class=\"language-text\">dep.depend()</code>를 호출하여 <code class=\"language-text\">target</code>을 <code class=\"language-text\">subscriber</code>에 추가하고, <code class=\"language-text\">target</code>을 호출한 후 초기화한다.</p>\n<p>그러나 우리는 <code class=\"language-text\">price</code>와 <code class=\"language-text\">quantity</code> 각각의 값을 <code class=\"language-text\">Dep</code> 클래스로 가지고 싶다. 우선 <code class=\"language-text\">price</code>와 <code class=\"language-text\">quantity</code>를 하나의 객체에 담는다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">quantity</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 <code class=\"language-text\">watcher</code>의 실행부는 아래와 같이 바뀐다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  total <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>price <span class=\"token operator\">*</span> data<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">price</code>와 <code class=\"language-text\">quantity</code> 각각의 <code class=\"language-text\">subscriber</code>에 연결된 <code class=\"language-text\">dep.notify()</code>의 호출시점을 지정하기 위해, <code class=\"language-text\">Object.defineProperty</code>로 getter와 setter를 조작해보자. <code class=\"language-text\">price</code>와 <code class=\"language-text\">quantity</code>의 접근자 프로퍼티에 원하는 동작을 hook의 형태로 걸어두는 것이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">quantity</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> internalValue <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> internalValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      internalValue <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">;</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ntotal <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>price \\<span class=\"token operator\">*</span> data<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// get()을 호출</span>\ndata<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// set()을 호출</span>\n</code></pre></div>\n<p>1️⃣ <code class=\"language-text\">data</code> 객체를 돌며 각 속성(<code class=\"language-text\">price</code>, <code class=\"language-text\">quantity</code>)별로 <code class=\"language-text\">Dep</code> 클래스를 연결해줄 것이다.\n2️⃣ <code class=\"language-text\">internalValue</code>에 초기 데이터 값을 저장하고, 각 속성별로 <code class=\"language-text\">Dep</code> 클래스의 인스턴스를 생성한다.\n3️⃣ <code class=\"language-text\">Object.defineProperty</code>를 통해 각 속성의 getter와 setter를 새로 덮어씌운다.\n4️⃣ <code class=\"language-text\">get()</code>에서는 getter가 호출된 시점의 <code class=\"language-text\">target</code>을 기억할 수 있도록 <code class=\"language-text\">dep.depend()</code>를 호출하고, <code class=\"language-text\">internalValue</code>를 반환한다.\n5️⃣ <code class=\"language-text\">set()</code>에서는 <code class=\"language-text\">internalValue</code>의 값을 변경하고, 값이 바뀌었음을 알려주는 <code class=\"language-text\">dep.notify()</code>를 실행한다.</p>\n<p>이제 <code class=\"language-text\">watcher</code> 함수에서 더 이상 <code class=\"language-text\">dep.depend()</code>를 호출할 필요가 없다. <code class=\"language-text\">watcher</code> 함수에 전달한 익명 함수는 <code class=\"language-text\">price</code> 또는 <code class=\"language-text\">quantity</code> 값이 변경될 때마다 재실행될 것이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">watcher</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  target <span class=\"token operator\">=</span> myFunc<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// dep.depend(); // 삭제</span>\n  <span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>중간 과정에서의 코드는 많이 생략되어 있다. 전체 코드는 출처⬇️를 참고하면서 다시 공부해 보자! 참고로, 위 코드는 유명한 <a href=\"https://www.vuemastery.com/courses/advanced-components/evan-you-on-proxies/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Evan You on Proxies</a> 영상을 참조했다고 한다.</p>\n<hr>\n<p><strong>Ref</strong>\n<a href=\"https://blog.rhostem.com/posts/2018-09-12-javascript-reactivity\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.rhostem.com/posts/2018-09-12-javascript-reactivity</a>\n<a href=\"https://www.vuemastery.com/courses/advanced-components/evan-you-on-proxies/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.vuemastery.com/courses/advanced-components/evan-you-on-proxies/</a></p>","timeToRead":3,"frontmatter":{"title":"자바스크립트 반응형","date":"October 31, 2021","description":null,"tags":["javascript"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/javascript/js-reactivity/","previous":{"fields":{"slug":"/frontend/how-npm-works/","langKey":"en","directoryName":"frontend"},"frontmatter":{"date":"October 31, 2021","description":null,"title":"npm은 어떻게 동작할까","tags":["npm"]}},"next":{"fields":{"slug":"/wtc/wtc-week-37/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"October 27, 2021","description":null,"title":"우테코 37주차 기록","tags":["woowacourse"]}},"previousInSameTag":{"fields":{"slug":"/javascript/proxy-and-reflect/","langKey":"en","directoryName":"javascript"},"frontmatter":{"date":"October 31, 2021","description":null,"title":"자바스크립트 Proxy & Reflect","tags":["javascript"]}},"nextInSameTag":null,"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}