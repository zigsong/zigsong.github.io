{"componentChunkName":"component---src-templates-blog-post-js","path":"/wtc/havruta-week-10/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"b365dac9-90cd-54d9-a991-95ae2a296a97","excerpt":"with 피터 Q1. 아래 두 방식은 어떻게 서로 다를까요? 1번 인스턴스를 생성할 때마다  메서드를 중복 생성하고 모든 인스턴스가 중복 소유한다. 메모리의 불필요한 낭비, 퍼포먼스에 악영향을 끼친다.…","html":"<p>with 피터</p>\n<!-- more -->\n<hr>\n<h2 id=\"q1-아래-두-방식은-어떻게-서로-다를까요\" style=\"position:relative;\"><a href=\"#q1-%EC%95%84%EB%9E%98-%EB%91%90-%EB%B0%A9%EC%8B%9D%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%84%9C%EB%A1%9C-%EB%8B%A4%EB%A5%BC%EA%B9%8C%EC%9A%94\" aria-label=\"q1 아래 두 방식은 어떻게 서로 다를까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q1. 아래 두 방식은 어떻게 서로 다를까요?</h2>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 1번</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">radius</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getArea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> circle1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> circle2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>circle1<span class=\"token punctuation\">.</span>getArea <span class=\"token operator\">===</span> circle2<span class=\"token punctuation\">.</span>getArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 2번</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">radius</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Circle</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getArea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> circle1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> circle2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>circle1<span class=\"token punctuation\">.</span>getArea <span class=\"token operator\">===</span> circle2<span class=\"token punctuation\">.</span>getArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<ul>\n<li>1번\n<ul>\n<li>인스턴스를 생성할 때마다 <code class=\"language-text\">getArea</code> 메서드를 중복 생성하고 모든 인스턴스가 중복 소유한다.</li>\n<li>메모리의 불필요한 낭비, 퍼포먼스에 악영향을 끼친다.</li>\n</ul>\n</li>\n<li>2번\n<ul>\n<li><code class=\"language-text\">Circle</code> 생성자 함수가 생성한 모든 인스턴스가 <code class=\"language-text\">getArea</code> 메서드를 공유해서 사용할 수 있도록 프로토타입에 추가한다.</li>\n<li>프로토타입은 <code class=\"language-text\">Circle</code> 생성자 함수의 prototype 프로퍼티에 바인딩된다.</li>\n<li><code class=\"language-text\">getArea</code> 메서드는 단 하나만 생성한다.</li>\n<li><code class=\"language-text\">Circle</code> 생성자 함수가 생성하는 모든 인스턴스는 <code class=\"language-text\">getArea</code> 메서드를 상속받아 사용한다.</li>\n</ul>\n</li>\n</ul>\n<p>👾 생성자 함수가 생성할 모든 인스턴스는 별도의 구현 없이 상위(부모) 객체인 프로토타입의 자산을 공유하여 사용할 수 있다</p>\n<hr>\n<h2 id=\"q2-hasownproperty와-getownpropertydescriptor를-사용해본-적-있나요-언제-어떻게-사용하면-좋을까요\" style=\"position:relative;\"><a href=\"#q2-hasownproperty%EC%99%80-getownpropertydescriptor%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B8-%EC%A0%81-%EC%9E%88%EB%82%98%EC%9A%94-%EC%96%B8%EC%A0%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C%EC%9A%94\" aria-label=\"q2 hasownproperty와 getownpropertydescriptor를 사용해본 적 있나요 언제 어떻게 사용하면 좋을까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q2. <code class=\"language-text\">hasOwnProperty</code>와 <code class=\"language-text\">getOwnPropertyDescriptor</code>를 사용해본 적 있나요? 언제 어떻게 사용하면 좋을까요?</h2>\n<p><strong>hasOwnProperty</strong></p>\n<ul>\n<li><code class=\"language-text\">Object.prototype.hasOwnProperty</code></li>\n<li>객체에 특정 프로퍼티가 존재하는지 확인한다.</li>\n<li>인수로 전달받은 프로퍼티 키가 객체 고유의 프로퍼티 키인 경우에만 true를 리턴하며, 상속받은 프로토타입의 프로퍼티 키인 경우 false를 리턴한다.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Zig\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hasOwnProperty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hasOwnProperty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<ul>\n<li>프로토타입 체인과 <code class=\"language-text\">hasOwnProperty</code></li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> me <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Zig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nme<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<ul>\n<li>\n<p>me 객체에서 <code class=\"language-text\">hasOwnProperty</code> 메서드를 검색한다.</p>\n</li>\n<li>\n<p>me에는 <code class=\"language-text\">hasOwnProperty</code> 메서드가 없으므로 프로토타입 체인을 따라, <code class=\"language-text\">[Prototype]]</code> 내부 슬롯에 바인딩되어 있는 프로토타입(Person.prototype)으로 이동하여 <code class=\"language-text\">hasOwnProperty</code> 메서드를 검색</p>\n</li>\n<li>\n<p><code class=\"language-text\">hasOwnProperty</code>가 있는 Object까지 프로토타입 체인을 타고 올라간다. Object에서 <code class=\"language-text\">hasOwnProperty</code>를 호출한다.</p>\n<ul>\n<li>이때 <code class=\"language-text\">hasOwnProperty</code>는 me를 바인딩한 형태로 호출된다. 즉 <code class=\"language-text\">Object.prototype.hasOwnProperty.call(me, 'name')</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>getOwnPropertyDescriptor</strong></p>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.getOwnPropertyDescriptor(obj, prop)</code></p>\n</li>\n<li>\n<p>주어진 객체 자신의 속성(즉, 객체에 직접 제공하는 속성, 객체의 프로토타입 체인을 따라 존재하는 덕택에 제공하는 게 아닌)에 대한 속성 설명자(descriptor)를 반환한다.</p>\n</li>\n<li>\n<p>value, writable, get, set, configurable, enumerable</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 새로운 속성을 정의</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"prop\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"prop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// > {\"value\":\"Hello\",\"writable\":false,\"enumerable\":false,\"configurable\":false}</span></code></pre></div>\n</li>\n<li>\n<p>enumerable = false이면 <code class=\"language-text\">for..in</code> 연산문에서 빠진다</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Zig\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Seoul\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span> <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// name: Zig</span>\n<span class=\"token comment\">// address: Seoul</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Object.prototype.toString</code> 프로퍼티의 <code class=\"language-text\">[[Enumerable]]</code> 값이 false이기 때문</p>\n</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {writable: true, enumerable: false, configurable: true, value: ƒ}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">writable</code>이 false이면 read-only처럼 동작한다.(할당 연산자를 사용한 값의 재할당을 의미한다). 즉 writable이 false이면 할당연산자를 이용한 할당이 불가능하다.</li>\n<li><code class=\"language-text\">enumerable</code>이 false이면 나열이 불가능하다.(<code class=\"language-text\">for...in</code> 문이나 <code class=\"language-text\">Object.keys()</code>로의 접근이 불가능하다.)</li>\n<li><code class=\"language-text\">configurable</code>이 false이면 해당 속성을 설정하는 것이 더이상 불가능해진다. (<code class=\"language-text\">defineProperty</code>를 사용한 값의 재할당이 불가하다.)</li>\n</ul>\n<hr>\n<h2 id=\"q3-__proto__와-objectgetprototypeof-메서드는-어떻게-다를까요\" style=\"position:relative;\"><a href=\"#q3-__proto__%EC%99%80-objectgetprototypeof-%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%BC%EA%B9%8C%EC%9A%94\" aria-label=\"q3 __proto__와 objectgetprototypeof 메서드는 어떻게 다를까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q3. <code class=\"language-text\">__proto__</code>와 <code class=\"language-text\">Object.getPrototypeOf</code> 메서드는 어떻게 다를까요?</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">__proto__</code> 접근자 프로퍼티 대신 프로토타입의 참조를 취득하고 싶은 경우 <code class=\"language-text\">getPrototypeOf</code>을 사용한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">__proto__</code> 프로퍼티에 접근하면 내부적으로 <code class=\"language-text\">Object.getPrototypeOf</code>가 호출되어 프로토타입 객체를 반환한다.</p>\n<ul>\n<li>할당값이 객체인 경우에는 객체의 프로토타입이 바뀔 수 있어서 치명적인 버그가 발생할 수 있다. 버그 뿐 아니라, 프로토타입 객체를 직접 변경하는 연산은 프로퍼티 접근 관련 최적화를 망치기 때문에 퍼포먼스 이슈가 발생한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">getPrototypeOf</code>은 <strong>readOnly</strong> → <code class=\"language-text\">setPrototypeOf</code>을 사용해서 프로토타입을 새로 할당한다.</p>\n</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n\nobj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token string\">\"peter\"</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span> <span class=\"token comment\">// peter -> __proto__가 obj의 key값처럼 사용됨</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null이 유지됨</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://ko.javascript.info/prototype-methods\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.javascript.info/prototype-methods</a></p>\n<hr>\n<h2 id=\"q4-객체-리터럴에-의해-생성된-객체의-프로토타입은-어떻게-만들어지나요\" style=\"position:relative;\"><a href=\"#q4-%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%97%90-%EC%9D%98%ED%95%B4-%EC%83%9D%EC%84%B1%EB%90%9C-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%80%EB%82%98%EC%9A%94\" aria-label=\"q4 객체 리터럴에 의해 생성된 객체의 프로토타입은 어떻게 만들어지나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q4. 객체 리터럴에 의해 생성된 객체의 프로토타입은 어떻게 만들어지나요?</h2>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<ul>\n<li>\n<p>객체 리터럴에 의해 생성된 객체는 내부적으로 <code class=\"language-text\">Object</code> 생성자 함수를 사용해서 생성된 객체이다. 🔫</p>\n</li>\n<li>\n<p>리터럴로 선언한 객체는 추상 연산 <code class=\"language-text\">OrdinaryObjectCreate</code>에 의해 생성된다.</p>\n<ul>\n<li>추상 연산 <code class=\"language-text\">OrdinaryObjectCreate</code>을 호출하여 빈 객체를 생성하고 프로토타입을 추가한다.</li>\n<li>이때 필수적으로 자신이 생성할 객체의 프로토타입을 인수로 전달받는다.</li>\n<li>인수로 전달받은 프로토타입을 자신이 생성한 객체의 <code class=\"language-text\">[[Prototype]]</code> 내부 슬롯에 할당한 다음, 생성한 객체를 반환한다.</li>\n</ul>\n</li>\n</ul>\n<p>→ 👾 프로토타입은 추상 연산 <code class=\"language-text\">OrdinaryObjectCreate</code>에 전달되는 인수에 의해 결정된다!</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Number {123}</span>\n\nobj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// String {'abc'}</span></code></pre></div>\n<ul>\n<li>객체 리터럴에 의해 생성된 obj 객체는 <code class=\"language-text\">Object.prototype</code>을 프로토타입으로 갖게 되며, 이로써 <code class=\"language-text\">Object.prototype</code>을 상속받는다.</li>\n</ul>\n<p><strong>Ref(Q1~Q4)</strong> <a href=\"http://www.yes24.com/Product/Goods/92742567\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">모던 자바스크립트 Deep Dive</a></p>\n<hr>\n<h2 id=\"q5-프로토타입-패턴에-대해-설명해주세요\" style=\"position:relative;\"><a href=\"#q5-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%ED%8C%A8%ED%84%B4%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"q5 프로토타입 패턴에 대해 설명해주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q5. 프로토타입 패턴에 대해 설명해주세요.</h2>\n<ul>\n<li>자바스크립트를 이루고 있는 거의 ‘모든 것’은 객체이다.</li>\n<li>객체: 속성을 통해 여러 개의 값을 하나의 단위로 구성한 복합적인 자료구조</li>\n<li>프로토타입 객체는 객체 간 상속을 구현하기 위해 사용된다.\n<ul>\n<li>원본 객체가 존재하며, 그 객체를 복제해서 새로운 객체를 생성한다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"q6-그렇다면-자바스크립트가-prototype을-사용하는-이유는-무엇인가요\" style=\"position:relative;\"><a href=\"#q6-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EA%B0%80-prototype%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"q6 그렇다면 자바스크립트가 prototype을 사용하는 이유는 무엇인가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q6. 그렇다면, 자바스크립트가 Prototype을 사용하는 이유는 무엇인가요?</h2>\n<ul>\n<li>\n<p>프로토타입을 기반으로 상속을 구현하여 불필요한 중복을 제거할 수 있다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">new</code> 키워드를 사용하여 객체지향 패턴을 흉내낼 수는 있지만, 실제로 자바스크립트의 상속이나 오브젝트간의 연결은 프로토타입으로 구현한다.</p>\n</li>\n<li>\n<p>JavaScript에서는 <strong>함수</strong>를 이용하여 객체를 만든다.</p>\n<ul>\n<li>함수가 생성될 때 자동으로 그 함수의 프로토타입 객체도 함께 생성되며, 해당 함수의 prototype 프로퍼티와 연결된다</li>\n<li>함수의 프로토타입 객체를 복제하는 것이다.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> zig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>zig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Person { __proto__: Object }</span></code></pre></div>\n</li>\n</ul>\n<p><strong>👾 옛날 이야기!</strong>\nPrototype을 이용하면 객체의 생성 비용을 효과적으로 줄일 수 있기 때문이다.</p>\n<p>자바스크립트가 처음 도입되던 옛 환경에서는 메모리가 부족했다. 그래서 객체의 생성비용을 효과적으로 줄일 수 있는 프로토타입 디자인 패턴이 도입되었다.</p>\n<p>또한, 당시에는 웹 브라우저가 등장한 지 얼마 안됐던 시기였고, HTML과 CSS를 이용해서 웹 사이트를 만드는 것이 굉장히 쉬웠기 때문에 기존에 다른 개발을 경험해보지 않고 웹 개발부터 시작한 사람들이 많았다. 이런 사람들은 메모리 관리나 프로그래밍에 대한 이해가 부족했기 때문에, 그런 사람들이 아무렇게나 짜도 최대한 효율적으로 코딩이 가능하도록 언어를 만드는 게 중요했다. 그래서 크게 신경을 쓰지 않고도 프로토타입을 통해 메모리가 더 효율적으로 관리되는 Prototype을 사용하게 된 것이다.</p>\n<p>하지만 지금에 와서는 메모리도 충분하고 객체의 생성 비용을 옛날만큼 신경쓸 필요가 없어졌다!</p>\n<p>👾 ES6의 <code class=\"language-text\">class</code> - prototype을 이용한 syntactic sugar!</p>\n<hr>\n<h2 id=\"q7-prototype-객체에-접근할-수-있는-방법에는-어떤-것들이-있을까요\" style=\"position:relative;\"><a href=\"#q7-prototype-%EA%B0%9D%EC%B2%B4%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%A4-%EA%B2%83%EB%93%A4%EC%9D%B4-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94\" aria-label=\"q7 prototype 객체에 접근할 수 있는 방법에는 어떤 것들이 있을까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q7. <code class=\"language-text\">[[Prototype]]</code> 객체에 접근할 수 있는 방법에는 어떤 것들이 있을까요?</h2>\n<p><code class=\"language-text\">[[Prototype]]</code> 내부 슬롯에는 직접 접근이 불가하다.</p>\n<ol>\n<li><code class=\"language-text\">__proto__</code> 접근자 프로퍼티를 통해 자신의 프로토타입, 즉 자신의 <code class=\"language-text\">[[Prototype]]</code> 내부 슬롯이 가리키는 프로토타입에 간접적으로 접근할 수 있다.</li>\n</ol>\n<ul>\n<li><code class=\"language-text\">__proto__</code>는 getter/setter라고 부르는 접근자 함수를 통해 <code class=\"language-text\">[[Prototype]]</code> 내부 슬롯의 값, 즉 프로토타입을 취득하거나 할당한다.</li>\n<li><code class=\"language-text\">__proto__</code>는 객체가 직접 소유하는 프로퍼티가 아닌 <code class=\"language-text\">Object.prototype</code>의 프로퍼티이다.</li>\n<li>모든 객체는 상속을 통해 <code class=\"language-text\">Object.prototype.__proto__</code> 접근자 프로퍼티를 사용할 수 있다.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Zig\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__proto__\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__proto__\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__proto__\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {enumerable: false, configurable: true, get: ƒ, set: ƒ}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<ol start=\"2\">\n<li><code class=\"language-text\">Object.getPrototypeOf</code></li>\n</ol>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj.__proto__;</span></code></pre></div>\n<ol start=\"3\">\n<li><code class=\"language-text\">obj.prototype</code> 프로퍼티를 이용한 접근 (생성자 함수)</li>\n</ol>\n<hr>\n<h2 id=\"q8-위와-같이-prototype-객체에-접근할-수-있는-방법이-다양한-이유는-무엇인가요\" style=\"position:relative;\"><a href=\"#q8-%EC%9C%84%EC%99%80-%EA%B0%99%EC%9D%B4-prototype-%EA%B0%9D%EC%B2%B4%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%B4-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9D%B4%EC%9C%A0%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"q8 위와 같이 prototype 객체에 접근할 수 있는 방법이 다양한 이유는 무엇인가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q8. 위와 같이, <code class=\"language-text\">[[Prototype]]</code> 객체에 접근할 수 있는 방법이 다양한 이유는 무엇인가요?</h2>\n<p>모든 객체가 <code class=\"language-text\">__proto__</code> 접근자 프로퍼티를 사용할 수 있는 것은 아니기 때문이다.\n(ex. 직접 상속을 통해 <code class=\"language-text\">Object.prototype</code>을 상속받지 않는 객체를 생성할 경우)</p>\n<p>(<code class=\"language-text\">Object.create</code> 메서드는 프로토타입 체인의 종점에 위치하는 객체를 생성)</p>\n<p>→ 프로토타입 체인의 종점에 위치하는 객체는 <code class=\"language-text\">Object.prototype</code>의 빌트인 메서드 사용 불가</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Object.create(null)로 객체를 만들면 __proto__ getter와 setter를 상속받지 않는다.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n<span class=\"token comment\">// Object.prototype의 빌트인 메서드는 아래와 같이 간접적으로 호출하는 것이 좋다</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>👾 짚고 넘어가기! - 정적 메서드</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Object.create는 정적 메서드</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Zig\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Object.prototype.hasOwnProperty는 프로토타입 메서드</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>👾 비하인드 스토리</p>\n<ul>\n<li>생성자 함수의 <code class=\"language-text\">\"prototype\"</code> 프로퍼티는 아주 오래전부터 그 기능을 수행하고 있었다.</li>\n<li>그런데 2012년, 표준에 <code class=\"language-text\">Object.create</code>가 추가되었다. <code class=\"language-text\">Object.create</code>를 사용하면 주어진 프로토타입을 사용해 객체를 만들 수 있긴 하지만, 프로토타입을 얻거나 설정하는것은 불가능했다. 그래서 브라우저는 비표준 접근자인 <code class=\"language-text\">__proto__</code>를 구현해 언제나 프로토타입을 얻거나 설정할 수 있도록 했다.</li>\n<li>이후 2015년에 <code class=\"language-text\">Object.setPrototypeOf</code>와 <code class=\"language-text\">Object.getPrototypeOf</code>가 표준에 추가되면서 <code class=\"language-text\">__proto__</code>와 동일한 기능을 수행할 수 있게 되었다. 그런데 이 시점엔 <code class=\"language-text\">__proto__</code>가 모든 곳에 구현되어 있어서 사실상 표준(de-facto standard)이 되어버렸다. 표준의 부록 B(Annex B)에 추가되기도 했다. 이 부록에 추가되면 브라우저가 아닌 환경에선 선택사항이라는것을 의미한다.</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://ko.javascript.info/prototype-methods#ref-271\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.javascript.info/prototype-methods#ref-271</a></p>","timeToRead":10,"frontmatter":{"title":"하프 스터디 10주차 - 프로토타입","date":"June 06, 2021","description":null,"tags":["havruta"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/wtc/havruta-week-10/","previous":{"fields":{"slug":"/wtc/wtc-week-21/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"June 26, 2021","description":null,"title":"우테코 21주차 기록","tags":["woowacourse"]}},"next":{"fields":{"slug":"/wtc/wtc-week-17-18/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"June 05, 2021","description":null,"title":"우테코 17-18주차 기록","tags":["woowacourse"]}},"previousInSameTag":null,"nextInSameTag":{"fields":{"slug":"/wtc/havruta-week-9/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"May 30, 2021","description":null,"title":"하프 스터디 9주차 - 브라우저 렌더링","tags":["havruta"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}