{"componentChunkName":"component---src-templates-blog-post-js","path":"/wtc/havruta-week-8/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"a2cd4106-3da8-50d1-a26f-a4f26e1b6b93","excerpt":"with 썬 Q1. 클라이언트에서 마주하는 에러 종류에 따라 예외 처리를 어떻게 해주면 좋을까요? 같이 이야기해보아요 1. 예상 X 해결 방법 O 네트워크 에러 일시적인 에러 표시, 다시 시도할 가이드 제공 👾 snackbar나 toast같은 noti…","html":"<p>with 썬</p>\n<!-- more -->\n<hr>\n<h2 id=\"q1-클라이언트에서-마주하는-에러-종류에-따라-예외-처리를-어떻게-해주면-좋을까요-같이-이야기해보아요\" style=\"position:relative;\"><a href=\"#q1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-%EB%A7%88%EC%A3%BC%ED%95%98%EB%8A%94-%EC%97%90%EB%9F%AC-%EC%A2%85%EB%A5%98%EC%97%90-%EB%94%B0%EB%9D%BC-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EC%A3%BC%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C%EC%9A%94-%EA%B0%99%EC%9D%B4-%EC%9D%B4%EC%95%BC%EA%B8%B0%ED%95%B4%EB%B3%B4%EC%95%84%EC%9A%94\" aria-label=\"q1 클라이언트에서 마주하는 에러 종류에 따라 예외 처리를 어떻게 해주면 좋을까요 같이 이야기해보아요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q1. 클라이언트에서 마주하는 에러 종류에 따라 예외 처리를 어떻게 해주면 좋을까요? 같이 이야기해보아요</h2>\n<p><strong>1. 예상 X 해결 방법 O</strong></p>\n<ul>\n<li>네트워크 에러</li>\n<li>일시적인 에러 표시, 다시 시도할 가이드 제공</li>\n<li>👾 snackbar나 toast같은 noti를 사용하는 건 어떨까?</li>\n<li>🌞 snackbar는 정상작동의 경우에만 사용\n<ul>\n<li>네트워크 에러 (ex. 상품 목록을 불러오는 데 실패할 경우)</li>\n<li>보여줄 상품 목록이 없으므로 페이지 전체에 에러 표시하는 게 좋지 않을까?</li>\n<li>snackbar는 사라져 버리니까 사용자가 이유를 모를 수도 있음</li>\n<li>사용자에게 동작을 요청할 만한 에러</li>\n</ul>\n</li>\n</ul>\n<p><strong>2.예상 X 해결 방법 X</strong></p>\n<ul>\n<li>개발자 제어권 밖</li>\n<li>고객 센터 문의 경로 제공</li>\n<li>Sentry 등</li>\n</ul>\n<p><strong>3. 예상 O 해결 방법 X</strong></p>\n<ul>\n<li>보안 에러</li>\n<li>사용자가 고의적으로 비정상적인 접근</li>\n<li>CORS, XSS → 보안팀과 협력?\n<ul>\n<li>🌞 input 창에 ‘?’ 등 query에 사용되는 특문 사용 금지</li>\n<li>innerHTML을 지양해야 하는 이유</li>\n<li>cf) React <code class=\"language-text\">dangerouslySetInnerHTML</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>4. 예상 O 해결 방법 O</strong></p>\n<ul>\n<li>400대 에러</li>\n<li>비즈니스 로직</li>\n<li>적절한 가이드, 별도 페이지</li>\n<li>👾 권한이 없는 사용자일 때 에러 처리 어떻게?\n<ul>\n<li>🌞 토큰이 유효하지 않으면 login page로 redirect하는 건 사용자 입장에서 영문도 모른 채 쫓겨나는 기분 (ex. 우테코 LMS)</li>\n<li>session 만료되기 전에 (ex. 은행 페이지) 알려주는 방법</li>\n<li>👾 수강신청 페이지!</li>\n</ul>\n</li>\n<li>👾 form input validation 어떻게?\n<ul>\n<li>🌞 이름 제한 또는 메시지 띄우는 방식\n<ul>\n<li>사용자 행동을 너무 강하게 제한하면, 사용자 경험이 안 좋아질 수도 있는 문제</li>\n<li>이유를 알려주는 정도!</li>\n</ul>\n</li>\n<li>ex) payments에서 이름 입력 시, 한글 이름이 안 쳐지는 경우!</li>\n</ul>\n</li>\n<li>에러 전파를 막기 위한 장치 → 👾 Error Boundary에 대한 생각?\n<ul>\n<li><a href=\"https://jbee.io/react/error-declarative-handling-1/#asyncboundary\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jbee’s AsyncBoundary</a></li>\n<li>🌞 여러 에러가 공존하는 경우 에러 난 부분에서만 처리하는 건 좋은 것 같음</li>\n<li>fb 댓글창 버그의 경우 하던 동작이 날라가버리지 않기 위해 → 방지용으로 바운더리 설정</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://jbee.io/react/error-declarative-handling-2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jbee.io/react/error-declarative-handling-2/</a></p>\n<hr>\n<h2 id=\"q2-promise의-thencatch-체이닝에서-잡는-에러와-async-await-구문의-trycatch에서-잡는-에러는-어떤-차이가-있을까요\" style=\"position:relative;\"><a href=\"#q2-promise%EC%9D%98-thencatch-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%97%90%EC%84%9C-%EC%9E%A1%EB%8A%94-%EC%97%90%EB%9F%AC%EC%99%80-async-await-%EA%B5%AC%EB%AC%B8%EC%9D%98-trycatch%EC%97%90%EC%84%9C-%EC%9E%A1%EB%8A%94-%EC%97%90%EB%9F%AC%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94\" aria-label=\"q2 promise의 thencatch 체이닝에서 잡는 에러와 async await 구문의 trycatch에서 잡는 에러는 어떤 차이가 있을까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q2. Promise의 <code class=\"language-text\">then~catch</code> 체이닝에서 잡는 에러와, async-await 구문의 <code class=\"language-text\">try~catch</code>에서 잡는 에러는 어떤 차이가 있을까요?</h2>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeRequest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// this parse may fail</span>\n        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeRequest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this parse may fail</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>→ Promise의 then chaining 안에서 발생한 JSON.parse에러는 <code class=\"language-text\">try~catch</code> 문에서 잡히지 않는다.</p>\n<ul>\n<li>🌞 400 error의 경우 catch에서 잡히지 않는다\n→ <code class=\"language-text\">response.ok</code>로 한번 더 잡아줌</li>\n</ul>\n<p>+ 👾 async-await에서 try-catch를 쓰는 게 무의미하다? (<a href=\"https://velog.io/@vraimentres/async-%ED%95%A8%EC%88%98%EC%99%80-try-catch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">참고</a>)</p>\n<p>→ 최초로 fetch를 해오고, 다음 함수에서 JSON.parse하고, 다음 함수에서 사용해줄 때</p>\n<ul>\n<li>중간에서 한 번 더 <code class=\"language-text\">try~catch</code>로 묶어줄 필요가 없다. 어차피 상위에서 내려오기 때문에 Error catch가 가능하다.</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://medium.com/@constell99/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-async-await-%EA%B0%80-promises%EB%A5%BC-%EC%82%AC%EB%9D%BC%EC%A7%80%EA%B2%8C-%EB%A7%8C%EB%93%A4-%EC%88%98-%EC%9E%88%EB%8A%94-6%EA%B0%80%EC%A7%80-%EC%9D%B4%EC%9C%A0-c5fe0add656c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@constell99/자바스크립트의-async-await-가-promises를-사라지게-만들-수-있는-6가지-이유-c5fe0add656c</a></p>\n<hr>\n<h2 id=\"q3-장바구니-미션에서-redux를-사용하며-에러처리를-어떻게-했는지-함께-이야기해-봐요\" style=\"position:relative;\"><a href=\"#q3-%EC%9E%A5%EB%B0%94%EA%B5%AC%EB%8B%88-%EB%AF%B8%EC%85%98%EC%97%90%EC%84%9C-redux%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B0-%EC%97%90%EB%9F%AC%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%96%88%EB%8A%94%EC%A7%80-%ED%95%A8%EA%BB%98-%EC%9D%B4%EC%95%BC%EA%B8%B0%ED%95%B4-%EB%B4%90%EC%9A%94\" aria-label=\"q3 장바구니 미션에서 redux를 사용하며 에러처리를 어떻게 했는지 함께 이야기해 봐요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q3. 장바구니 미션에서 redux를 사용하며 에러처리를 어떻게 했는지 함께 이야기해 봐요!</h2>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// action creator</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCartItemsRequest</span> <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token operator\">:</span> Dispatch<span class=\"token operator\">&lt;</span>GetCartItemsAction<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">GET_CART_ITEMS_REQUEST</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customers/zigsong/carts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> cartItems <span class=\"token operator\">=</span> <span class=\"token function\">snakeToCamel</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">GET_CART_ITEMS_SUCCESS</span><span class=\"token punctuation\">,</span> cartItems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">GET_CART_ITEMS_FAILURE</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 사용처</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addCartItemRequest</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">enqueueSnackbar</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MESSAGE</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ADDED_CART_ITEM_SUCCESS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">enqueueSnackbar</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2 id=\"q4-errorboundary를-사용해보거나-고려해본-적이-있나요\" style=\"position:relative;\"><a href=\"#q4-errorboundary%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B1%B0%EB%82%98-%EA%B3%A0%EB%A0%A4%ED%95%B4%EB%B3%B8-%EC%A0%81%EC%9D%B4-%EC%9E%88%EB%82%98%EC%9A%94\" aria-label=\"q4 errorboundary를 사용해보거나 고려해본 적이 있나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q4. ErrorBoundary를 사용해보거나, 고려해본 적이 있나요?</h2>\n<p><strong>Ref</strong> <a href=\"https://ko.reactjs.org/docs/error-boundaries.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.reactjs.org/docs/error-boundaries.html</a></p>\n<hr>\n<h2 id=\"q5-finally를-사용해본-경험이-있나요-어떤-상황에서-사용하면-좋을까요\" style=\"position:relative;\"><a href=\"#q5-finally%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B8-%EA%B2%BD%ED%97%98%EC%9D%B4-%EC%9E%88%EB%82%98%EC%9A%94-%EC%96%B4%EB%96%A4-%EC%83%81%ED%99%A9%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C%EC%9A%94\" aria-label=\"q5 finally를 사용해본 경험이 있나요 어떤 상황에서 사용하면 좋을까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q5. finally를 사용해본 경험이 있나요? 어떤 상황에서 사용하면 좋을까요?</h2>\n<ul>\n<li>프로그램을 종료시키는 상황\n<ul>\n<li>Java에서는 파일을 열고 닫는 상황에서 사용 (IO)</li>\n<li>파일을 열고 try 구문에서 제대로 읽었던, 파일을 썼던 상관 없이 finally에서는 닫아줘야 함</li>\n</ul>\n</li>\n<li>요청을 성공하든, 실패하든 loading 상태를 바꿔주기 위해 사용\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"q6-아래와-같은-리뷰를-받는다면-어떤-식으로-반영하실-건가요\" style=\"position:relative;\"><a href=\"#q6-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%9D%80-%EB%A6%AC%EB%B7%B0%EB%A5%BC-%EB%B0%9B%EB%8A%94%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%A4-%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EB%B0%98%EC%98%81%ED%95%98%EC%8B%A4-%EA%B1%B4%EA%B0%80%EC%9A%94\" aria-label=\"q6 아래와 같은 리뷰를 받는다면 어떤 식으로 반영하실 건가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q6. 아래와 같은 리뷰를 받는다면 어떤 식으로 반영하실 건가요?</h2>\n<blockquote>\n<p>403, 500 과 같은 공통적으로 처리 할 수 있는 에러들은 미들웨어 같은 역할의 레이어에서 처리하도록 하여 매 함수마다 중복되는 코드를 제거 할 수 있습니다. axios 같은 라이브러리는 그런 기능을 지원하지만 fetch API 에는 그런 기능이 없기 때문에 별도로 만들어서 쓰거나 다른 라이브러리를 쓰거나 해야 합니다.</p>\n</blockquote>\n<ul>\n<li>\n<p>React Query <a href=\"https://react-query.tanstack.com/quick-start\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">예시코드</a></p>\n<ul>\n<li>비동기 요청의 데이터 무결함에 대한 책임을 개발자가 아니라 React 앱 자체가 책임지게 하는 라이브러리</li>\n</ul>\n</li>\n<li>\n<p>axios interceptor <a href=\"https://xn--xy1bk56a.run/axios/guide/interceptors.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"400\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 에러 핸들링</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">\"https://shopping-cart.techcourse.co.kr/api/\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 컴포넌트</span>\napi<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/axios/axios#interceptors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">깃헙 링크</a></p>\n<ul>\n<li>🌞 500 에러의 경우 유용하게 사용할 수 있을 것 같다!\n<ul>\n<li>공통적으로 처리될 수 있는 에러</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"q7-지금까지-미션을-진행하며-가장-마음에-들었던-에러처리-사례를-하나-소개해주세요\" style=\"position:relative;\"><a href=\"#q7-%EC%A7%80%EA%B8%88%EA%B9%8C%EC%A7%80-%EB%AF%B8%EC%85%98%EC%9D%84-%EC%A7%84%ED%96%89%ED%95%98%EB%A9%B0-%EA%B0%80%EC%9E%A5-%EB%A7%88%EC%9D%8C%EC%97%90-%EB%93%A4%EC%97%88%EB%8D%98-%EC%97%90%EB%9F%AC%EC%B2%98%EB%A6%AC-%EC%82%AC%EB%A1%80%EB%A5%BC-%ED%95%98%EB%82%98-%EC%86%8C%EA%B0%9C%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"q7 지금까지 미션을 진행하며 가장 마음에 들었던 에러처리 사례를 하나 소개해주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q7. 지금까지 미션을 진행하며 가장 마음에 들었던 에러처리 사례를 하나 소개해주세요!</h2>\n<ul>\n<li>\n<p>클라이언트단 에러</p>\n<ul>\n<li>\n<p>javascript-subway 미션의 <code class=\"language-text\">setCustomValidity</code></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">setInputValidity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> validityState <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stationNameInput<span class=\"token punctuation\">.</span>validity<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validityState<span class=\"token punctuation\">.</span>valueMissing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stationNameInput<span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">'역 이름을 입력해 주세요.🙀'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validityState<span class=\"token punctuation\">.</span>tooShort<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stationNameInput<span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2글자 이상 입력해 주세요.👾'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validityState<span class=\"token punctuation\">.</span>patternMismatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stationNameInput<span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">'공백, 특수문자를 제외한 한글을 입력해 주세요.🤓'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stationNameInput<span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>비동기 에러 처리</p>\n<ul>\n<li>shoppingcart 미션에서의 리덕스 에러 핸들링 (dispatch~then chaining)</li>\n<li>🌞 굳이 try~catch로 에러를 중간에서 한번 더 던져줄 필요도 없는 것 같다 (2번 질문의 링크 참조)</li>\n<li>👾<code class=\"language-text\">reponse.ok</code> 도 잘 사용하기!</li>\n</ul>\n</li>\n</ul>","timeToRead":8,"frontmatter":{"title":"하프 스터디 8주차 - 에러 핸들링","date":"May 23, 2021","description":null,"tags":["havruta"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/wtc/havruta-week-8/","previous":{"fields":{"slug":"/wtc/havruta-week-9/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"May 30, 2021","description":null,"title":"하프 스터디 9주차 - 브라우저 렌더링","tags":["havruta"]}},"next":{"fields":{"slug":"/wtc/wtc-week-16/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"May 22, 2021","description":null,"title":"우테코 16주차 기록","tags":["woowacourse"]}},"previousInSameTag":{"fields":{"slug":"/wtc/havruta-week-9/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"May 30, 2021","description":null,"title":"하프 스터디 9주차 - 브라우저 렌더링","tags":["havruta"]}},"nextInSameTag":{"fields":{"slug":"/wtc/havruta-week-6/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"May 02, 2021","description":null,"title":"하프 스터디 6주차 - this","tags":["havruta"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}