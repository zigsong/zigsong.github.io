{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2023-1-week-1/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"11f90897-4d34-5e4f-b5ec-61a652ff42e3","excerpt":"1월 2주차 아니고? 배워가기 yaml에서  와  특수문자  는 ‘anchor’라고 부르며, 프로퍼티들을 복제(duplicate)하거나 상속(inherit)받을 수 있다.  로 가져다 쓴다. Ref https://docs.gitlab.com/ee/ci/yaml/yaml…","html":"<p>1월 2주차 아니고?</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"yaml에서--와--특수문자\" style=\"position:relative;\"><a href=\"#yaml%EC%97%90%EC%84%9C--%EC%99%80--%ED%8A%B9%EC%88%98%EB%AC%B8%EC%9E%90\" aria-label=\"yaml에서  와  특수문자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yaml에서 <code class=\"language-text\">&amp;</code> 와 <code class=\"language-text\">*</code> 특수문자</h3>\n<p><code class=\"language-text\">&amp;</code> 는 ‘anchor’라고 부르며, 프로퍼티들을 복제(duplicate)하거나 상속(inherit)받을 수 있다. <code class=\"language-text\">*</code> 로 가져다 쓴다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">.job_template</span><span class=\"token punctuation\">:</span>\n  <span class=\"token important\">&amp;job_configuration</span> <span class=\"token comment\"># Hidden yaml configuration that defines an anchor named 'job_configuration'</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> ruby<span class=\"token punctuation\">:</span><span class=\"token number\">2.6</span>\n  <span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> postgres\n    <span class=\"token punctuation\">-</span> redis\n\n<span class=\"token key atrule\">test1</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*job_configuration</span> <span class=\"token comment\"># Merge the contents of the 'job_configuration' alias</span>\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> test1 project\n\n<span class=\"token key atrule\">test2</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*job_configuration</span> <span class=\"token comment\"># Merge the contents of the 'job_configuration' alias</span>\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> test2 project</code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://docs.gitlab.com/ee/ci/yaml/yaml_optimization.html#anchors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.gitlab.com/ee/ci/yaml/yaml_optimization.html#anchors</a></p>\n<h3 id=\"정규표현식-수량연산자-n\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%88%98%EB%9F%89%EC%97%B0%EC%82%B0%EC%9E%90-n\" aria-label=\"정규표현식 수량연산자 n permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규표현식 수량연산자 <code class=\"language-text\">{n}</code></h3>\n<ul>\n<li>수량연산자 <code class=\"language-text\">{n}</code>\n<ul>\n<li>앞에 온 토큰과 n개 일치</li>\n</ul>\n</li>\n<li>컴마와 조합 <code class=\"language-text\">{n,}</code>\n<ul>\n<li>앞에 온 토큰과 n개 <strong>이상</strong> 일치</li>\n<li>💡 semver로 브랜치명 검색 시 유용하다</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"git-cherry-pick-중단하기\" style=\"position:relative;\"><a href=\"#git-cherry-pick-%EC%A4%91%EB%8B%A8%ED%95%98%EA%B8%B0\" aria-label=\"git cherry pick 중단하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git cherry-pick 중단하기</h3>\n<ul>\n<li><code class=\"language-text\">git cherry-pick --quit</code>: 그냥 cherry-pick 상태를 나감</li>\n<li><code class=\"language-text\">git cherry-pick --abort</code>: cherry-pick한 것들을 버려버리면서 상태에서 나감</li>\n</ul>\n<h3 id=\"jql-맛보기\" style=\"position:relative;\"><a href=\"#jql-%EB%A7%9B%EB%B3%B4%EA%B8%B0\" aria-label=\"jql 맛보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JQL 맛보기</h3>\n<p>JQA은 지라에서 쓰는 query language 의 이름이다.</p>\n<ul>\n<li><strong>!~ 연산자</strong>\n<ul>\n<li>‘포함하지 않은 것’</li>\n<li>예) 지라티켓 제목에 ‘다이얼로그’가 없는 것만 찾고 싶은 경우 <code class=\"language-text\">summary!~다이얼로그</code></li>\n</ul>\n</li>\n<li><strong>in 연산자</strong>\n<ul>\n<li>(= 과 다르게) 뒤에 오는 여러가지 중 일치하는 것이 하나라도 있으면 참</li>\n<li>예) 3개의 프로젝트에서 검색하고 싶은 경우 <code class=\"language-text\">project in (BSFE, SELF, CUDESIGN)</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nestjs-configmodule\" style=\"position:relative;\"><a href=\"#nestjs-configmodule\" aria-label=\"nestjs configmodule permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nest.js ConfigModule</h3>\n<p>Nest의 configModule은 정적이다. 그렇기 때문에 controller나 service처럼, Module들로 인해 모든 application이 만들어진 다음에야 configModule을 사용할 수 있고, module의 생성 시점에는 configModule을 사용할 수 없다.</p>\n<p>이를 해결하기 위해서는 모듈을 동적으로 만들어야 한다. <a href=\"https://docs.nestjs.com/fundamentals/dynamic-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nest.js Dynamic Modules</a></p>\n<h3 id=\"bolt에서-메세지-보내기\" style=\"position:relative;\"><a href=\"#bolt%EC%97%90%EC%84%9C-%EB%A9%94%EC%84%B8%EC%A7%80-%EB%B3%B4%EB%82%B4%EA%B8%B0\" aria-label=\"bolt에서 메세지 보내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bolt에서 메세지 보내기</h3>\n<blockquote>\n<p>💡 <strong>bolt</strong></p>\n<ul>\n<li><a href=\"https://github.com/slackapi/bolt-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/slackapi/bolt-js</a></li>\n<li>슬랙과 서버 소켓을 연결해준다</li>\n</ul>\n</blockquote>\n<p>bolt에서 메시지를 보내는 방법은 3가지가 있다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">say</code></p>\n<ul>\n<li>say는 view only가 불가능하다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">app.client.chat.postEphemeral</code></p>\n<ul>\n<li>글로벌 쇼컷의 경우 채널을 특정 하기 어렵다.</li>\n<li>멘션에서 사용</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">respond</code></p>\n<ul>\n<li>메세지 쇼컷에서 사용</li>\n</ul>\n</li>\n</ul>\n<p>cf) 글로벌 쇼컷은 사용자만 보이는 메시지를 보낼 수 없다. 커맨드를 사용하면 가능하다. 커맨드는 ack를 통해 수신했음을 알린다. 하지 않는다면 <code class=\"language-text\">failed with the error \"dispatch_failed\"</code> 메세지를 만난다</p>\n<h3 id=\"netsjs-trailing-slash-이슈\" style=\"position:relative;\"><a href=\"#netsjs-trailing-slash-%EC%9D%B4%EC%8A%88\" aria-label=\"netsjs trailing slash 이슈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nets.js trailing slash 이슈</h3>\n<p>Next.js에서 SSG로 exports한 페이지들을 정적으로 배포할 때, 배포된 페이지에서 새로고침 시 Access Denied가 되면서 접근이 안 될 수가 있다.</p>\n<p>이는 trailing slash로 인해 생기는 이슈인데, <code class=\"language-text\">/index.html</code>을 명시적으로 표현한 경우 해당 이슈가 생기지 않는다.</p>\n<blockquote>\n<p>💡 <strong>trailing slash</strong></p>\n<ul>\n<li>URL <code class=\"language-text\">/about</code> 으로 redirect하면 <code class=\"language-text\">/about/</code> 뒤에 <code class=\"language-text\">/</code>가 붙는다. (trailing comma와 같은 방식)</li>\n<li><a href=\"https://nextjs.org/docs/api-reference/next.config.js/trailing-slash\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nextjs.org/docs/api-reference/next.config.js/trailing-slash</a></li>\n</ul>\n</blockquote>\n<p>이때 아래 두 가지 방법을 적용해서 이 문제를 해결할 수 있다.</p>\n<ol>\n<li>\n<p>CloudFront Function 추가 및 적용</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// CloudFront Function 예시 (이대로 가져다 써도 상관없다)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> uri <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>uri<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> paths <span class=\"token operator\">=</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> lastPath <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">[</span>paths<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> isFileRequest <span class=\"token operator\">=</span> lastPath<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFileRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> indexFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> lastCharacter <span class=\"token operator\">=</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastCharacter <span class=\"token operator\">!==</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    indexFileName <span class=\"token operator\">=</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> indexFileName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> newUri <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>uri<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>indexFileName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  request<span class=\"token punctuation\">.</span>uri <span class=\"token operator\">=</span> newUri<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">next.config.js</code>의 <code class=\"language-text\">trailingSlash</code> 옵션 설정</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// next.config.js</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">trailingSlash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<h3 id=\"sonarqube-quality-gate\" style=\"position:relative;\"><a href=\"#sonarqube-quality-gate\" aria-label=\"sonarqube quality gate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sonarqube quality gate</h3>\n<p>서비스를 배포할 수 있을만큼 quality가 보장되었는지를 체크한다. (강제성 부여)</p>\n<p>다음과 같은 조건들을 추가할 수 있다.</p>\n<ul>\n<li>새로운 블로커 이슈 없음</li>\n<li>새로운 코드에 대한 테스트 커버리지 80% 이상</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://docs.sonarqube.org/latest/user-guide/quality-gates/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.sonarqube.org/latest/user-guide/quality-gates/</a></p>\n<h3 id=\"jsdoc의-template\" style=\"position:relative;\"><a href=\"#jsdoc%EC%9D%98-template\" aria-label=\"jsdoc의 template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSDoc의 <code class=\"language-text\">@template</code></h3>\n<p>JSDoc의 <code class=\"language-text\">@template</code> 데코레이터를 사용하여 타입스크립트 제네릭에 설명을 추가할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">/**\n * @template T\n * @param {T} x - A generic parameter that flows through to the return type\n * @returns {T}\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"zod-이모저모\" style=\"position:relative;\"><a href=\"#zod-%EC%9D%B4%EB%AA%A8%EC%A0%80%EB%AA%A8\" aria-label=\"zod 이모저모 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>zod 이모저모</h3>\n<ul>\n<li>\n<p>zod의 <code class=\"language-text\">extends</code> 를 사용해 타입을 확장할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> UserData <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  fullName<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Article <span class=\"token operator\">=</span> UserData<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> UserProfile <span class=\"token operator\">=</span> UserData<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  isVerified<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  numberOfArticles<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">positive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>zod의 <code class=\"language-text\">z.parse()</code> 대신, <code class=\"language-text\">z.safeParse()</code>를 사용해서 에러핸들링을 할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getOrders</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Order<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/orders\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> OrderSchema<span class=\"token punctuation\">.</span><span class=\"token function\">safeParse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid API response /orders\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이를 Container Component나 Widget 패턴에 적용하기 위해서는 return하는 모든 지점에 contextHolder를 넣어야 한다\n이런 번거로움을 줄이기 위해 MessageProvider 를 작성해 사용할 수 있다.\n이 때 Antd에서 제공하는 ConfigProvider 를 사용한다면 ConfigProvder 안에 MessageProvider 가 있어야 한다.</p>\n</li>\n</ul>\n<h3 id=\"har-파일로-http-request-기록-확인하기\" style=\"position:relative;\"><a href=\"#har-%ED%8C%8C%EC%9D%BC%EB%A1%9C-http-request-%EA%B8%B0%EB%A1%9D-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"har 파일로 http request 기록 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HAR 파일로 HTTP Request 기록 확인하기</h3>\n<p>HAR(HTTP ARchive format) 파일은 웹브라우저와 사이트간의 상호작용을 로그로 남기는 파일로 주로 다음과 같은 이슈를 검토 할 때 사용된다.</p>\n<ul>\n<li>성능이슈: 느린 페이지 로딩, 특정 작업을 수행할 때 타임아웃 발생</li>\n<li>페이지렌더링: 페이지 포맷 오류, 정보 누락</li>\n</ul>\n<p>HAR 파일로 HTTP Request 기록을 확인할 수 있다</p>\n<p><strong>Ref</strong> <a href=\"https://partner.polarisofficecorp.com/atlassian/pages/viewpage.action?pageId=4523071\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://partner.polarisofficecorp.com/atlassian/pages/viewpage.action?pageId=4523071</a></p>\n<h3 id=\"sentry의-release와-dist\" style=\"position:relative;\"><a href=\"#sentry%EC%9D%98-release%EC%99%80-dist\" aria-label=\"sentry의 release와 dist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sentry의 release와 dist</h3>\n<p>Sentry에는 release와 dist가 있다</p>\n<p>Sentry 이벤트를 release별로 분류하고, dist까지의 조합으로 소스코드와 소스맵을 매칭할 수 있다. 소스에서 Sentry를 init하는 시점에 이 release와 dist를 입력해줄 수 있다.</p>\n<p>init한 release와 dist에 맞게 적절한 소스맵이 업로드되어있지 않으면 스택이 이상하게 찍히거나 아예 찍히지 않을 수 있다. (소급적용 안됨. 제대로 소스맵 업로드 후 날아온 이벤트만 제대로 포착)</p>\n<p>cf1) 리액트 네이티브에서는 init할 때 release와 dist를 앱 정보를 보고 알아서 넣어준다.\ncf2) 리액트 네이티브에서는 코드푸시와 센트리의 릴리즈를 연동할 수도 있다. 다만 이때는 init 시에 커스텀하게 release와 dist를 입력해주어야 함</p>\n<h3 id=\"charles로-요청값과-응답값을-기록변경테스트하기\" style=\"position:relative;\"><a href=\"#charles%EB%A1%9C-%EC%9A%94%EC%B2%AD%EA%B0%92%EA%B3%BC-%EC%9D%91%EB%8B%B5%EA%B0%92%EC%9D%84-%EA%B8%B0%EB%A1%9D%EB%B3%80%EA%B2%BD%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"charles로 요청값과 응답값을 기록변경테스트하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Charles로 요청값과 응답값을 기록/변경/테스트하기</h3>\n<ul>\n<li>응답값(response) 변경하기\n<ul>\n<li>map local을 이용한다.</li>\n<li>sequence 탭에서 우클릭 > map local을 클릭하면 됨</li>\n<li>API구현이 안되어있을 때 사용할 수 있다.</li>\n</ul>\n</li>\n<li>요청값(request) 변경하기\n<ul>\n<li>요청 중 하나를 선택해서 breakpoint를 건다.</li>\n<li>이리저리 앱을 테스트해보다가 breakpoint 걸림 → edit request 탭을 클릭 → request 수정</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"gitlab-merge-method-설정\" style=\"position:relative;\"><a href=\"#gitlab-merge-method-%EC%84%A4%EC%A0%95\" aria-label=\"gitlab merge method 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gitlab merge method 설정</h3>\n<ul>\n<li>merge commit: 모든 머지에 머지 커밋을 만든다.</li>\n<li>merge commit with semi-linear-history\n<ul>\n<li>모든 머지에 머지 커밋을 만들지만, fast-forward 머지가 가능할 때만 머지를 허락한다.</li>\n<li>fast-forward가 불가능하면 rebase를 해야한다.</li>\n</ul>\n</li>\n<li>fast-forward merge\n<ul>\n<li>머지커밋을 만들지 않는다.</li>\n<li>fast-forward가 불가능하면 rebase를 해야한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"css-overflow-조심하기\" style=\"position:relative;\"><a href=\"#css-overflow-%EC%A1%B0%EC%8B%AC%ED%95%98%EA%B8%B0\" aria-label=\"css overflow 조심하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css overflow 조심하기</h3>\n<p>css의 <code class=\"language-text\">overflow</code>는 단축속성이다.</p>\n<p><code class=\"language-text\">overflow-x: scroll</code>만 적용하면 y축도 스크롤이 생긴다. y축 스크롤을 방지하려면 <code class=\"language-text\">overflow-y: hidden</code>을 추가로 적용해줘야 한다.</p>\n<p>왤까?</p>\n<p>하나의 축을 visible(기본값)로 하고, 다른 축에는 다른 값을 지정할 경우 visible이 auto처럼 동작하기 때문이다.</p>\n<p>그럴바에 단축속성을 사용하여 <code class=\"language-text\">overflow: scroll hidden</code>으로 작성해주면 된다.</p>\n<p><strong>Ref</strong> <a href=\"https://developer.mozilla.org/ko/docs/Web/CSS/overflow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/CSS/overflow</a></p>\n<h3 id=\"gitlab-ciyml의-캐시컨트롤\" style=\"position:relative;\"><a href=\"#gitlab-ciyml%EC%9D%98-%EC%BA%90%EC%8B%9C%EC%BB%A8%ED%8A%B8%EB%A1%A4\" aria-label=\"gitlab ciyml의 캐시컨트롤 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gitlab-ci.yml의 캐시컨트롤</h3>\n<ul>\n<li><strong>cache: policy</strong>\n<ul>\n<li>캐시의 업로드/다운로드 방법을 조정하고 싶을 때 사용하는 키워드</li>\n<li><code class=\"language-text\">cache: paths</code> 를 지정하지 않으면 아무것도 캐시되지 않는다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>정책 종류</strong></p>\n<ul>\n<li><code class=\"language-text\">pull-push</code> 정책 (기본값)\n<ul>\n<li>Job이 시작되면 캐시를 다운받는다.</li>\n<li>Job이 끝나면 캐시에 변경사항을 업로드한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">pull</code> 정책\n<ul>\n<li>Job이 시작되면 캐시를 다운받는다.</li>\n<li>Job이 끝나도 변경사항에 대해 업데이트하지는 않는다.</li>\n<li>병렬로 실행되는 여러 잡이 같은 캐시를 공유하게 하고 싶다면 <code class=\"language-text\">pull</code> 정책 추천</li>\n<li>Job 실행 속도를 올려주고, 캐시서버에 부담도 줄여준다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">push</code> 정책\n<ul>\n<li>Job이 시작되도 캐시를 다운받지 않는다.</li>\n<li>Job이 끝나면 캐시를 업로드한다.</li>\n<li>캐시를 빌드하려는 거라면 <code class=\"language-text\">push</code> 정책 추천</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://docs.gitlab.com/ee/ci/yaml/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.gitlab.com/ee/ci/yaml/</a></p>\n<h3 id=\"rich-text-editor\" style=\"position:relative;\"><a href=\"#rich-text-editor\" aria-label=\"rich text editor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rich Text Editor</h3>\n<p>Rich Text Editor는 rich text를 수정할 수 있는 에디터다.</p>\n<blockquote>\n<p><strong>rich text?</strong>\nplain text와 반대되는 개념으로, 링크 기능을 사용할 수 있고 서식이 있는 텍스트를 말한다.</p>\n</blockquote>\n<p>즉 “What you see is what you get”인 (WYSIWYG) 에디터다.</p>\n<p><a href=\"https://prosemirror.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prosemirror</a>, <a href=\"https://lexical.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lexical</a> 은 rich text editor를 만들 수 있는 툴킷을 제공한다. <a href=\"https://playground.lexical.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lexical playground</a>를 이용하여 테스트도 해볼 수 있다.</p>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Array.prototype.join()</code> 을 사용할 때 <code class=\"language-text\">undefined</code>와 <code class=\"language-text\">null</code> 은 사라진다(<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '1,,3'</span></code></pre></div>\n</li>\n<li>\n<p>gitlab-ci.yml의 <code class=\"language-text\">interruptible</code> - 새로운 ci run으로 해당 동작이 불필요해졌을 때 취소될 수 있는지 여부를 나타낸다. (Defines if a job can be canceled when made redundant by a newer run.)</p>\n</li>\n<li>\n<p>tsc <code class=\"language-text\">--noEmit</code> 옵션 - 컴파일 output 파일을 생성하지 않는다. (<a href=\"https://www.typescriptlang.org/tsconfig#noEmit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTMLImageElement.decode()</a></p>\n<ul>\n<li>자바스크립트로 이미지를 가져올 때 <code class=\"language-text\">onload</code> 가 Promise 지원을 안해서 <code class=\"language-text\">new Promise()</code> 로 함수를 감싸는 귀찮은 작업이 필요하다.</li>\n<li><code class=\"language-text\">decode</code> 함수는 Promise를 리턴하기 때문에 콜백 함수 없이 이미지 속성에 접근이 가능하다.</li>\n</ul>\n</li>\n<li>\n<p>정보통신 세상에서 ‘Inheritance’가 ‘상속’으로 번역된 국내 기관의 첫 공식 사례는 1997년 CHILL 언어 가이드의 표준화 과정 중 이뤄졌다.</p>\n<ul>\n<li>CHILL언어?\n<ul>\n<li>ITU-T (국제전기통신연합 중 통신분야 표준 부문)에서 권고한 통신 처리 시스템용 프로그래밍 언어</li>\n<li>스위치 장비 내에서 널리 활용되었고, 표준 유지는 1999년에 중단됐지만 그곳에선 아직 사용되고 있다.</li>\n</ul>\n</li>\n<li>참고로 일본/중국/북한에선 상속이 아니라 계승이라고 번역한다는 사실</li>\n</ul>\n</li>\n<li>\n<p>jest에서는 esm (import export)가 지원되지 않는다. 이때 babel을 설치하고 jest config파일에서 설정하면 사용할 수 있다.</p>\n</li>\n<li>\n<p>standard-version의 CHANGELOG</p>\n<ul>\n<li>compare 경로: https://{gitlab레포경로}/compare/{target}…{source}</li>\n<li>target, source는 각각 브랜치, 태그, 커밋이 올 수 있는데, 브랜치, 타겟이름이 같은 경우 우선순위는 브랜치가 높다.</li>\n</ul>\n</li>\n<li>\n<p>typeorm의 <code class=\"language-text\">bigint</code>는 <code class=\"language-text\">number</code> 타입과 매핑되지 않는다. 대신 프로퍼티를 <code class=\"language-text\">string</code>으로 매핑시켜준다. (<a href=\"https://typeorm.io/entities#column-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n</li>\n<li>\n<p>자바스크립트에서 배열의 length에 null을 할당하면 배열이 비워지고 length가 0이된다.</p>\n</li>\n<li>\n<p>ES6 스펙상에는 꼬리 재귀 최적화가 명시되어 있다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">propTypes</code>와 비슷하게 <code class=\"language-text\">defaultProps</code>라는 것도 있다.</p>\n<ul>\n<li><code class=\"language-text\">defaultProps</code> 는 <code class=\"language-text\">React.FC</code> 와 호환되지 않는다는 이슈도 있었는데 지금 해결됐는지는…</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"기타공유\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80%EA%B3%B5%EC%9C%A0\" aria-label=\"기타공유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타공유</h2>\n<h3 id=\"typescript-타입-시스템-뜯어보기\" style=\"position:relative;\"><a href=\"#typescript-%ED%83%80%EC%9E%85-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%9C%AF%EC%96%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"typescript 타입 시스템 뜯어보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript 타입 시스템 뜯어보기</h3>\n<p>타입스크립트는 구조적 서브타이핑을 통해 타입 호환성을 지원한다. 다음과 같이 <code class=\"language-text\">Food</code> 타입과 이를 확장한 <code class=\"language-text\">Burger</code> 타입이 있고,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Food</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** 각 영양소에 대한 gram 중량값 */</span>\n  protein<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  carbohydrates<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  fat<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Burger</span> <span class=\"token operator\">=</span> Food <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** 햄버거 브랜드 이름 */</span>\n  burgerBrand<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Food</code> 타입의 값을 인자로 받는 <code class=\"language-text\">calculateCalorie</code> 함수가 있을 때,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">calculateCalorie</span><span class=\"token punctuation\">(</span>food<span class=\"token operator\">:</span> Food<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> food<span class=\"token punctuation\">.</span>protein <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> food<span class=\"token punctuation\">.</span>carbohydrates <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> food<span class=\"token punctuation\">.</span>fat <span class=\"token operator\">*</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">calculateCalorie</code> 함수의 인자로 <code class=\"language-text\">Burger</code> 타입의 객체를 넣어도 에러가 나지 않는다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> burger<span class=\"token operator\">:</span> Burger <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  protein<span class=\"token operator\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span>\n  carbohydrates<span class=\"token operator\">:</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span>\n  fat<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span>\n  burgerBrand<span class=\"token operator\">:</span> <span class=\"token string\">\"버거킹\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> calorie <span class=\"token operator\">=</span> <span class=\"token function\">calculateCalorie</span><span class=\"token punctuation\">(</span>burger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span></code></pre></div>\n<p>비록 상속 관계임을 명시하지는 않았지만 <code class=\"language-text\">burger</code> 변수는 <code class=\"language-text\">Food</code> 타입의 프로퍼티를 모두 포함하고 있기 때문이다.</p>\n<p>그러나 구조적 서브타이핑에 기반한 타입 호환이 지원되지 않는 경우가 존재하는데, 바로 리터럴 객체를 사용하는 경우다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> calorie <span class=\"token operator\">=</span> <span class=\"token function\">calculateCalorie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  protein<span class=\"token operator\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span>\n  carbohydrates<span class=\"token operator\">:</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span>\n  fat<span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span>\n  burgerBrand<span class=\"token operator\">:</span> <span class=\"token string\">\"버거킹\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 Object literal may only specify known properties, and 'burgerBrand' does not exist in type 'Food'</span></code></pre></div>\n<p>이는 타입스크립트 컴파일러 동작 방식과 관련이 있다.</p>\n<p>타입스크립트 컴파일 과정의 타입 검사 단계에는 다음과 같은 로직이 포함되어 있다. (간소화)</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> isPerformingExcessPropertyChecks <span class=\"token operator\">=</span>\n  <span class=\"token function\">getObjectFlags</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> ObjectFlags<span class=\"token punctuation\">.</span>FreshLiteral<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPerformingExcessPropertyChecks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasExcessProperties</span><span class=\"token punctuation\">(</span>source <span class=\"token keyword\">as</span> FreshObjectLiteralType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reportError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수에 인자로 들어온 값이 <code class=\"language-text\">FreshLiteral</code>인지 아닌지 여부에 따라 조건분기가 발생하여 타입 호환 허용 여부가 결정된다는 것을 확인할 수 있다.</p>\n<p><code class=\"language-text\">FreshLiteral</code>이 뭘까? 🤔</p>\n<p>모든 object literal은 초기에 “fresh” 하다고 간주되며, 타입 단언 (type assertion) 을 하거나, 타입 추론에 의해 object literal의 타입이 확장되면 “freshness”가 사라지게 된다.</p>\n<p><a href=\"https://github.com/Microsoft/TypeScript/pull/3823\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript Github PR (2015년 7월)</a> 의 논의에 따르면, fresh object인 경우에는 예외적으로 타입 호환을 허용하지 않기로 했음을 확인할 수 있다.</p>\n<p>이는 코드를 읽는 다른 개발자의 입장에서 함수가 실제 다루는 것보다 더 많은 데이터를 받아들인다는 오해를 불러일으킬 수 있고, 프로퍼티 키에 대한 오타가 발생하더라도 오류가 확인되지 않는 부작용이 있기 때문이다.</p>\n<p>또한 fresh object를 함수에 인자로 전달한 경우, 이는 특정한 변수에 할당되지 않았으므로 어차피 해당 함수에서만 사용되고 다른 곳에서 사용되지 않습니다. 이 경우 유연함에 대한 이점보다는 부작용을 발생시킬 가능성이 높으므로 굳이 구조적 서브타이핑을 지원해야할 이유가 없다!</p>\n<p>그럼에도 개발자가 fresh object에 대해서 타입 호환을 허용하고자 한다면?</p>\n<p>👇 마저 확인하기</p>\n<p><strong>Ref</strong> <a href=\"https://toss.tech/article/typescript-type-compatibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://toss.tech/article/typescript-type-compatibility</a></p>\n<h3 id=\"자바스크립트-성능의-비밀-v8과-히든-클래스\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%84%B1%EB%8A%A5%EC%9D%98-%EB%B9%84%EB%B0%80-v8%EA%B3%BC-%ED%9E%88%EB%93%A0-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"자바스크립트 성능의 비밀 v8과 히든 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 성능의 비밀 (V8과 히든 클래스)</h3>\n<p>구글이 만든 오픈소스 자바스크립트 엔진인 V8의 특징은, JIT(Just In Time) 컴파일러를 사용한다는 점이다.</p>\n<p>V8 엔진은 Ignition이라는 인터프리터를 사용하여, AST를 입력받아 바이트코드를 생성한다. 생성된 바이트코드는 Turbofan이라는 컴파일러에 의해 사용된다. 코드 실행 중 받는 데이터르 기반으로 코드를 최적화하고 보다 최적화된 버전을 다시 컴파일한다.</p>\n<p>V8은 최적화 프로세스와 AST 사용 외에도 자바스크립트의 성능을 향상시키기 위해 또 다른 트릭을 사용한다.</p>\n<p>자바스크립트는 동적 타입 언어다. 즉, 객체에서 속성을 즉시 추가하거나 제거할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> userObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nuserObject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zig\"</span><span class=\"token punctuation\">;</span>\nuserObject<span class=\"token punctuation\">.</span>blog <span class=\"token operator\">=</span> <span class=\"token string\">\"https://zigsong.github.io\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러나 이 접근 방식은 자바스크립트의 성능을 떨어뜨리는 동적 조회를 더 필요로 하게 만든다. V8 엔진은 히든 클래스를 사용해 이 문제를 해결하고 자바스크립트 실행을 최적화한다.</p>\n<p>새 객체를 생성할 때 V8 엔진은 이에 대한 새로운 히든 클래스를 생성한다. 그런 다음 새 프로퍼티를 추가해 동일한 객체를 수정하면 V8 엔진에서 이전 클래스의 모든 프로퍼티가 포함된 새 히든 클래스를 만들고 새 프로퍼티를 포함한다.</p>\n<p>👇 히든 클래스가 어떻게 생성되는지 더 살펴보기</p>\n<p><strong>Ref</strong> <a href=\"https://ui.toast.com/posts/ko_20210909\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ui.toast.com/posts/ko_20210909</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>진짜 1월 첫주차라고?? 한 6일은 더 지낸 것 같다. 1월 5일에는 오늘 1월 11일쯤 되지 않았어? 1월 6일에는 1월 12일쯤 되지 않았어? ㅋㅋㅋ… 그만큼 많은 일들을 처리하며 강제 갓생 살았던 주였나보다. 새해라 그런지 헬스장에도 사람이 너무너무 많았고, TIL도 엄청 많이 올라온다. 활기가 넘쳐 좋다… 🫠</p>","timeToRead":14,"frontmatter":{"title":"1월 1주차 기록","date":"January 07, 2023","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2023-1-week-1/","previous":{"fields":{"slug":"/weekly/2023-1-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 14, 2023","description":"weekly-i-learned","title":"1월 2주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/frontend/compare-js-bundlers/","langKey":"en","directoryName":"frontend"},"frontmatter":{"date":"January 05, 2023","description":null,"title":"자바스크립트 번들러 비교","tags":["frontend"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2023-1-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 14, 2023","description":"weekly-i-learned","title":"1월 2주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-12-week-4-5/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"December 30, 2022","description":"weekly-i-learned","title":"12월 4-5주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}