{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-9-week-5/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"b99a648f-0091-51b3-bfe1-e6a738dc519e","excerpt":"호주 가보자고 배워가기 Vue.js 이모저모 Vercel로 배포를 진행할 때 Project Name은 도메인이 된다.(변경 가능하다.) Vue는 기본적으로 다음과 같은…","html":"<p>호주 가보자고</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"vuejs-이모저모\" style=\"position:relative;\"><a href=\"#vuejs-%EC%9D%B4%EB%AA%A8%EC%A0%80%EB%AA%A8\" aria-label=\"vuejs 이모저모 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue.js 이모저모</h3>\n<ul>\n<li>Vercel로 배포를 진행할 때 Project Name은 도메인이 된다.(변경 가능하다.)</li>\n<li>Vue는 기본적으로 다음과 같은 3가지 모드가 있다. 새로운 모드를 정의해서 사용할 수도 있다.\n<ul>\n<li><code class=\"language-text\">development</code>: 프로토타이핑 및 개발 용도. <code class=\"language-text\">npm run serve</code> 명령어로 실행할 때의 모드</li>\n<li><code class=\"language-text\">production</code>: 상용화 및 배포 용도. <code class=\"language-text\">npm run build</code> 명령어로 실행할 때의 모드</li>\n<li><code class=\"language-text\">test</code>: 테스트 용도. <code class=\"language-text\">npm run test:unit</code> 명령어로 실행할 때의 모드</li>\n</ul>\n</li>\n<li>현재 Vue는 3.x 대의 메이저 버전을 가지고 있다.\n<ul>\n<li>Vue.js를 검색해서 나오는 페이지에 들어가면 3 버전을 기준으로 문서가 나와있다.</li>\n<li>본인이 2.x 버전의 Vue를 사용하고 있다면 아래 문서를 보자.</li>\n<li><a href=\"https://v2.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://v2.vuejs.org/</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"인증authentication-vs-인가authorization\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9Dauthentication-vs-%EC%9D%B8%EA%B0%80authorization\" aria-label=\"인증authentication vs 인가authorization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증(Authentication) vs 인가(Authorization)</h3>\n<p>인증과 인가는 엄연히 서로 다른 프로세스이므로 각 용어에 따른 개념을 각각 이해하는 것이 중요하다.</p>\n<ul>\n<li>인증\n<ul>\n<li>자격 증명 확인 (ID/PW, Pin, 생체인식, OTP 등)</li>\n<li>쉽게말해, “너 누구냐?”</li>\n</ul>\n</li>\n<li>인가\n<ul>\n<li>권한 허가/거부</li>\n<li>인증 완료된 유저가 무엇을 할 수 있는지 없는지 허가/거부를 내림</li>\n</ul>\n</li>\n</ul>\n<p>Oauth 2.1 의 인증/인가 흐름은 다음과 같다.</p>\n<ol>\n<li>클라이언트가 리소스에 인가 요청을 보낸다.</li>\n<li>리소스는 클라이언트에 인가를 허용한다.</li>\n<li>인가 받은 클라이언트가 서버에 인가를 포함한 요청을 보낸다.</li>\n<li>서버는 클라이언트에 Access Token을 보낸다.</li>\n<li>클라이언트는 4에서 받은 Access Token으로 다시 리소스에 요청을 보낸다.</li>\n<li>리소스는 클라이언트에 보안 리소스를 보낸다.</li>\n</ol>\n<p><strong>Ref</strong> <a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-05#section-1.2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-05#section-1.2</a></p>\n<h3 id=\"stale-closure\" style=\"position:relative;\"><a href=\"#stale-closure\" aria-label=\"stale closure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stale closure</h3>\n<p>클로저를 사용할 때 stale closure 문제를 주의해야 한다.</p>\n<p>다음 코드를 살펴보자. <code class=\"language-text\">WatchCount</code> 컴포넌트의 <code class=\"language-text\">useEffect</code> hook에서는 매 2초마다 <code class=\"language-text\">count</code> 값을 콘솔에 로깅한다. 그리고 <code class=\"language-text\">button</code>을 통해 <code class=\"language-text\">count</code>의 값을 증가시킬 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">WatchCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Count is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Increase</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>실행해보면, <code class=\"language-text\">button</code>으로 <code class=\"language-text\">count</code>의 값을 여러 번 증가시켜도, <code class=\"language-text\">useEffect</code> hook 내부에서 출력되는 <code class=\"language-text\">count</code>의 값을 계속 0이다.</p>\n<p>컴포넌트가 마운트된 후, <code class=\"language-text\">useEffect</code>는 <code class=\"language-text\">setInterval</code> 함수를 호출하고, <code class=\"language-text\">setInterval</code>은 <code class=\"language-text\">console.log()</code>를 2초마다 출력하기로 스케쥴링했는데, 이때 클로저가 된 <code class=\"language-text\">console.log()</code> 함수가 <code class=\"language-text\">count</code> 변수의 초기값 0을 계속 물고 있기 때문이다. 즉 <code class=\"language-text\">console.log9)</code>가 stale closure가 된 것이다.</p>\n<p>해결 방안은 <code class=\"language-text\">useEffect</code>에게 <code class=\"language-text\">console.log()</code>가 <code class=\"language-text\">count</code>의 값에 의존하고 있음을 알려주는 것이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">WatchCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Count is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">useEffect</code>의 dependency에 <code class=\"language-text\">count</code>를 넣어, <code class=\"language-text\">count</code>가 변할 때마다 클로저를 업데이트하게끔 한다.</p>\n<p><strong>Ref</strong> <a href=\"https://dmitripavlutin.com/react-hooks-stale-closures/#3-stale-closures-of-hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dmitripavlutin.com/react-hooks-stale-closures/#3-stale-closures-of-hooks</a></p>\n<h3 id=\"env-cmd-활용하기\" style=\"position:relative;\"><a href=\"#env-cmd-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"env cmd 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>env-cmd 활용하기</h3>\n<p><code class=\"language-text\">env-cmd</code> 를 사용할 때 공통으로 사용하는 환경변수를 두고 특정 상황마다 분기를 주고 싶다면 아래와 같이 사용하면 된다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// .env-cmdrc</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"ENV1\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Thanks\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"ENV2\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"For All\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"dev02\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"ENV1\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Fish\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// package.json</span>\n\n<span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token string-property property\">\"build:dev02\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"env-cmd -e dev,dev02 react-scripts build\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 사용하게 되면 dev에 있는 환경변수를 사용하면서 dev와 dev02에 모두 존재하는 환경변수의 경우 dev02의 값으로 사용한다.(dev의 값을 덮어씌운다.)</p>\n<p>이 때 주의할 점은 <code class=\"language-text\">dev, dev02</code> 처럼 띄어쓰면 안 되고 <code class=\"language-text\">dev,dev02</code> 처럼 붙여서 사용해야 한다.</p>\n<h3 id=\"npm-ci의-실행순서\" style=\"position:relative;\"><a href=\"#npm-ci%EC%9D%98-%EC%8B%A4%ED%96%89%EC%88%9C%EC%84%9C\" aria-label=\"npm ci의 실행순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm ci의 실행순서</h3>\n<p>“prepare”에 스크립트를 추가하면 <code class=\"language-text\">npm ci</code>만 실행해도 <code class=\"language-text\">install</code> 후에 자동으로 실행된다. <code class=\"language-text\">npm ci</code>의 실행 순서가 다음과 같기 때문이다.</p>\n<ul>\n<li>preinstall</li>\n<li>install</li>\n<li>postinstall</li>\n<li>prepublish</li>\n<li>preprepare</li>\n<li>prepare</li>\n<li>postprepare</li>\n</ul>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://docs.npmjs.com/cli/v8/using-npm/scripts#prepare-and-prepublish\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.npmjs.com/cli/v8/using-npm/scripts#prepare-and-prepublish</a></li>\n<li><a href=\"https://stackoverflow.com/questions/44499912/why-is-npm-running-prepare-script-after-npm-install-and-how-can-i-stop-it\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/44499912/why-is-npm-running-prepare-script-after-npm-install-and-how-can-i-stop-it</a></li>\n</ul>\n<h3 id=\"css-이모저모\" style=\"position:relative;\"><a href=\"#css-%EC%9D%B4%EB%AA%A8%EC%A0%80%EB%AA%A8\" aria-label=\"css 이모저모 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 이모저모</h3>\n<ul>\n<li><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-underline-offset\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">text-underline-offset</a></strong>: 2px;\n<ul>\n<li>텍스트 언더라인 위치를 픽셀단위로 조정할 수 있다. (기본 1px)</li>\n</ul>\n</li>\n<li><strong>position: absolute</strong>\n<ul>\n<li>top, bottom 둘다 정의하면 top이 우선한다.</li>\n<li>left, right 둘다 정의하면 (ltr 환경이면) left가 우선한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"타입스크립트-as\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-as\" aria-label=\"타입스크립트 as permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 <code class=\"language-text\">as</code></h3>\n<p>타입스크립트에서 <code class=\"language-text\">as</code>는 그냥 타입 단언(type assertion)용으로만 쓰는 줄 알았다..!</p>\n<p>그런데 <code class=\"language-text\">as</code>를 활용해서 key remapping도 할 수 있다고 한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MappedTypeWithNewProperties<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Properties <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type <span class=\"token keyword\">as</span> NewKeyType<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Type<span class=\"token punctuation\">[</span>Properties<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>template literal type 등의 기능을 활용해서, 새로운 프로퍼티 이름을 정의할 수도 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Getters<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Type <span class=\"token keyword\">as</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">get</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Capitalize<span class=\"token operator\">&lt;</span>\n    <span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> Property\n  <span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Type<span class=\"token punctuation\">[</span>Property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  location<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LazyPerson</span> <span class=\"token operator\">=</span> Getters<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type LazyPerson = {</span>\n<span class=\"token comment\">//     getName: () => string;</span>\n<span class=\"token comment\">//     getAge: () => number;</span>\n<span class=\"token comment\">//     getLocation: () => string;</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<p>이밖에 또 여러 가지로 활용할 수 있는 길들이 있으니 참고하자~!</p>\n<p><strong>Ref</strong> <a href=\"https://www.typescriptlang.org/docs/handbook/2/mapped-types.html#key-remapping-via-as\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.typescriptlang.org/docs/handbook/2/mapped-types.html#key-remapping-via-as</a></p>\n<h3 id=\"히트맵으로-사용자-행동-분석하기\" style=\"position:relative;\"><a href=\"#%ED%9E%88%ED%8A%B8%EB%A7%B5%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%EC%9E%90-%ED%96%89%EB%8F%99-%EB%B6%84%EC%84%9D%ED%95%98%EA%B8%B0\" aria-label=\"히트맵으로 사용자 행동 분석하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>히트맵으로 사용자 행동 분석하기</h3>\n<p>웹사이트의 방문자를 분석하는 웹로그 분석에 많이 사용하는 분석 기법으로, 웹페이지에서 발생하는 마우스 클릭을 열분포 형태의 이미지로 변환하여 보여준다.</p>\n<p>근데 hitmap인지 heatmap인지 모르겠다… 🙄 사용자가 특정 요소를 선택했다면(클릭했다면) hit가 맞는 것 같기도, 어떤 곳을 ‘많이’ 클릭했는지를 알고 싶다면 ‘열’을 뜻하는 ‘heat’가 맞는 것 같기도 하다. 둘 다 사용하고 있는 것 같다.</p>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://blog.bizspring.co.kr/%EC%86%94%EB%A3%A8%EC%85%98/%ED%9E%88%ED%8A%B8%EB%A7%B5-%EC%83%85%EC%83%85%EC%9D%B4-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0-%E2%91%A2snssearch-hitmap/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.bizspring.co.kr/솔루션/히트맵-샅샅이-파헤치기-③snssearch-hitmap/</a></li>\n<li><a href=\"https://www.beusable.net/blog/?p=1497\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.beusable.net/blog/?p=1497</a></li>\n</ul>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>Navigator API를 사용해서 Clipboard 복사 기능을 간단하게 구현할 수 있다.\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator</a></li>\n</ul>\n</li>\n<li>axios에는 <code class=\"language-text\">AxiosPromise</code>라는 타입이 정의되어 있다.\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AxiosPromise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>AxiosResponse<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>SSO\n<ul>\n<li>하나의 아이디 및 패스워드를 통해 여러 시스템에 접근할 수 있는 통합 로그인(인증) 솔루션</li>\n<li><a href=\"https://toma0912.tistory.com/75\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://toma0912.tistory.com/75</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<h3 id=\"ldaplightweight-directory-access-protocol\" style=\"position:relative;\"><a href=\"#ldaplightweight-directory-access-protocol\" aria-label=\"ldaplightweight directory access protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LDAP(Lightweight-Directory-Access-Protocol)</h3>\n<p>LDAP은 네트워크상에서 조직이나 개인, 파일, 디바이스등을 찾아볼 수 있도록 하는 소프트웨어 프로토콜이다.</p>\n<p>예전부터 이름을 통해 쉽게 찾아낼 수 있는 시스템을 구축하는데 많은 고민과 시간을 쏟았다. (e.g. DNS) 이러한 것들을 전자 디렉토리 서비스라고 부른다.</p>\n<p>그러한 표준 (X.500)을 만들고, 이 표준을 기반으로 클라이언트가 디렉토리 시스템과 상호작용하는 방식인 DAP(Directory Access Protocol)가 탄생했다.</p>\n<p>DAP는 OSI Model을 기반으로 만들었기 때문에, 흔히 쓰이던 TCP/IP Model에서도 동작할 수 있도록 만들어야 했다. 그래서 나온게 LDAP(Lightweight Directory Access Protocol)다.</p>\n<p>DAP는 OSI의 모든 계층을 사용하기 때문에 무겁고 네트워크 트래픽을 많이 소요했다. 그래서 계층이 적은 TCP/IP Model을 사용하면서 이러한 부분을 함께 개선하고자 했고, TCP/UDP로 해결할 수 있도록 경량화 시켰다. 이것이 LDAP에 ‘Lightweight’가 붙는 이유이며, 지금도 많이 쓰이는 표준이다.</p>\n<p>LDAP는 이름 기반으로 찾아내는 특성상 RDN(Relative Distinguished Name) 값을 각 Entity 별로 갖고 있으며, 이어붙여 트리상에서 Entity를 쉽게 검색할 수 있다는 점이 특징이다.</p>\n<p><strong>Ref</strong> <a href=\"https://vallista.kr/LDAP-(Lightweight-Directory-Access-Protocol)/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://vallista.kr/LDAP-(Lightweight-Directory-Access-Protocol)/</a></p>\n<h3 id=\"typescript-49-beta\" style=\"position:relative;\"><a href=\"#typescript-49-beta\" aria-label=\"typescript 49 beta permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript 4.9 Beta</h3>\n<p>타입스크립트 4.9 베타 버전이 올라왔다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">satisfies</code> 연산자\n표현식이 어떤 타입에 매칭됨을 보장하면서도, 가장 구체적인 타입을 작성하고자 할 때 사용한다. 표현식의 타입을 바꾸지 않으면서, 표현식의 타입이 어떤 타입과 매칭되는지 검증해주는 것이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Colors</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"green\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">RGB</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>red<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> green<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> blue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> palette <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  red<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  green<span class=\"token operator\">:</span> <span class=\"token string\">\"#00ff00\"</span><span class=\"token punctuation\">,</span>\n  bleu<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// ~~~~ The typo is now caught!</span>\n<span class=\"token punctuation\">}</span> satisfies Record<span class=\"token operator\">&lt;</span>Colors<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token constant\">RGB</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Both of these methods are still accessible!</span>\n<span class=\"token keyword\">const</span> redComponent <span class=\"token operator\">=</span> palette<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> greenNormalized <span class=\"token operator\">=</span> palette<span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">palette</code>의 타입을 <code class=\"language-text\">Record&lt;Colors, string | RGB></code>로 제한하는 대신, <code class=\"language-text\">satisfies</code> 연산자를 사용함으로써 <code class=\"language-text\">bleu</code>의 typo도 찾아낼 수 있음은 물론, <code class=\"language-text\">palette</code>의 모든 프로퍼티가 <code class=\"language-text\">string | number[]</code> 타입임을 검증하여 <code class=\"language-text\">red</code>와 <code class=\"language-text\">green</code>에서 프로토타입 메서드 (<code class=\"language-text\">at()</code>, <code class=\"language-text\">toUpperCase()</code>)를 사용할 수 있게 되었다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">in</code> 연산자로 list되지 않은 프로퍼티 좁히기\n런타임에 특정 프로퍼티가 존재하는지 여부를 알기 위해 타입스크립트는 (자바스크립트 문법인) <code class=\"language-text\">in</code> 연산자를 사용한다. 하지만 주어진 프로퍼티에 타이핑이 되어있지 않다면 도움이 되지 않는다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Context</span> <span class=\"token punctuation\">{</span>\n  packageJSON<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tryGetPackageName</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> packageJSON <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>packageJSON<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Check to see if we have an object.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>packageJSON <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> packageJSON <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Check to see if it has a string name property.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span> <span class=\"token keyword\">in</span> packageJSON <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> packageJSON<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ~~~~</span>\n      <span class=\"token comment\">// error! Property 'name' does not exist on type 'object.</span>\n      <span class=\"token keyword\">return</span> packageJSON<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// ~~~~</span>\n      <span class=\"token comment\">// error! Property 'name' does not exist on type 'object.</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">packageJSON</code>의 타입이 <code class=\"language-text\">unknown</code>에서 <code class=\"language-text\">object</code>로 좁혀졌지만, <code class=\"language-text\">in</code> 연산자는 타입을 엄격하게 확인하기 때문에 <code class=\"language-text\">packageJSON</code>에 <code class=\"language-text\">name</code> 프로퍼티가 있다는 것을 보장할 수 없다.</p>\n<p>타입스크립트 4.9에서부터 <code class=\"language-text\">in</code> 연산자는 프로퍼티를 전혀 기재하지 않아도 타입을 추론하는 방식으로 변경되었다. 이제 <code class=\"language-text\">packageJSON</code>은 <code class=\"language-text\">object &amp; Record&lt;\"name\", unknown></code> 타입이 되어, <code class=\"language-text\">packageJSON.name</code>을 직접적으로, 그리고 독립적으로 사용할 수 있게 된다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">NaN</code>의 동일성 체크\n자바스크립트에서 <code class=\"language-text\">NaN</code>은 특수한 숫자형 값으로, <code class=\"language-text\">NaN</code>과 <code class=\"language-text\">NaN</code>은 서로 동일하지 않다. 타입스크립트 신규 버전에서는 <code class=\"language-text\">NaN</code>과 직접적으로 비교 연산을 수행하는 것을 금지한다. (대신 <code class=\"language-text\">Number.isNaN</code>의 사용을 권장한다.)</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> someValue <span class=\"token operator\">!==</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//     ~~~~~~~~~~~~~~~~~</span>\n  <span class=\"token comment\">// error: This condition will always return 'true'.</span>\n  <span class=\"token comment\">//        Did you mean '!Number.isNaN(someValue)'?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>File System Events에 기반한 File-Watching\n이전 버전에서 타입스크립트는 개별 파일을 watching하는 데 polling 방식을 사용했다. polling은 정해진 시간마다 업데이트를 확인하는 것으로, CPU가 계속해서 방해받게 된다.\n타입스크립트 4.9에서는 특정 파일의 업데이트 시 콜백을 실행하는 파일 시스템 이벤트를 활용한다.</p>\n</li>\n<li>\n<p>기타 오류 수정 및 Breaking Changes</p>\n<ul>\n<li>lib.d.ts 업데이트</li>\n<li><code class=\"language-text\">Promise.resolve</code>의 더 나은 타이핑</li>\n<li>JavaScript 변환 시 Elides Imports를 허용하지 않음</li>\n<li><code class=\"language-text\">exports</code>가 <code class=\"language-text\">typesVersions</code>보다 우선시됨</li>\n<li><code class=\"language-text\">substitute</code>를 <code class=\"language-text\">SubstitutionTypes</code>의 <code class=\"language-text\">constraint</code>로 대체</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-9-beta/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://devblogs.microsoft.com/typescript/announcing-typescript-4-9-beta/</a></p>\n<h3 id=\"구글에서-사용하는-코드-스타일-사본\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EA%B8%80%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-%EC%82%AC%EB%B3%B8\" aria-label=\"구글에서 사용하는 코드 스타일 사본 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구글에서 사용하는 코드 스타일 사본</h3>\n<ul>\n<li>HTML/CSS: <a href=\"https://google.github.io/styleguide/htmlcssguide.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://google.github.io/styleguide/htmlcssguide.html</a></li>\n<li>JavaScript: <a href=\"https://google.github.io/styleguide/jsguide.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://google.github.io/styleguide/jsguide.html</a></li>\n<li>TypeScript: <a href=\"https://google.github.io/styleguide/tsguide.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://google.github.io/styleguide/tsguide.html</a></li>\n</ul>\n<h3 id=\"react-global-online-summit\" style=\"position:relative;\"><a href=\"#react-global-online-summit\" aria-label=\"react global online summit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Global Online Summit</h3>\n<p><strong>Ref</strong> <a href=\"https://events.geekle.us/react3/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://events.geekle.us/react3/</a></p>\n<h3 id=\"vscode-pet\" style=\"position:relative;\"><a href=\"#vscode-pet\" aria-label=\"vscode pet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VSCode pet</h3>\n<p>펫의 종류가 더 다채로워진 것 같다! 클립이 있다니 ㅋㅋㅋ</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/tonybaloney/vscode-pets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/tonybaloney/vscode-pets</a></p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>여러 가지 비밀(?)스러운 소식들이 있었고… 인생 첫 사회인으로써 청첩장을 받아봤다! 좀 늦은 것 같기도..? 내가 다 기대되고 설렌당. 결혼식을 아직 많이 안 가봐서 그런지, 결혼식 넘 재밌당. 주변에 결혼하시는 분들이 점점 많아지는 것 같다.</p>\n<p>내년 호주 같이 갈 회사 친구들(ㅋㅋ)을 만났다. 새로 알게 된 언니는 정말 텐션이 장난 아니다. 무사히 갔다올 수 있겠지?</p>\n<p>이제 개천절까지 연휴다! 너무너무 좋당. 주4.5일제를 하고 있긴 하지만, 주4일제 소취… (국가적으로)</p>","timeToRead":11,"frontmatter":{"title":"9월 5주차 기록","date":"October 01, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-9-week-5/","previous":{"fields":{"slug":"/weekly/2022-10-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 08, 2022","description":"weekly-i-learned","title":"10월 1주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2022-9-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"September 24, 2022","description":"weekly-i-learned","title":"9월 4주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-10-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 08, 2022","description":"weekly-i-learned","title":"10월 1주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-9-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"September 24, 2022","description":"weekly-i-learned","title":"9월 4주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}