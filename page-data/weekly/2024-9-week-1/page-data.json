{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2024-9-week-1/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"a00e0489-74e3-5e19-b775-0972e0858801","excerpt":"배워가기 react-query의 와  는 데이터를 읽고 관리하는 데 특화되어 있고, 자동화된 캐싱, 리페칭, 상태 관리 등을 제공한다. 은 데이터를 변경하는 작업에 특화되어 있으며, 명령형 호출, optimistic updates…","html":"<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<hr>\n<h3 id=\"react-query의-usequery와-usemutation\" style=\"position:relative;\"><a href=\"#react-query%EC%9D%98-usequery%EC%99%80-usemutation\" aria-label=\"react query의 usequery와 usemutation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query의 <code class=\"language-text\">useQuery</code>와 <code class=\"language-text\">useMutation</code></h3>\n<ul>\n<li>\n<p><code class=\"language-text\">useQuery</code>는 데이터를 읽고 관리하는 데 특화되어 있고, 자동화된 캐싱, 리페칭, 상태 관리 등을 제공한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">useMutation</code>은 데이터를 변경하는 작업에 특화되어 있으며, 명령형 호출, optimistic updates, 오류 처리, 쿼리 무효화 등을 가능하게 한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">useQuery</code>와 달리, <code class=\"language-text\">useMutation</code>은 요청이 수동적으로 트리거된다. 즉, 사용자가 버튼을 클릭하거나 폼을 제출할 때 호출된다.</p>\n</li>\n</ul>\n<blockquote>\n<p>🤔 그러면 GET 요청을 할 때도 컴포넌트 업데이트 시 데이터를 바로 불러오는 게 아니라, 수동적으로 트리거 시 불러오고 싶을 때는 useQuery 대신 useMutation을 써도 되나?</p>\n</blockquote>\n<p><code class=\"language-text\">useQuery</code>는 기본적으로 컴포넌트가 마운트될 때 자동으로 데이터를 불러온다. 하지만 데이터를 수동적으로 트리거하고 싶을 경우에도 <code class=\"language-text\">useQuery</code>를 사용할 수 있다. 이를 위해 <code class=\"language-text\">useQuery</code>의 <code class=\"language-text\">enabled</code> 옵션을 <code class=\"language-text\">false</code>로 설정하고, <code class=\"language-text\">refetch</code> 함수를 사용하여 원하는 시점에 데이터를 불러올 수 있다.</p>\n<p><strong>왜 <code class=\"language-text\">useMutation</code>을 사용하지 말아야 할까?</strong></p>\n<p>비록 <code class=\"language-text\">useMutation</code>을 사용하여 GET 요청을 수행할 수 있지만, 이는 권장되지 않는다. 그 이유는 다음과 같다:</p>\n<ol>\n<li><strong>의미론적 불일치</strong>: <code class=\"language-text\">useMutation</code>은 데이터 변경 작업에 최적화되어 있으며, GET 요청은 데이터 조회에 해당한다. 의미적으로 맞지 않기 때문에 코드의 가독성과 유지보수성이 떨어질 수 있다.</li>\n<li><strong>기능 부족</strong>: <code class=\"language-text\">useMutation</code>은 <code class=\"language-text\">useQuery</code>가 제공하는 캐싱, 자동 리페칭, 데이터 동기화 등의 기능을 제공하지 않는다. 따라서 GET 요청을 <code class=\"language-text\">useMutation</code>으로 처리하면 이러한 이점을 놓치게 된다.</li>\n<li><strong>최적화 미적용</strong>: <code class=\"language-text\">useQuery</code>는 데이터 페칭에 최적화된 다양한 최적화 기법을 사용한다. <code class=\"language-text\">useMutation</code>은 이러한 최적화가 적용되지 않는다.</li>\n</ol>\n<blockquote>\n<p>☝️ <strong>추가 팁</strong></p>\n<ul>\n<li><strong><code class=\"language-text\">useQuery</code>의 <code class=\"language-text\">refetch</code> 기능 활용</strong>: 데이터가 변경될 때마다 <code class=\"language-text\">refetch</code>를 호출하여 최신 데이터를 가져올 수 있다.</li>\n<li><strong><code class=\"language-text\">useQuery</code>와 <code class=\"language-text\">useMutation</code>의 조합</strong>: 예를 들어, 데이터를 업데이트한 후 <code class=\"language-text\">useMutation</code>의 <code class=\"language-text\">onSuccess</code> 콜백에서 관련 <code class=\"language-text\">useQuery</code>를 무효화(invalidate)하여 최신 데이터를 가져오도록 할 수 있다.</li>\n</ul>\n</blockquote>\n<h3 id=\"react-query-usemutation-vs-mutationmutate\" style=\"position:relative;\"><a href=\"#react-query-usemutation-vs-mutationmutate\" aria-label=\"react query usemutation vs mutationmutate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query <code class=\"language-text\">useMutation</code> vs <code class=\"language-text\">mutation.mutate()</code></h3>\n<ul>\n<li>\n<p><strong><code class=\"language-text\">useMutation</code></strong></p>\n<ul>\n<li><code class=\"language-text\">useMutation</code>은 데이터를 생성(Create), 수정(Update), 삭제(Delete)하는 비동기 작업을 수행하기 위해 사용되는 훅이다. 이 훅은 비동기 작업의 상태를 관리하고, 성공 또는 실패 시 특정 로직을 처리할 수 있도록 도와준다.</li>\n<li><code class=\"language-text\">useMutation</code>을 호출하면 반환되는 객체에는 <code class=\"language-text\">mutate</code>와 <code class=\"language-text\">mutateAsync</code>라는 두 가지 메서드가 포함되어 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">mutate</code> 메서드</strong></p>\n<ul>\n<li><code class=\"language-text\">mutate</code>는 가장 기본적인 방식으로 mutation을 트리거하는 메서드이다. <code class=\"language-text\">mutate</code>를 사용하면 비동기 작업을 수행하고, 해당 작업이 완료되면 콜백 함수(예: <code class=\"language-text\">onSuccess</code>, <code class=\"language-text\">onError</code>, <code class=\"language-text\">onSettled</code>)가 호출된다.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>addTodo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 성공 시 처리</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 에러 발생 시 처리</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span>newTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p><strong>콜백 중심</strong>: <code class=\"language-text\">mutate</code>는 Promise를 반환하지 않고, 성공 또는 실패 시 전달된 콜백을 통해 작업 결과를 처리한다.</p>\n</li>\n<li>\n<p><strong>비동기 함수</strong>의 내부에서 사용 시 불편: <code class=\"language-text\">mutate</code>를 비동기 함수 안에서 사용하면 작업 완료 시점에 대한 처리가 어려울 수 있다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">mutateAsync</code> 메서드</strong></p>\n<ul>\n<li><code class=\"language-text\">mutateAsync</code>는 <code class=\"language-text\">mutate</code>와 동일한 비동기 작업을 수행하지만, <code class=\"language-text\">Promise</code>를 반환한다는 점에서 차이가 있다. 이 <code class=\"language-text\">Promise</code>는 mutation 작업의 성공 또는 실패 여부를 처리할 수 있게 해준다.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>addTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleAddTodo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutateAsync</span><span class=\"token punctuation\">(</span>newTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 성공 시 처리</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 에러 발생 시 처리</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>Promise 반환</strong>: <code class=\"language-text\">mutateAsync</code>는 비동기 함수 안에서 <code class=\"language-text\">await</code> 키워드를 사용하여 작업이 완료될 때까지 기다릴 수 있다.</li>\n<li><strong>명령형 코드</strong>: <code class=\"language-text\">mutateAsync</code>를 사용하면 명령형 코드 스타일로 비동기 작업을 처리할 수 있다. 특히, 작업이 완료된 후에 특정한 추가 로직을 처리해야 하는 경우 유용하다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>🤔 <strong>그럼 MutateAsync는 언제 쓰나요?</strong></p>\n<ul>\n<li>Promise가 꼭 필요할 경우</li>\n<li>여러 <code class=\"language-text\">mutations</code>를 동시에 시작하며, 모든 <code class=\"language-text\">mutations</code> 이 끝나기를 기다리는 작업</li>\n<li>콜백 지옥에 빠질 수 있는 의존적 <code class=\"language-text\">mutations</code> 이 있는 경우</li>\n</ul>\n</blockquote>\n<p><strong>Ref</strong></p>\n<ul>\n<li>ChatGPT</li>\n<li><a href=\"https://velog.io/@dev_jazziron/React-Query-mutation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@dev_jazziron/React-Query-mutation</a></li>\n</ul>\n<h3 id=\"react-query의-invalidatequeries\" style=\"position:relative;\"><a href=\"#react-query%EC%9D%98-invalidatequeries\" aria-label=\"react query의 invalidatequeries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query의 <code class=\"language-text\">invalidateQueries</code></h3>\n<p>react-query에서 <code class=\"language-text\">invalidateQueries</code>를 호출해야 하는 경우는 언제일까?</p>\n<ol>\n<li><strong>데이터 변경 후</strong></li>\n</ol>\n<ul>\n<li>데이터를 <strong>생성(Create)</strong>, <strong>수정(Update)</strong>, 또는 **삭제(Delete)**하는 요청을 보낸 후에는 관련된 쿼리를 무효화하는 것이 좋다. 이렇게 하면 다음번에 해당 쿼리를 사용하는 컴포넌트가 렌더링될 때, 최신 데이터를 가져올 수 있다.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>데이터 의존성</strong></li>\n</ol>\n<ul>\n<li>여러 쿼리가 서로 관련이 있는 경우, 하나의 쿼리가 갱신되면 관련된 다른 쿼리도 최신 데이터를 가져와야 할 수 있다. 이 경우 관련된 쿼리들을 무효화하여 최신 데이터를 불러오도록 한다.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>주기적 데이터 갱신</strong></li>\n</ol>\n<ul>\n<li>특정 주기나 이벤트에 따라 데이터를 갱신해야 할 때 <code class=\"language-text\">invalidateQueries</code>를 사용할 수 있다. 예를 들어, 일정 시간이 지나면 데이터를 자동으로 갱신하고 싶을 때이다.</li>\n</ul>\n<ol start=\"4\">\n<li><strong>수동 데이터 갱신</strong></li>\n</ol>\n<ul>\n<li>사용자가 특정 버튼을 클릭하여 데이터를 수동으로 갱신하려고 할 때, <code class=\"language-text\">invalidateQueries</code>를 사용해 해당 쿼리를 무효화할 수 있다.</li>\n</ul>\n<ol start=\"5\">\n<li><strong>서버 상태 불확실성</strong></li>\n</ol>\n<ul>\n<li>만약 서버의 상태가 불확실하거나, 특정 작업 후 서버의 데이터가 변경되었을 가능성이 높은 경우, 안전을 위해 관련 쿼리를 무효화하는 것이 좋다.</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">invalidateQueries</code> vs <code class=\"language-text\">removeQueries</code> vs <code class=\"language-text\">resetQueries</code></p>\n</blockquote>\n<blockquote>\n<ul>\n<li><strong><code class=\"language-text\">invalidateQueries</code></strong>\n<ul>\n<li>특정 쿼리를 “무효화”하여, 해당 쿼리가 다음에 사용될 때 서버로부터 데이터를 다시 가져오도록 한다. 기존의 캐시된 데이터는 그대로 남아 있으며, 무효화된 쿼리가 다시 호출될 때 캐시된 데이터가 아닌 새 데이터를 가져오게 된다.</li>\n</ul>\n</li>\n<li><strong><code class=\"language-text\">removeQueries</code></strong>\n<ul>\n<li>특정 쿼리를 캐시에서 완전히 <strong>제거</strong>한다. 이 함수가 호출되면 해당 쿼리의 모든 캐시 데이터와 메타데이터(상태, 타이머 등)가 삭제된다. 이후 해당 쿼리가 다시 호출되면, 처음부터 데이터를 가져오게 된다.</li>\n</ul>\n</li>\n<li><strong><code class=\"language-text\">resetQueries</code></strong>\n<ul>\n<li>특정 쿼리를 <strong>초기 상태로 리셋</strong>한다. 즉, 쿼리를 처음 호출했을 때와 같은 상태로 되돌린다. 이 과정에서 캐시된 데이터는 삭제되지만, <code class=\"language-text\">removeQueries</code>와 달리 쿼리 자체는 남아 있으며 다음에 사용할 때 초기 상태로 다시 시작하게 된다. 이때, 쿼리가 <code class=\"language-text\">enabled</code> 상태라면 즉시 데이터를 다시 가져온다.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://velog.io/@eamon3481/React-Query-Query-invalidate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@eamon3481/React-Query-Query-invalidate</a></p>\n<h3 id=\"react-query의-structural-sharing\" style=\"position:relative;\"><a href=\"#react-query%EC%9D%98-structural-sharing\" aria-label=\"react query의 structural sharing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query의 structural sharing</h3>\n<p>React Query의 <strong>Structural Sharing</strong>은 쿼리 데이터를 업데이트할 때 효율성을 높이기 위한 최적화 기술이다. 이 개념은 객체나 배열의 변경이 최소화될 수 있도록, 동일한 구조를 공유하면서 변경된 부분만 업데이트하는 방식으로 작동한다. 이로 인해 성능이 향상되고, React 컴포넌트의 불필요한 리렌더링을 줄일 수 있다.</p>\n<p>Structural Sharing은 데이터의 특정 부분만 변경되었을 때, 변경되지 않은 부분은 기존의 구조를 유지하면서, 변경된 부분만 새로운 구조로 만들어주는 방식으로 작동한다. 이를 통해 동일한 구조를 최대한 공유하게 하여 불필요한 메모리 사용과 객체 생성, 그리고 성능 저하를 방지한다.</p>\n<p>예시)</p>\n<p>다음과 같이 데이터가 있을 때</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Learn React\"</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"active\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Learn React Query\"</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"todo\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>첫 번째 todo의 status만 변경되었다면</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">[\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>  { \"id\": 1, \"name\": \"Learn React\", \"status\": \"active\" },\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>  { \"id\": 1, \"name\": \"Learn React\", \"status\": \"done\" },\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   { \"id\": 2, \"name\": \"Learn React Query\", \"status\": \"todo\" }\n</span>]</code></pre></div>\n<p>다음과 같이 구조적 공유를 활용할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ✅ will only re-render if _something_ within todo with id:2 changes</span>\n<span class=\"token comment\">// thanks to structural sharing</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTodo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<ul>\n<li>구조적 공유는 json-serializable 데이터에만 동작한다.</li>\n<li>아주 큰 데이터셋의 경우 구조적 공유가 병목이 될 수 있으므로 <code class=\"language-text\">structuralSharing: false</code> 옵션을 켜두는 것이 좋다.</li>\n</ul>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://tkdodo.eu/blog/react-query-render-optimizations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tkdodo.eu/blog/react-query-render-optimizations</a></p>\n<h3 id=\"타입스크립트-프로젝트에서-그냥-typests-파일을-정의하는-것과-dts-파일을-정의하는-것의-차이\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-%EA%B7%B8%EB%83%A5-typests-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EB%8A%94-%EA%B2%83%EA%B3%BC-dts-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"타입스크립트 프로젝트에서 그냥 typests 파일을 정의하는 것과 dts 파일을 정의하는 것의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 프로젝트에서 그냥 types.ts 파일을 정의하는 것과 <code class=\"language-text\">.d.ts</code> 파일을 정의하는 것의 차이</h3>\n<ul>\n<li>\n<p><strong><code class=\"language-text\">.d.ts</code> 파일의 주요 특징과 사용 용도:</strong></p>\n<ol>\n<li><strong>외부 모듈의 타입 정의</strong>:\n<ul>\n<li><code class=\"language-text\">.d.ts</code> 파일은 주로 JavaScript로 작성된 외부 모듈의 타입을 정의하는 데 사용된다. 예를 들어, npm에서 다운로드한 JavaScript 라이브러리에 대한 타입 정보를 제공할 때 사용된다. 이 경우, 라이브러리는 실제 구현을 포함하지 않고 타입만 선언한다.</li>\n<li>예를 들어, <code class=\"language-text\">@types/lodash</code>와 같은 패키지가 <code class=\"language-text\">.d.ts</code> 파일을 제공하여 Lodash 라이브러리의 타입 정보를 TypeScript 프로젝트에서 사용할 수 있게 한다.</li>\n</ul>\n</li>\n<li><strong>타입 선언만 포함</strong>:\n<ul>\n<li><code class=\"language-text\">.d.ts</code> 파일은 실제 코드 구현이 없고 오직 타입 선언만 포함된다. 이 파일은 타입스크립트 컴파일러가 타입 정보를 이해하도록 도와주며, 컴파일된 JavaScript 코드에는 포함되지 않는다.</li>\n</ul>\n</li>\n<li><strong>프로젝트의 타입 안전성을 높임</strong>:\n<ul>\n<li>대규모 프로젝트에서 다른 팀원이 작성한 코드나 외부 라이브러리의 타입을 명시적으로 정의하여, TypeScript의 타입 검사 기능을 활용할 수 있다.</li>\n</ul>\n</li>\n<li><strong>Gradual Migration</strong>:\n<ul>\n<li>기존의 JavaScript 프로젝트를 TypeScript로 점진적으로 전환할 때 유용하다. 기존 코드베이스에 대한 타입 정보를 <code class=\"language-text\">.d.ts</code> 파일로 제공함으로써 점진적인 마이그레이션이 가능하다.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p><strong><code class=\"language-text\">.ts</code> 파일에서 타입 정의의 주요 특징과 사용 용도:</strong></p>\n<ol>\n<li><strong>모듈과 타입 선언</strong>:\n<ul>\n<li><code class=\"language-text\">.ts</code> 파일은 TypeScript 코드와 타입 정의를 모두 포함할 수 있다. 이는 함수의 구현과 타입 정보를 모두 포함할 수 있어, 코드와 타입 선언이 함께 유지된다.</li>\n<li>예를 들어, <code class=\"language-text\">type.ts</code> 파일에서 타입과 함수 구현을 모두 정의할 수 있다.</li>\n</ul>\n</li>\n<li><strong>코드 구현 포함 가능</strong>:\n<ul>\n<li><code class=\"language-text\">.ts</code> 파일에는 실제 코드 구현이 포함될 수 있다. 따라서, 타입과 함께 실제 코드 로직을 작성할 수 있다.</li>\n</ul>\n</li>\n<li><strong>모듈 내 타입 정의</strong>:\n<ul>\n<li>모듈 내부에서 사용할 타입 정의를 <code class=\"language-text\">type.ts</code> 파일로 관리하여, 해당 모듈 내에서만 사용되는 타입을 정의할 수 있다.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"lodash-flow\" style=\"position:relative;\"><a href=\"#lodash-flow\" aria-label=\"lodash flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lodash <code class=\"language-text\">flow</code></h3>\n<p>주어진 함수에 대해 <code class=\"language-text\">this</code> 바인딩을 추가한 결과를 리턴하여 다음 함수를 연속적으로 실행한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">var</span> addSquare <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">flow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">,</span> square<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addSquare</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 9</span></code></pre></div>\n<p>구현 코드가 이것밖에 안 된다!</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">flow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>funcs<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> funcs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> funcs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected a function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> length <span class=\"token operator\">?</span> funcs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> funcs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> flow<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"swr-철학\" style=\"position:relative;\"><a href=\"#swr-%EC%B2%A0%ED%95%99\" aria-label=\"swr 철학 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>swr 철학</h3>\n<ul>\n<li>SWR을 사용하면 컴포넌트는 <strong>지속적</strong>이며 <strong>자동으로</strong> 데이터 업데이트 스트림을 받게 된다.</li>\n</ul>\n<p>그리고 UI는 항상 <strong>빠르고 반응적</strong>이다.</p>\n<ul>\n<li>\n<p>데이터는 데이터가 필요한 컴포넌트로 <strong>범위가 제한</strong>되었으며 모든 컴포넌트는 서로에게 <strong>독립적</strong>이다.</p>\n</li>\n<li>\n<p>동일한 SWR 키를 사용하며 그 요청이 자동으로 <strong>중복 제거</strong>, <strong>캐시</strong>, <strong>공유</strong>되므로, 단 <strong>한 번의 요청</strong>만 API로 전송된다.</p>\n</li>\n<li>\n<p>SWR은 캐시된 데이터를 빠르게 반환하면서, 백그라운드에서 데이터를 새로 가져와 최신 상태로 유지하는 전략을 기반으로 한다. <code class=\"language-text\">Stale-While-Revalidate</code>는 SWR의 핵심 개념으로, 캐시된 데이터를 먼저 제공하고, 그 후에 새로운 데이터를 가져와 업데이트한다.</p>\n</li>\n</ul>\n<h3 id=\"swr의-2가지-mutate\" style=\"position:relative;\"><a href=\"#swr%EC%9D%98-2%EA%B0%80%EC%A7%80-mutate\" aria-label=\"swr의 2가지 mutate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>swr의 2가지 mutate</h3>\n<p>swr의 뮤테이션은 react-query의 mutation과 다르다. <code class=\"language-text\">useSWR()</code>을 통해 받아온 데이터를 클라이언트 사이드에서 변형시켜 업데이트해 주는 개념이다.</p>\n<p>cf) SWR은 데이터를 받아오는 것에 중점을 두고 있었기 때문에 원래 mutation hook이 존재하지 않았었다.</p>\n<ul>\n<li>\n<p><strong>bound mutate</strong></p>\n<ul>\n<li><code class=\"language-text\">useSWR</code> hook과 함께 사용되는 함수로, 변경한 데이터를 갱신하고 필요에 따라 <code class=\"language-text\">options</code> 값을 전달하여 재검증(revalidate) 여부를 설정할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>global mutate</strong></p>\n<ul>\n<li><code class=\"language-text\">useSWR</code> hook과는 별개로 독립적으로 사용할 수 있으며, 특정 데이터를 갱신하고 싶을 때 직접 사용이 가능하다. <code class=\"language-text\">useSWRConfig</code> hook을 사용하거나 전역으로 가져와서 사용한다.</li>\n<li>독립적으로 사용되기 때문에 해당 키에 대한 캐시를 업데이트하거나 재검증 트리거를 하지 않는다. 즉 동일한 키를 가진 다른 컴포넌트에서 사용중인 <code class=\"language-text\">useSWR</code> hook에 영향을 미치지 않는다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://swr.vercel.app/ko/docs/mutation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://swr.vercel.app/ko/docs/mutation</a></li>\n<li><a href=\"https://velog.io/@guen9310/React-useSWR%EC%9D%98-mutate-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@guen9310/React-useSWR의-mutate-사용해보기</a></li>\n</ul>\n<h3 id=\"swr의-useswrsubscription\" style=\"position:relative;\"><a href=\"#swr%EC%9D%98-useswrsubscription\" aria-label=\"swr의 useswrsubscription permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>swr의 <code class=\"language-text\">useSWRSubscription</code></h3>\n<p><code class=\"language-text\">useSWRSubscription</code>은 SWR을 사용하여 실시간 데이터를 구독할 수 있는 훅이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token generic-function\"><span class=\"token function\">useSWRSubscription</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Data<span class=\"token punctuation\">,</span> Error<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> Key<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">subscribe</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> Key<span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Error <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> Data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Data<span class=\"token punctuation\">,</span> error<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Error <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 훅은 실시간 데이터를 구독하고, 가장 최근에 수신된 데이터와 발생한 에러를 반환한다. 훅은 새 이벤트가 수신되면 반환된 데이터를 자동으로 업데이트한다.</p>\n<blockquote>\n<p><code class=\"language-text\">useSWRSubscription</code> hook을 이용하여 real-time data에 지속적인 연결을 유지할 수 있다.\nex) Firestore 및 WebSocket 데이터 구독</p>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://swr.vercel.app/ko/docs/subscription\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://swr.vercel.app/ko/docs/subscription</a></p>\n<h3 id=\"react-query-vs-swr\" style=\"position:relative;\"><a href=\"#react-query-vs-swr\" aria-label=\"react query vs swr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query vs swr</h3>\n<ul>\n<li>\n<p><strong>SWR</strong>은 먼저 캐시에서 데이터를 반환한 다음, 서버에 데이터를 가져오는 요청을 보내고, 마지막으로 최신 데이터를 제공하는 전략이다.</p>\n</li>\n<li>\n<p><strong>React Query</strong>는 React 어플리케이션에 서버 상태를 가져오고, 캐싱하고, 동기화하고, 업데이트하는 것을 쉽게 해 준다.</p>\n</li>\n</ul>\n<p>→ React Query는 보다 전반적인 서버 상태 관리에 중점을 두고 있고, SWR은 사용자 경험을 위해 빠르고 최신 상태의 데이터를 제공하는 데 중점을 둔다.</p>\n<h3 id=\"shebang--hashbang\" style=\"position:relative;\"><a href=\"#shebang--hashbang\" aria-label=\"shebang  hashbang permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shebang / hashbang</h3>\n<p>스크립트의 첫줄에 존재하는 !# 로 시작하는 문자 시퀀스로, 텍스트 기반 파일을 실행 파일처럼 실행했을 때 어떤 인터프리터를 토대로 이 스크립트를 실행할 것인지를 지시하는 ‘인터프리터 지시자 (interpreter directive)’ 역할을 한다.</p>\n<p>즉 이 파일을 package.json의 bin 속성의 값으로 넣어준다면, 이 파일을 binary executable로 취급할 것이고, 해당 명령어를 실행했을 때 이 파일의 첫 줄을 보고 어떤 인터프리터로 실행할지 결정하게 된다.</p>\n<p>이때 첫 줄에 hashbang 뒤에 지정하는 인터프리터는 실제 해당 인터프리터의 executable이 존재하는 위치를 지정하게 된다.</p>\n<p>ex)</p>\n<ul>\n<li><code class=\"language-text\">#!/bin/bash</code> (bash로 실행)</li>\n<li><code class=\"language-text\">#!/usr/bin/env node</code> (usr/bin/env에서 실행가능한 node로 실행, 이 파일의 스크립트는 js로 분석)</li>\n</ul>\n<h2 id=\"이것저것-모음집\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83-%EB%AA%A8%EC%9D%8C%EC%A7%91\" aria-label=\"이것저것 모음집 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것 모음집</h2>\n<hr>\n<ul>\n<li><code class=\"language-text\">Object.hasOwn()</code> - 객체에 자체 속성으로 지정된 속성이 있는지 여부 (<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>제목 요소들을 묶어주는 HTML 요소 <code class=\"language-text\">&lt;hgroup></code> - h1~h6 태그 + 1개 이상의 p요소로 이루어져 있다. (<a href=\"https://sorto.me/docs/Web/HTML/Element/hgroup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>보일러플레이트(boilerplate)의 어원 - 보일러를 제작할 때 사용된 두꺼운 강철판. 당시 보일러 제조업체들은 보일러의 이름, 제조사, 일련 번호 등의 정보를 강철판에 새겨 이 강철판을 보일러에 부착하였다. 단단하고 변하지 않는 특징 때문에 법적 문서나 출판물에서 반복적으로 사용되는 고정된 문구를 가리키게 되기도 한다.</li>\n</ul>\n<h2 id=\"기타공유\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80%EA%B3%B5%EC%9C%A0\" aria-label=\"기타공유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타공유</h2>\n<hr>\n<h3 id=\"rolldown\" style=\"position:relative;\"><a href=\"#rolldown\" aria-label=\"rolldown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rolldown</h3>\n<p>Rust로 쓰인 JS 번들러로, Vite에 적용하기 위해서 개발중이다.</p>\n<p>현재는 dev에서는 esbuild, prod에서는 rollup을 사용한다.</p>\n<ul>\n<li>esbuild는 매우 빠르지만 코드 스플리팅 제약 때문에 전체 앱 번들링에 적합하지 않음</li>\n<li>rollup은 성숙하고 검증된 앱 번들러지만 속도가 느리다.</li>\n</ul>\n<p>esbuild와 rollup의 미묘한 차이로 인해서 개발과 운영 결과물 사이의 차이가 존재한다.</p>\n<p>그래서 네이티브 언어 수준의 성능을 가지면서 rollup의 인터페이스와 호환되는, 큰 스케일의 앱에 적합한 번들러를 만들고자 하는 것이 목표</p>\n<p><strong>Ref</strong> <a href=\"https://rolldown.rs/about\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://rolldown.rs/about</a></p>\n<h3 id=\"css-마참내-세로-중앙-정렬-추가\" style=\"position:relative;\"><a href=\"#css-%EB%A7%88%EC%B0%B8%EB%82%B4-%EC%84%B8%EB%A1%9C-%EC%A4%91%EC%95%99-%EC%A0%95%EB%A0%AC-%EC%B6%94%EA%B0%80\" aria-label=\"css 마참내 세로 중앙 정렬 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS, 마참내 ‘세로 중앙 정렬’ 추가</h3>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>code</span><span class=\"token punctuation\">></span></span>align-content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>code</span><span class=\"token punctuation\">></span></span> just works!  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  </code></pre></div>\n<p>댓글은 흥분의 도가니…</p>\n<p><strong>Ref</strong> <a href=\"https://news.hada.io/topic?id=16586\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://news.hada.io/topic?id=16586</a></p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<hr>\n<p>9월까지 폭염 실화냐…</p>\n<p>그래도 이른 저녁 바람 살랑살랑 야외공연까지 잘 마치고, 열심히 돌아댕긴 9월 첫주 주말 💨</p>","timeToRead":13,"frontmatter":{"title":"9월 첫주차 기록","date":"September 07, 2024","description":"가을 맞냐?","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2024-9-week-1/","previous":null,"next":{"fields":{"slug":"/weekly/2024-8-week-5/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"August 31, 2024","description":"음악은 여름을 달린다 🎵","title":"8월 5주차 기록","tags":["weekly"]}},"previousInSameTag":null,"nextInSameTag":{"fields":{"slug":"/weekly/2024-8-week-5/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"August 31, 2024","description":"음악은 여름을 달린다 🎵","title":"8월 5주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}