{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-4-week-4/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"ed21d011-c58f-59c7-a00a-287a4e8fc15a","excerpt":"근데 이제 여름 배워가기 CSS list-style-position ::marker CSS 의사요소를 요소 내부에 둘지, 외부에 둘지 정할 수 있는 속성으로, display: list-item 속성이 있는 요소에 적용된다.  속성을  으로 줄 경우 마커(list-style-type…","html":"<p>근데 이제 여름</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"css-list-style-position\" style=\"position:relative;\"><a href=\"#css-list-style-position\" aria-label=\"css list style position permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS list-style-position</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::marker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">::marker</a> CSS 의사요소를 요소 내부에 둘지, 외부에 둘지 정할 수 있는 속성으로, <a href=\"https://html.spec.whatwg.org/multipage/rendering.html#lists\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">display: list-item 속성이 있는 요소</a>에 적용된다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.element1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">list-style-position</span><span class=\"token punctuation\">:</span> inside<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.element2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">list-style-position</span><span class=\"token punctuation\">:</span> outside<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">list-style-position</code> 속성을 <code class=\"language-text\">inside</code> 으로 줄 경우 마커(list-style-type) 와 list-item 콘텐츠 사이 갭이 생기는데, 마커의 값이 Non-keyword(disc, circle, square 등)일 경우 간격을 직접 컨트롤 할 수 없다. 마커의 값이 keyword 인 경우 <code class=\"language-text\">padding-inline-start</code> 와 같은 속성으로 조절할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">li</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> disc inside<span class=\"token punctuation\">;</span>\n\n  <span class=\"token selector\">&amp;:before</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -0.5em<span class=\"token punctuation\">;</span> // 마커와 콘텐츠 사이 간격을 좁힘\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"react-query\" style=\"position:relative;\"><a href=\"#react-query\" aria-label=\"react query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query</h3>\n<p>react query 사용 시 SSR 서버에서 데이터 prefetch 후 컴포넌트에서 <code class=\"language-text\">useQuery</code>로 캐싱된 데이터를 가져올 때, 첫 로드 시에 저장된 캐시값이 없어 <code class=\"language-text\">undefined</code>가 리턴되는 경우가 있다. 이때 화면이 깜빡이는 현상이 발생한다.</p>\n<p>이는 SSR 서버에서 fetching된 데이터가 클라이언트에 값이 저장되어있지 않아서 발생하는 문제로, react-query에서 제안하는 2가지 해결 방법이 있다.</p>\n<p>첫 번째는 <code class=\"language-text\">initialData</code>를 활용하는 것이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Posts</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"posts\"</span><span class=\"token punctuation\">,</span> getPosts<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> initialData<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>posts <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러나 이 역시 마찬가지로 <code class=\"language-text\">useQuery</code> 초기 로드 시 data에 <code class=\"language-text\">undefined</code>가 리턴되어 해결되지 않는다.</p>\n<p>두 번째는 서버에서의 캐싱 쿼리를 유지하기 위해 <code class=\"language-text\">dehydrate</code>를 활용하는 방법이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">prefetchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"posts\"</span><span class=\"token punctuation\">,</span> getPosts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      dehydratedState<span class=\"token operator\">:</span> <span class=\"token function\">dehydrate</span><span class=\"token punctuation\">(</span>queryClient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>서버에서 prefetching한 정보가 클라이언트 초기 로드 시에도 캐시에 남아있게 되어, <code class=\"language-text\">undefined</code>가 반환되는 일 없이 올바른 data로 렌더링을 할 수 있다.</p>\n<h3 id=\"중첩조건문-가드문으로-변경하기\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%B2%A9%EC%A1%B0%EA%B1%B4%EB%AC%B8-%EA%B0%80%EB%93%9C%EB%AC%B8%EC%9C%BC%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" aria-label=\"중첩조건문 가드문으로 변경하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩조건문 가드문으로 변경하기</h3>\n<ul>\n<li>참인 경우와 거짓인 경우 모두 정상 동작으로 이어지는 형태라면 if/else 절을 사용한다.\n<ul>\n<li>if절과 else절에 똑같은 무게를 두어, 코드를 읽는 이에게 양 갈래가 똑같이 중요하다는 뜻을 전달한다.</li>\n</ul>\n</li>\n<li>한쪽만 정상이라면 비정상 조건을 if에서 검사한 다음, 조건이 참이면(비정상이면) 함수에서 빠져나온다.\n<ul>\n<li>이 형태를 흔히 가드문(gaurd clause)이라고 한다. 중첩 조건문을 가드문으로 바꾸는 핵심은 의도를 부각하는 데 있다.</li>\n<li>가드문은 “이건 이 함수의 핵심이 아니다. 이 일이 일어나면 무언가 조치를 취한 후 함수에서 빠져나온다“라고 이야기한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"blob-객체\" style=\"position:relative;\"><a href=\"#blob-%EA%B0%9D%EC%B2%B4\" aria-label=\"blob 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Blob 객체</h3>\n<p><code class=\"language-text\">Blob</code>은 파일류의 불변하는 미가공 데이터를 나타낸다.</p>\n<p>사용자 시스템의 파일을 지원하기 위해 <code class=\"language-text\">Blob</code> 인터페이스를 상속해 기능을 확장한 것이 <code class=\"language-text\">File</code> 객체다. <code class=\"language-text\">Blob</code>에서 데이터를 읽는 방법 중 하나로 <code class=\"language-text\">FileReader</code>를 사용할 수 있다.</p>\n<h3 id=\"file-객체의-실제-데이터에-접근하는-방법\" style=\"position:relative;\"><a href=\"#file-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%8B%A4%EC%A0%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"file 객체의 실제 데이터에 접근하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File 객체의 실제 데이터에 접근하는 방법</h3>\n<ul>\n<li>Url로 접근하는 방법\n<ul>\n<li><code class=\"language-text\">createObjectURL()</code> - 인자로 <code class=\"language-text\">File</code> 객체를 받으며, 해당 파일의 고유 URL 정보를 생성하고 반환한다.</li>\n<li><code class=\"language-text\">revokeObjectURL()</code> - 메모리 누수를 막기 위해 직접 해체해주어야 한다.</li>\n</ul>\n</li>\n<li>FileReader로 접근하는 방법\n<ul>\n<li><code class=\"language-text\">FileReader.readAsDataURL()</code> - 파일을 읽고, <code class=\"language-text\">result</code> 속성에 파일을 나타내는 URL을 저장한다.</li>\n<li>비동기적으로 동작하기 때문에, 이벤트 핸들러를 등록해 사용한다.\n<ul>\n<li><code class=\"language-text\">FileReader.onload</code> - 읽기 완료 성공 시 동작</li>\n<li><code class=\"language-text\">FileReader.onloadend</code> - 성공, 실패와 무관하게 읽기 완료 시 동작</li>\n<li><code class=\"language-text\">FileReader.onerror</code> - 읽는 도중 오류 발생 시 동작</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"useimperativehandle\" style=\"position:relative;\"><a href=\"#useimperativehandle\" aria-label=\"useimperativehandle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">useImperativeHandle</code></h3>\n<p><code class=\"language-text\">useImperativeHandle</code>은 <code class=\"language-text\">ref</code>를 사용할 때 부모 컴포넌트에 노출되는 인스턴스 값을 사용자화(customizes)한다. <code class=\"language-text\">useImperativeHandle</code>을 사용하여 자식 컴포넌트에서 특정 인스턴스를 만들어 부모 컴포넌트로 노출시킬 수 있다. <code class=\"language-text\">forwardRef</code>와 함께 사용한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyInput</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">focus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nFancyInput <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>FancyInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예시에서 <code class=\"language-text\">&lt;FancyInput ref={inputRef} /></code>를 렌더링한 부모 컴포넌트는 <code class=\"language-text\">inputRef.current.focus()</code>를 호출할 수 있다.</p>\n<p><strong>Ref</strong> <a href=\"https://ko.reactjs.org/docs/hooks-reference.html#useimperativehandle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.reactjs.org/docs/hooks-reference.html#useimperativehandle</a></p>\n<h3 id=\"typescript-\" style=\"position:relative;\"><a href=\"#typescript-\" aria-label=\"typescript  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript <code class=\"language-text\">!</code></h3>\n<p>TypeScript에서 <code class=\"language-text\">!</code>는 어설션 연산자(Non-null assertion operator), 또는 확정 할당 어설션(Definite Assignment Assertions)으로 사용된다.</p>\n<p>어설션 연산자는 <strong>피연산자가 null이 아니라고</strong> 컴파일러에게 전달, 일시적으로 null 제약조건을 완화한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">nonNullAssertionOperator</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> e<span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>확정 할당 어선셜은 <strong>이 변수에는 값이 무조건 할당되어 있다고</strong> 컴파일러에게 전달, 값이 없어도 사용할 수 있게 한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> notNull<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notNull<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://velog.io/@kbm940526/Typescript-Non-null-assertion-operator-and-Definite-Assignment-Assertions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@kbm940526/Typescript-Non-null-assertion-operator-and-Definite-Assignment-Assertions</a></p>\n<h3 id=\"useinfinitequery-hook\" style=\"position:relative;\"><a href=\"#useinfinitequery-hook\" aria-label=\"useinfinitequery hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useInfiniteQuery hook</h3>\n<p>React Query의 <code class=\"language-text\">useInfiniteQuery</code> hook을 사용하면, page state를 따로 클라이언트 코드에서 관리할 필요가 없다.</p>\n<p><code class=\"language-text\">pageParams</code>를 정의해놓으면, <code class=\"language-text\">fetchNextPage()</code>를 호출함으로써 API 호출 시 쿼리에 적절한 page 값을 삽입할 수 있다.</p>\n<p>검색기능 등 page를 0으로 초기화해야될 경우에도, query key의 의존성 배열에 검색어를 넣으면, 검색어가 변경될 때마다 page가 0으로 초기화되고 다시 카운팅되기 시작한다.</p>\n<h3 id=\"prop으로-ref-넘겨주기\" style=\"position:relative;\"><a href=\"#prop%EC%9C%BC%EB%A1%9C-ref-%EB%84%98%EA%B2%A8%EC%A3%BC%EA%B8%B0\" aria-label=\"prop으로 ref 넘겨주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>prop으로 ref 넘겨주기?</h3>\n<p>부모 컴포넌트에서 자식 컴포넌트로 ref를 넘길 때, custom prop으로 넘겨주는 방법</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> innerRef <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>innerRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 <code class=\"language-text\">forwardRef</code>를 사용하는 방법이 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">Component <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">fowardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">fowardRef</code>는 부모 컴포넌트에서 <code class=\"language-text\">input</code>, <code class=\"language-text\">form</code> 등을 다루는 비제어 컴포넌트에 접근하기 위해 나온 것이다. 따라서 명시적으로 비제어 컴포넌트를 다룰 때에는 <code class=\"language-text\">forwardRef</code>를, 일반 제어 컴포넌트(함수 컴포넌트)를 다룰 때에는 prop으로 구분지어 다뤄주는 것이 좋다.</p>\n<h3 id=\"dompurify\" style=\"position:relative;\"><a href=\"#dompurify\" aria-label=\"dompurify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOMPurify</h3>\n<p>XXS 공격을 방지하기 위해 HTML string에서 위험성 있는 코드를 제거하는 도구를 sanitizer라고한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">DOMPurify<span class=\"token punctuation\">.</span><span class=\"token function\">sanitizer</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p>sample&lt;/p>&lt;script>alert('XSS공격')&lt;/script></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드의 실행 결과는 <code class=\"language-text\">&lt;p>sample&lt;/p></code>가 된다. 위험성 있는 <code class=\"language-text\">script</code> 태그를 삭제해준 것이다.</p>\n<p><code class=\"language-text\">innerHTML</code> 대신 리액트의 <code class=\"language-text\">dangerouslySetInnerHTML</code>을 사용하고, <code class=\"language-text\">DOMPurify.sanitizer</code>를 거친 문자열을 넣으면 조금 더 안전하게 코드를 작성할 수 있다.</p>\n<p>서버사이드에서 사용하기 위한 <code class=\"language-text\">isomorphic-dompurify</code>라는 라이브러리도 있다. next를 사용한다면 서버에서 <code class=\"language-text\">sanitizer</code>를 한 문자열을 클라이언트에 전달해주는 방법도 좋다.</p>\n<h3 id=\"dialog-vs-toast-vs-snackbar\" style=\"position:relative;\"><a href=\"#dialog-vs-toast-vs-snackbar\" aria-label=\"dialog vs toast vs snackbar permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dialog vs Toast vs Snackbar</h3>\n<ul>\n<li>\n<p>Dialog</p>\n<ul>\n<li>적은 양의 정보와 액션버튼으로 구성된다.</li>\n<li>이용자로부터 즉각적인 응답이 필요한 경우 적합하다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Dialog는 백드롭을 깔아서 다른 동작을 아예 막아버린다는 점이 다른 두 개, 특히 Snackbar와 다르다. 나만 보게 만드는 UX 패턴을 “모달리티“(modality)라고 한다.</p>\n</blockquote>\n<ul>\n<li>\n<p>Toast</p>\n<ul>\n<li>동작에 대한 간단한 피드백을 텍스트 형태로 제공하는 것이다.</li>\n<li>이용자를 방해하지 않고 메시지를 표시하고 시간이 지나면 자동으로 사라진다.</li>\n<li>간단하고 단순한 정보를 보여주는 데 적합하다.</li>\n</ul>\n</li>\n<li>\n<p>Snackbar</p>\n<ul>\n<li>메시지를 통해 작업에 대한 간단한 피드백을 제공한다.</li>\n<li>이용자를 방해하지 않고, 시간이 지나면 자동으로 사라진다는 점에서 Toast와 비슷하다.</li>\n<li>단일 텍스트 액션을 통해 이용자와 상호작용을 할 수 있다.</li>\n<li>즉, Dialog보다 이용자에게 주는 영향은 적고, Toast보다는 더 커스텀하게 이용할 수 있는 것이 Snackbar이다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Dialog와 Toast 그 사이의 모든 경우에는 Snackbar를 이용하기 적합하다.</p>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://brunch.co.kr/@oemilk/91\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://brunch.co.kr/@oemilk/91</a></p>\n<h3 id=\"getserversideprops의-props가-undefined일-때\" style=\"position:relative;\"><a href=\"#getserversideprops%EC%9D%98-props%EA%B0%80-undefined%EC%9D%BC-%EB%95%8C\" aria-label=\"getserversideprops의 props가 undefined일 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getServerSideProps의 props가 undefined일 때</h3>\n<p>Next.js의 getServerSideProps에서 props 의 값으로 undefined가 있으면 JSON으로 직렬화되지 않아 에러가 발생할 수 있다.</p>\n<p>React Query의 <code class=\"language-text\">prefetchInfiniteQuery</code>를 사용할 경우 이전 페이지가 없기 때문에 <code class=\"language-text\">pageParams</code>는 0이 아닌 undefined로 던져진다. 이 영향으로 dehydrate(queryClient)의 결과물에 undefined가 포함되고, 이를 props로 넘기려 할 때 Next.js에서 undefined를 직렬화하지 못해 에러가 발생한다.</p>\n<p>이때는 stringify와 serialize 작업을 통해 undefined를 제거한 데이터를 props로 넘겨줘야 한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getServerSideProps<span class=\"token operator\">:</span> <span class=\"token function-variable function\">GetServerSideProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">prefetchInfiniteQuery</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// pageParams 가 undefined로 정의될 때, undefined를 제거하기 위한 작업</span>\n      dehydratedState<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token function\">dehydrate</span><span class=\"token punctuation\">(</span>queryClient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"eventnativeeventpath\" style=\"position:relative;\"><a href=\"#eventnativeeventpath\" aria-label=\"eventnativeeventpath permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>event.nativeEvent.path</h3>\n<p><code class=\"language-text\">event.nativeEvent.path</code>로 이벤트 전파 순서를 확인할 수 있다. 이때 <code class=\"language-text\">z-index</code>도 이벤트 전파 순서에 영향을 준다.</p>\n<p><code class=\"language-text\">button</code> > <code class=\"language-text\">div</code> > <code class=\"language-text\">label</code> > <code class=\"language-text\">input(display: none)</code>의 순서로 엘리먼트 계층이 구성되어 있을 때, <code class=\"language-text\">button</code>에서 발생한 이벤트가 <code class=\"language-text\">div</code>에 막혀 <code class=\"language-text\">label</code>까지 도달하지 못하는 경우가 있다. 이때 <code class=\"language-text\">div</code>보다 <code class=\"language-text\">label</code>의 <code class=\"language-text\">z-index</code>를 더 높게하면 <code class=\"language-text\">button</code>의 이벤트가 <code class=\"language-text\">label</code>까지 도달한다.</p>\n<blockquote>\n<p><strong>참고: interactive content</strong>\n유저 인터랙션을 위해 만들어진 컨텐츠로, <code class=\"language-text\">a</code>, <code class=\"language-text\">button</code>, <code class=\"language-text\">input</code> 등이 이에 속한다.</p>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://html.spec.whatwg.org/#interactive-content\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://html.spec.whatwg.org/#interactive-content</a></p>\n<h3 id=\"npm-ci-vs-npm-install\" style=\"position:relative;\"><a href=\"#npm-ci-vs-npm-install\" aria-label=\"npm ci vs npm install permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">npm ci</code> vs <code class=\"language-text\">npm install</code></h3>\n<p><code class=\"language-text\">npm install</code>이 실행되면 패키지를 설치할 때 <code class=\"language-text\">package.json</code>을 읽고 <code class=\"language-text\">package-lock.json</code> 파일도 업데이트한다. 이는 <code class=\"language-text\">package.json</code>과 <code class=\"language-text\">package-lock.json</code>을 수정할 수 있다는 것을 의미한다.</p>\n<p>반면에 <code class=\"language-text\">npm ci</code>는 <code class=\"language-text\">package-lock.json</code>을 기반으로 패키지를 설치하며, 파일들을 수정하지 않는다. 만약에 <code class=\"language-text\">node_modules</code>가 존재하면 먼저 삭제한 뒤에 패키지를 설치한다.(<code class=\"language-text\">ci</code> 는 clean install의 줄임말이다.)</p>\n<h3 id=\"크롬의-audio-자동플레이-정책\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EB%A1%AC%EC%9D%98-audio-%EC%9E%90%EB%8F%99%ED%94%8C%EB%A0%88%EC%9D%B4-%EC%A0%95%EC%B1%85\" aria-label=\"크롬의 audio 자동플레이 정책 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>크롬의 audio 자동플레이 정책</h3>\n<p>크롬 뿐만 아니라 많은 웹브라우저들에는 비디오 및 오디오 자동 플레이 제한이 있다. 이는 사용자들이 인지 못한 채 소리가 나거나 동영상이 재생되는 경우를 막기 위함이다.</p>\n<p>audio가 자동플레이되려면 어떻게 해야 할까?</p>\n<ul>\n<li>유저 입장에서, 음소거 상태이거나 음량이 0이 아니어야 한다.</li>\n<li>유저가 확실히 의도를 가지고 재생을 시켜야 한다. (ex. 버튼 클릭, 탭)</li>\n<li>모바일에서는 홈화면에 추가, 데스크탑에서는 PWA가 설치되어야 한다.</li>\n<li>미디어 참여지수가 높아야 한다. (얼마나 사용자가 컨텐츠를 오래/자주 사용하는가의 비율)</li>\n</ul>\n<p>audio 자동플레이를 위해 공식 문서에서 권장되는 방법은 audio 재생 실패시 audio를 재생하는 버튼을 띄우는 것이다.</p>\n<p>ex) 주문접수페이지에서 소리 알람이 실패하면 <code class=\"language-text\">새로운 주문이 왔습니다!</code>와 같은 다이얼로그를 띄우고, 해당 다이얼로그에서 ‘확인’을 눌러야 소리가 재생되게끔 하는 방법이다.</p>\n<p><strong>Ref</strong> <a href=\"https://developer.chrome.com/blog/autoplay/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.chrome.com/blog/autoplay/</a></p>\n<h3 id=\"getderivedstatefromprops\" style=\"position:relative;\"><a href=\"#getderivedstatefromprops\" aria-label=\"getderivedstatefromprops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getDerivedStateFromProps</h3>\n<p><code class=\"language-text\">getDerivedStateFromProps</code>는 최초 마운트 시와 갱신 시 모두에서 <code class=\"language-text\">render</code> 메서드를 호출하기 직전에 호출된다. state를 갱신하기 위한 객체를 반환하거나, null을 반환하여 아무 것도 갱신하지 않을 수 있다. props 로 받아온 값을 state 에 넣어주고 싶을 때 사용한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getDerivedStateFromProps\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!==</span> prevState<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> nextProps<span class=\"token punctuation\">.</span>color <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러나 state를 끌어오면 코드가 장황해지고, 이로 인하여 컴포넌트를 이해하기 어려워진다. React 팀에서 제안하는 대안들은 다음과 같다.</p>\n<ul>\n<li>props 변화에 대응한 부수 효과를 발생시켜야 한다면 (예를 들어, 데이터 가져오기 또는 애니메이션), <code class=\"language-text\">componentDidUpdate</code> 생명주기를 대신해서 사용한다.</li>\n<li>props가 변화했을 때에만 일부 데이터를 다시 계산 하고 싶다면, Memoization Helper를 대신해서 사용한다.</li>\n<li>props가 변화할 때에 일부 state를 재설정 하고 싶다면, 완전 제어 컴포넌트 또는 key를 사용하는 완전 비제어 컴포넌트로 만들어서 사용한다.</li>\n</ul>\n<p><strong>Ref</strong><a href=\"https://ko.reactjs.org/docs/react-component.html#static-getderivedstatefromprops\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.reactjs.org/docs/react-component.html#static-getderivedstatefromprops</a>\n<a href=\"https://react.vlpt.us/basic/25-lifecycle.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://react.vlpt.us/basic/25-lifecycle.html</a></p>\n<h3 id=\"비밀번호-변경을-90일-주기로-요구하는-이유\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EB%B3%80%EA%B2%BD%EC%9D%84-90%EC%9D%BC-%EC%A3%BC%EA%B8%B0%EB%A1%9C-%EC%9A%94%EA%B5%AC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"비밀번호 변경을 90일 주기로 요구하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비밀번호 변경을 90일 주기로 요구하는 이유</h3>\n<p>OWASP(The Open Web Application Security Project)가 처음 주장했던 내용으로, 옛날에 평균적으로 암호를 뚫는 데 90일정도 소요되었기 때문에 생긴 기준이다.</p>\n<p>그러나 최근에는 90일 기준이 전혀 도움이 되지 않는 구시대적 기준이라는 반대 진영도 있다. 해당 기준이 오늘날의 암호 추측 방해에 전혀 도움이 되지 않으며, 어차피 바꿔봤자 맨 뒤 1을 2로 바꿀 뿐이라는 것을 모두 알고 있기 때문이다!</p>\n<p><strong>Ref</strong> <a href=\"https://www.sans.org/blog/time-for-password-expiration-to-die/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.sans.org/blog/time-for-password-expiration-to-die/</a></p>\n<h3 id=\"리그레이션\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"리그레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리그레이션</h3>\n<ul>\n<li>\n<p>확인테스팅(Confirmation Testing)</p>\n<ul>\n<li>(동의어: Re-Testing; 재테스팅)</li>\n<li>결함이 발견되고 수정된 후에 <strong>원래의 결함이 성공적으로 제거되었는지 확인</strong>하기 위해 다시 테스트 하는 것</li>\n</ul>\n</li>\n<li>\n<p>리그레이션 테스팅(Regression Testing)</p>\n<ul>\n<li>이미 테스트된 프로그램의 테스팅을 반복하는 것</li>\n<li>결함 수정 이후 변경의 결과로 도입되었거나 발견되지 않았던 <strong>또다른 결함을 발견</strong>할 수 있다.</li>\n<li>결함은 테스트 중인 소프트웨어에 존재하거나 다른 관련이 있는 또는 전혀 관련이 없는 소프트웨어 컴포넌트에 존재할 수 있다.</li>\n<li>소프트웨어 또는 환경이 변경되면 리그레이션 테스팅을 수행해야 한다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://cin-dy.tistory.com/33\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cin-dy.tistory.com/33</a></p>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">a</code> 태그의 <code class=\"language-text\">href</code> 속성은 hypertext reference의 약자다. ([에이치 레프]라고 읽는다.)</p>\n</li>\n<li>\n<p>무한스크롤로 구현된 페이지의 경우 추가된 내용만큼의 DOM 노드가 생기기 때문에, 노드가 생길수록 렌더링 시간도 선형적으로 증가하게 된다. 사용자가 보고 있는 부분에서 노출되고 있는 DOM 노드만 그려줌으로써 이런 경우를 해결할 수 있는데, 이를 ‘가상화’라고 한다. <code class=\"language-text\">react-virtualized</code>, <code class=\"language-text\">react-window</code> 등 가상화 라이브러리를 활용하면 무한 스크롤 시 발생하는 DOM 과부하를 방지할 수 있다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">useEffect</code>의 cleanup 함수는 컴포넌트가 마운트 해제되는 때 뿐 아니라 컴포넌트가 렌더링이 실행될 때마다 실행된다. React가 다음 차례의 effect를 실행하기 전에 이전의 렌더링에서 파생된 effect를 정리하는 이유가 바로 이 때문이다. (<a href=\"https://ko.reactjs.org/docs/hooks-effect.html#explanation-why-effects-run-on-each-update\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n</li>\n<li>\n<p><code class=\"language-text\">git switch c [브랜치명]</code> - <code class=\"language-text\">git checkout -b</code>와 같이 새로운 브랜치를 만들고 해당 브랜치로 이동한다.</p>\n</li>\n<li>\n<p><strong>스키마를 만든다</strong>는 건 어떤 <strong>알 수 없는 타입의 값과 대조를 해보겠다</strong>는 선언이다. 주로 런타임에 들어올 API 응답값과의 대조를 의미한다. assertion에 사용하지 않는다면 interface/type으로 선언하는 것이 좋다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">&lt;input type=\"file\"/></code>에서 파일 확장자 제한하는 방법</p>\n<ul>\n<li>이미지만 받기 <code class=\"language-text\">\"accept=\"image/*\"</code></li>\n<li>json만 받기 <code class=\"language-text\">\"accept=\"application/JSON\"</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@types/react</code> 18ver에서 <code class=\"language-text\">React.VFC</code>가 deprecated되었다. 때문에 <code class=\"language-text\">children</code>이 필요하다면 VFC가 나오기 이전처럼 <code class=\"language-text\">FC&lt;PropsWithChildren&lt;Props>></code>로 타입을 선언해줘야 한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">.git/hooks/prepare-commit-msg</code>로 커밋메세지를 원하는대로 작성할 수 있다. (<a href=\"https://betterprogramming.pub/how-to-automatically-add-the-ticket-number-in-git-commit-message-bda5426ded05\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a></p>\n</li>\n<li>\n<p>인덱스 시그니처를 사용할 때, key 값의 의미를 명확하게 담아내면 좋다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Bad</span>\n<span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> DisplayedProduct <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Good</span>\n<span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>productId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> DisplayedProduct <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Node.js 18 버전에서는 <code class=\"language-text\">fetch</code>와 <code class=\"language-text\">test</code>가 도입되었다.</p>\n</li>\n<li>\n<p>PC의 <code class=\"language-text\">mouseEnter()</code>, <code class=\"language-text\">mouseLeave()</code> 이벤트에 대응되는 모바일 이벤트는 <code class=\"language-text\">onTouchStart()</code>, <code class=\"language-text\">onTouchEnd()</code>다.</p>\n</li>\n<li>\n<p>JavaScript에서 객체가 비었는지 확인하는 방법</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<hr>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<h3 id=\"react-hook-quiz\" style=\"position:relative;\"><a href=\"#react-hook-quiz\" aria-label=\"react hook quiz permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Hook Quiz</h3>\n<p><a href=\"https://docs.google.com/forms/d/e/1FAIpQLSdAG7QtzNT_-rl6j1bqJpJaq-5ZaLR_hnWUGvtVCR4vD5O_sA/viewform\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기</a>서 풀어볼 수 있다. <del>역시 난 쪼렙이었다.</del></p>\n<h3 id=\"nodejs-18\" style=\"position:relative;\"><a href=\"#nodejs-18\" aria-label=\"nodejs 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js 18</h3>\n<p>다음 피쳐들이 새롭게 포함되었다! 원래 없었다니. ㅋㅋㅋ</p>\n<ul>\n<li>fetch (experimental)</li>\n<li>Web Streams API (experimental)</li>\n<li>기타 Global API\n<ul>\n<li>Blob</li>\n<li>BroadcastChannel</li>\n</ul>\n</li>\n<li>Test runner module (experimental)</li>\n</ul>\n<p>새로운 API 말고도 향상된 부분들이 많다.</p>\n<ul>\n<li>Toolchain and Compiler Upgrades</li>\n<li>Build-time user-land snapshot (experimental)</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://nodejs.org/en/blog/announcements/v18-release-announce/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nodejs.org/en/blog/announcements/v18-release-announce/</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>무사히 팀원 분들을 만났다! 모두 오랜만의 외출(?)에 차려입은 모습들을 보니 느낌이 새삼 달랐다. 주 1~2회 정도는 사무실 나가는 것도 좋을 것 같다. 그래서 집 와서 노트북 들고다닐 가방을 새로 장만했다. 사무실에 둘 키보드도 새로 샀다. (???)</p>\n<p>QA는 아직도 끝나지 않는다. QA해주시는 분들 정말 대단한 것 같다. 어떻게 그런 것까지 잡아내는지… 여기저기 급하게 고치면서 또 다른 버그들을 남겨두는 것 같아서 죄송하다 ㅠ 다음주에 무사히 배포가 나가면 좋겠다.</p>\n<p>주말에는 서울숲에 다녀왔다. 섬세이 테라리움이라는 체험전시도 갔다왔다. 와! 사람 진짜 많았다. 무슨 퇴근시간 강남만큼 많았다. 서울숲엔 튤립도 폈는데, 사실 슬슬 지고 있었다. 튤립은 원래 5월에 핀다는데, 진짜 기상이변이다.</p>\n<p>벌써 덥다. 막 아주 더운 건 아닌데, 이번 여름 큰일났구나, 느껴진다.</p>","timeToRead":14,"frontmatter":{"title":"4월 4주차 기록","date":"April 24, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-4-week-4/","previous":{"fields":{"slug":"/refactoring/refactoring-10-1/","langKey":"en","directoryName":"refactoring"},"frontmatter":{"date":"April 26, 2022","description":null,"title":"리팩터링 10장 - 1","tags":["refactoring"]}},"next":{"fields":{"slug":"/weekly/2022-4-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"April 15, 2022","description":"weekly-i-learned","title":"4월 3주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-4-week-5/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"April 29, 2022","description":"weekly-i-learned","title":"4월 5주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-4-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"April 15, 2022","description":"weekly-i-learned","title":"4월 3주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}