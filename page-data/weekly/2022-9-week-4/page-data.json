{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-9-week-4/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"922ef092-0941-55e2-8023-cd8199bb1d58","excerpt":"급 추워진 날씨 배워가기 클라이언트와 서버를 개발할 때 고려사항 클라이언트 환경이 매우 다양할 수 있다. React를 쓴다면 next, CRA, remix 또는 그 외의 환경.. 그 라이브러리(or…","html":"<p>급 추워진 날씨</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"클라이언트와-서버를-개발할-때-고려사항\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%99%80-%EC%84%9C%EB%B2%84%EB%A5%BC-%EA%B0%9C%EB%B0%9C%ED%95%A0-%EB%95%8C-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD\" aria-label=\"클라이언트와 서버를 개발할 때 고려사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라이언트와 서버를 개발할 때 고려사항</h3>\n<ul>\n<li>\n<p><strong>클라이언트</strong></p>\n<ul>\n<li>환경이 매우 다양할 수 있다. React를 쓴다면 next, CRA, remix 또는 그 외의 환경.. 그 라이브러리(or 프레임워크)가 사용하는 내부 디펜던시도 각자 다르다</li>\n<li>따라서 그 다양한 환경을 고려해서 개발 환경을 세팅해야 한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>서버</strong></p>\n<ul>\n<li>API의 경우에도 내부에서만 접근이 가능한 internal과 외부의 접근을 열어두는 external을 인지하고 개발해야한다. (인스턴스를 분리해야한다)</li>\n<li>이에따라 보안상의 절차를 거쳐야하는지 판단한다.</li>\n</ul>\n</li>\n<li>\n<p>cf) 서버의 확장 방식</p>\n<ul>\n<li>scalable server: 확장 가능한 서버</li>\n<li>server scale up: 서버 인스턴스의 ‘크기‘를 늘린다</li>\n<li>server scale out: 서버 인스턴스의 ‘수’를 늘린다</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"텍스트-정규화-방식\" style=\"position:relative;\"><a href=\"#%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%A0%95%EA%B7%9C%ED%99%94-%EB%B0%A9%EC%8B%9D\" aria-label=\"텍스트 정규화 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>텍스트 정규화 방식</h3>\n<p>자바스크립트에서 <code class=\"language-text\">String.prototype.normalize()</code>로 텍스트를 정규화할 수 있으며, 그 방식에는 NFC, NFD, NFKD,NFKC 등이 있다.</p>\n<ul>\n<li>\n<p><strong>NFC</strong></p>\n<ul>\n<li>\n<p>(Normalization Form Composition, 정규형 정준 결합)</p>\n</li>\n<li>\n<p>Windows의 기본</p>\n</li>\n<li>\n<p>ex) 가나다라</p>\n</li>\n<li>\n<p>NFD 방식보다 텍스트의 사이즈는 작아지게 된다.</p>\n</li>\n<li>\n<p>현대 한글과 옛 한글이 다른 방식으로 저장되므로 텍스트를 처리할 때 유의해야 한다.</p>\n</li>\n<li>\n<p>NFC로 정규화를 거친 값은 같은 자음이라도 유니코드 번호가 다르다</p>\n</li>\n<li>\n<p>ex) 스크린샷의 <code class=\"language-text\">스</code>에서 분리가 된 <code class=\"language-text\">ㅅ</code>과 그냥 <code class=\"language-text\">ㅅ</code>은 번호가 다름</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> “스ㅅ“<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">char</span><span class=\"token operator\">:</span> “ᄉ”<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token number\">4361</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">char</span><span class=\"token operator\">:</span> “ᅳ”<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token number\">4467</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">char</span><span class=\"token operator\">:</span> “ㅅ”<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token number\">12613</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>NFD</strong></p>\n<ul>\n<li>(Normalization Form DeComposition, 정규형 정준 분해)</li>\n<li>MacOS의 기본</li>\n<li>ex) ㄱㅏㄴㅏㄷㅏㄹㅏ\n<ul>\n<li>현대 한글과 옛 한글을 동일한 방식으로 저장한다.</li>\n<li>NFC 방식과 비교하여 텍스트의 크기가 커진다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"데이터의-온오프라인-체크\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%98%A8%EC%98%A4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%B2%B4%ED%81%AC\" aria-label=\"데이터의 온오프라인 체크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터의 온/오프라인 체크</h3>\n<p>데이터 온/오프라인 체크는 axios가 아닌 브라우저의 API로 할 수 있고, 그렇게 해야한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getOnLineStatus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">typeof</span> navigator <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> navigator<span class=\"token punctuation\">.</span>onLine <span class=\"token operator\">===</span> <span class=\"token string\">\"boolean\"</span>\n    <span class=\"token operator\">?</span> navigator<span class=\"token punctuation\">.</span>onLine\n    <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 로직을 이용하면 네트워크 요청을 보내기전에 분기 처리가 가능하다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">getOnLineStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 토스트 출력</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 네트워크 요청</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"패키지-버전관리-방법\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC-%EB%B0%A9%EB%B2%95\" aria-label=\"패키지 버전관리 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 버전관리 방법</h3>\n<ul>\n<li><strong>semver</strong>\n<ul>\n<li>major.minor.patch 형식</li>\n<li>버그 수정은 patch, 기능 추가는 minor, 제거는 major을 올리는 방법이 있다.</li>\n<li>각 버전을 개발자가 수동으로 올린다.</li>\n<li>각 버전을 올리는 규칙을 공유해도 각 개발자가 판단하는 버전업의 기준이 다를 수 있다는 단점이 있다.</li>\n</ul>\n</li>\n<li><strong>headver</strong>\n<ul>\n<li>major.yyww.buildno 형식</li>\n<li>semver의 문제점을 해결한다.</li>\n<li>개별 스프린트 단위를 표현할 수도 있다.</li>\n</ul>\n</li>\n<li><strong>calver</strong>\n<ul>\n<li>yyyy.mm.patch</li>\n<li>지원 정책과 버전을 이해하기 쉽게 일치시켜 고객이 지원 서비스를 받는 기간을 이해하기 쉽다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://mrchypark.github.io/post/%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B2%84%EC%A0%84%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EC%84%B1%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">패키지 버전은 어떻게 작성해야할까</a></p>\n<h3 id=\"inline-요소의-invisible-margin\" style=\"position:relative;\"><a href=\"#inline-%EC%9A%94%EC%86%8C%EC%9D%98-invisible-margin\" aria-label=\"inline 요소의 invisible margin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inline 요소의 invisible margin</h3>\n<p><code class=\"language-text\">&lt;img></code>와 같은 inline 태그들은 invisible margin이 있을 수도 있다. inline 요소는 text와 baseline을 맞추기 때문에, css상 잡히는 margin은 없지만 실제 요소의 크기보다 조금 큰 영역을 차지하는 것이다.</p>\n<p>이를 간단히 없애려면 <code class=\"language-text\">display: block</code>을 주면 된다.</p>\n<blockquote>\n<p>This is actually not that uncommon. It’s because the image is an inline elements so there is some space between the bottom of the image, which is placed on the base line of the text, and the bottom of the text line.</p>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://stackoverflow.com/questions/1383048/html-css-weird-invisible-margin-below-pictures\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/1383048/html-css-weird-invisible-margin-below-pictures</a></p>\n<h3 id=\"user-agent\" style=\"position:relative;\"><a href=\"#user-agent\" aria-label=\"user agent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User-Agent</h3>\n<p>갤럭시 폴드의 기본 크롬 브라우저 환경이 모바일로 잡히지 않아서 시작된 문제…</p>\n<p>웹 서비스는 <code class=\"language-text\">User-Agent</code> HTTP 헤더 값을 통해 브라우저, OS, 사용자의 기기 정보 등을 얻을 수 있었다. 그러나 이 <code class=\"language-text\">User-Agent</code> string에는 많은 정보가 담겨 있어 개인정보 침해 문제가 있을 수 있어, 크롬에서는 <strong>Client Hints</strong>라는 것의 도입을 시도했다.</p>\n<p>크롬의 User-Agent Client Hints의 가장 큰 이슈는 User-Agent string 프리징이다. UA 프리징 결과 기기명, OS의 정보, 브라우저의 버전이 불분명해졌다.</p>\n<p>이에 대한 대응 방안으로, User-Agent string을 세분화해 Object 형식으로 나타낸 User-Agent Data를 사용할 수 있다.</p>\n<p><code class=\"language-text\">navigator.userAgentData</code>에 접근하면 brands(84 이전 버전에서는 uaList)과 mobile 속성이 있으며 <code class=\"language-text\">getHighEntropyValues</code> 메서드를 사용할 수 있다. <code class=\"language-text\">navigator.userAgentData.getHighEntropyValues</code>를 통해 비동기 방식으로 정보를 가져오면 기존 <code class=\"language-text\">User-Agent</code> string으로 얻은 정보와 동일한 정보를 얻을 수 있다.</p>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://naver.github.io/egjs-agent/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://naver.github.io/egjs-agent/</a></li>\n<li><a href=\"https://d2.naver.com/helloworld/6532276\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://d2.naver.com/helloworld/6532276</a></li>\n</ul>\n<h3 id=\"replace의-인자-사용하기\" style=\"position:relative;\"><a href=\"#replace%EC%9D%98-%EC%9D%B8%EC%9E%90-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"replace의 인자 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">replace()</code>의 인자 사용하기</h3>\n<p>자바스크립트의 <code class=\"language-text\">String.prototype.replace()</code> 메서드의 매개변수가 <code class=\"language-text\">string</code>으로 지정되었을 때, 다음과 같은 특수 교체 패턴을 포함할 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th>패턴</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">$$</code></td>\n<td>”$” 기호를 삽입한다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">$&amp;</code></td>\n<td>매치된 문자열을 삽입한다.</td>\n</tr>\n<tr>\n<td>`$“</td>\n<td>매치된 문자열 앞쪽까지의 문자열을 삽입한다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">$'</code></td>\n<td>매치된 문자열의 문자열을 삽입한다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">$n</code></td>\n<td><em>n</em>이 1이상 99이하의 정수라면, 첫번째 매개변수로 넘겨진 RegExp객체에서 소괄호로 묶인 <em>n</em>번째의 부분 표현식으로 매치된 문자열을 삽입한다.</td>\n</tr>\n</tbody>\n</table>\n<p>예를 들어보자.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"+케이크+\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> regText <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[.+{}()|[\\]\\\\]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\$&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError: Invalid regular expression: /+케이크+/: Nothing to repeat</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>regText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// /+케이크+/</span></code></pre></div>\n<p><code class=\"language-text\">+케이크+</code>라는 문자열에서, <code class=\"language-text\">replace()</code>의 첫 번째 인자로 들어온 정규표현식 중 <code class=\"language-text\">+</code>라는 문자열이 매칭이 되었다. 이때 <code class=\"language-text\">replace()</code>의 두 번재 인자로 <code class=\"language-text\">\\\\$&amp;</code>을 사용하여, 매치된 모든 <code class=\"language-text\">+</code> 문자열 앞에 <code class=\"language-text\">\\</code>을 붙여 <code class=\"language-text\">\\+</code>로 치환할 수 있다.</p>\n<p><strong>Ref</strong> <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80_string%EC%9C%BC%EB%A1%9C_%EC%A7%80%EC%A0%95%EB%90%98%EC%97%88%EC%9D%84_%EB%95%8C\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global<em>Objects/String/replace#매개변수가_string으로</em>지정되었을_때</a></p>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>reflecting이란 코드가 구동 시(런타임) 자기 자신을 검사, 수정할 수 있는 능력을 말한다.</li>\n<li>XSS 공격이 서버로 가기전에 아래의 정규식으로 방어가 가능하다.\n<ul>\n<li><code class=\"language-text\">new RegExp(/&lt;script>|&lt;\\/script>|&lt;\\\\script>|alert\\((.*?)\\)/i).test(검증할문자열)</code></li>\n</ul>\n</li>\n<li>안드로이드 키보드 레이아웃이 웹뷰 화면의 레이아웃에 영향 안주도록 하고싶으면 안드로이드에서 해당 자바스크립트 인터페이스를 지원하도록 작업하면 가능하다.\n<ul>\n<li><code class=\"language-text\">window.JavaScriptInterface?.setSoftInputMode('pan')</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<h3 id=\"효율적인-테스트-코드-작성법\" style=\"position:relative;\"><a href=\"#%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%EB%B2%95\" aria-label=\"효율적인 테스트 코드 작성법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>효율적인 테스트 코드 작성법</h3>\n<p>테스트는 중요하지만, TDD는 은탄환이 아닐 수 있다.</p>\n<p>이미 잘 정의된 수학적 연산 등은 미리 테스트를 작성하고 기능을 만드는 것이 가능하지만,\n대부분의 경우 우리는 발생할 수 있는 버그들을 미리 생각해내기 어렵다.</p>\n<p>실제로 서비스를 라이브하거나, 원래 있던 가정이 깨져서 사용자의 예상치 못한 인풋이나 함수의 잘못된 사용이 발견되었을 때 테스트를 작성하여 문제를 해결한다.</p>\n<p>테스트를 통해서 프로그래머의 의도를 파악할 수 있으며, 실제 해당 기능이 동작하는 방식과 미래에 동작할 방식을 이해하는 것이 좋다.</p>\n<p><strong>Ref</strong> <a href=\"https://www.youtube.com/watch?v=gs1qM1TF5zA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=gs1qM1TF5zA</a></p>\n<h3 id=\"preact-signal\" style=\"position:relative;\"><a href=\"#preact-signal\" aria-label=\"preact signal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preact Signal</h3>\n<p>얼마 전 <a href=\"https://twitter.com/_developit/status/1567209440843022341\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">트위터</a>에서 Json Miller가 Preact에서 상태를 관리해주는 도구인 Preact Signal을 발표하면서 뜨거운 감자가 되었다.</p>\n<p>그 소개를 보면 역시나 ‘빠르고’, ‘가상 DOM에 최적화’되었다는데…</p>\n<p>Preact가 React의 그늘에서 벗어나 reactive한 방식으로 상태를 관리할 수 있게 되었다는데,</p>\n<ul>\n<li>React에서 벗어나 Vue를 따라했다?!</li>\n<li>이러한 방식은 이미 jQuery 때부터 있었다?!</li>\n</ul>\n<p>등으로 이야기가 되고 있는 듯하다.</p>\n<p>아무튼, Preact Signal은 요렇게 사용한다고 하는데…</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signal<span class=\"token punctuation\">,</span> computed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@preact/signals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> double <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> x 2 = </span><span class=\"token punctuation\">{</span>double<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">computed</code>가 붙은 걸 봐서, 기존의 상태로 변형된 값들을 reactive하게 가져올 수 있다는 점이 특징적인 것 같다.\nobservable같기도 하고, rxjs같기도 하고 🙄 (모름)</p>\n<p>기존 React에서 사용하는 <code class=\"language-text\">useState</code>같은 hook과는 달리 컴포넌트의 안팎에서 모두 사용할 수 있다고 한다. 이를 Preact 프레임워크에 포함된 상태관리라고 봐야할지, 완전히 별도의, PnP 스타일의 상태관리 도구로 봐야할지 모르겠다. (오, Signal을 <a href=\"https://preactjs.com/blog/introducing-signals/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">그냥 React에서 사용</a>할 수도 있는 것 같다!</p>\n<p>부모 컴포넌트의 상태가 자식 컴포넌트들로 계속 전달되면서 발생하는 불필요한 리렌더링의 문제를 해결하고자 했다는데, Preact도 좋은지 한번 써봐야겠당.</p>\n<h3 id=\"rust의-대도약\" style=\"position:relative;\"><a href=\"#rust%EC%9D%98-%EB%8C%80%EB%8F%84%EC%95%BD\" aria-label=\"rust의 대도약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rust의 대도약?</h3>\n<p>트위터의 또다른 뜨거운 감자… 메모리를 다루는 새로운 프로젝트는 c++/c 대신 러스트를 사용하는 것이 바람직하며,\n보안성과 신뢰성을 위해 c++/c는 업계에서 deprecated 된 것으로 선언해야 한다!?</p>\n<p>웹 프론트엔드 개발자도 rust를 배워야 하는 시대가 오는 건가?</p>\n<ul>\n<li>여러 메이저 회사가 이미 러스트를 기반으로 코어를 만들고/오픈을 했고</li>\n<li>Deno 생태계의 성장률</li>\n<li>javascript로 동작하는 라이브러리의 성능적 한계 (V8이 아무리 외계인 집어넣는다고 해도, 이는 어려워 보입니다.)</li>\n<li>웹 뿐만 아니라 다른 코어 영역으로의 접근도 러스트를 익히고 있으면 큰 도움이 되기 때문</li>\n</ul>\n<p>이라고 한다!</p>\n<p>트위터를 깔긴 깔았는데, 이런 것들을 볼 수 있는 거구나 😬<br>\n쓰잘데기 없는 계정들만 팔로우해놔서 별 소용이 없는 거였다.</p>\n<p><strong>Ref</strong> <a href=\"https://twitter.com/markrussinovich/status/1571995117233504257?s=20&#x26;t=FlDaK08x39IH8DL4UsE0FA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://twitter.com/markrussinovich/status/1571995117233504257?s=20&#x26;t=FlDaK08x39IH8DL4UsE0FA</a></p>\n<h3 id=\"vercel의-preview-댓글-기능\" style=\"position:relative;\"><a href=\"#vercel%EC%9D%98-preview-%EB%8C%93%EA%B8%80-%EA%B8%B0%EB%8A%A5\" aria-label=\"vercel의 preview 댓글 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vercel의 Preview 댓글 기능</h3>\n<p>을 발표했다고 한다~! 자동으로 지원해주는 Preview 배포 기능이 있는 줄도 몰랐다. 정말 fancy하군…</p>\n<p><strong>Ref</strong> <a href=\"https://vercel.com/blog/introducing-commenting-on-preview-deployments\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://vercel.com/blog/introducing-commenting-on-preview-deployments</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>날씨가 정말 많이 선선해졌다~ 짱조아</p>\n<p>이번주는 별로 적을 내용이 없당. 그냥 적당히 평화로웠던 한 주~</p>\n<p>팀원들이랑 좋은 곳에서 회식도 하고, 많은 이야기들을 나눌 수 있었던 시간들이었다.</p>","timeToRead":9,"frontmatter":{"title":"9월 4주차 기록","date":"September 24, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-9-week-4/","previous":{"fields":{"slug":"/weekly/2022-9-week-5/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 01, 2022","description":"weekly-i-learned","title":"9월 5주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2022-9-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"September 16, 2022","description":"weekly-i-learned","title":"9월 3주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-9-week-5/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 01, 2022","description":"weekly-i-learned","title":"9월 5주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-9-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"September 16, 2022","description":"weekly-i-learned","title":"9월 3주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}