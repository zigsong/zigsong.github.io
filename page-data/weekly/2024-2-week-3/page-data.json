{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2024-2-week-3/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"f4f3e237-78cf-5d65-84e2-2c6a65f10912","excerpt":"배워가기 SSG 제대로 알기 SSG(Static Site Generation)에서  이라는 용어가 들어간 것은 HTML이 정적이라는 것이지, 페이지가 정적이라는 것이 아니다. SSG는 Next.js에서 권장하는 렌더링 방식으로, 다음과 같은 장단점이 있다. 장점 빌드 타임에 HTML…","html":"<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<hr>\n<h3 id=\"ssg-제대로-알기\" style=\"position:relative;\"><a href=\"#ssg-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%95%8C%EA%B8%B0\" aria-label=\"ssg 제대로 알기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSG 제대로 알기</h3>\n<p>SSG(Static Site Generation)에서 <code class=\"language-text\">Static</code> 이라는 용어가 들어간 것은 HTML이 정적이라는 것이지, 페이지가 정적이라는 것이 아니다.</p>\n<p>SSG는 Next.js에서 권장하는 렌더링 방식으로, 다음과 같은 장단점이 있다.</p>\n<ul>\n<li><strong>장점</strong>\n<ul>\n<li>빌드 타임에 HTML 파일이 생성되기 때문에 빠른 <code class=\"language-text\">FP</code>, <code class=\"language-text\">FCP</code>, <code class=\"language-text\">TTI</code>를 제공한다.</li>\n<li>또한 매 요청마다 생성하는 것이 아니므로, <code class=\"language-text\">SSR</code>과 달리 일관성있게 빠른 <code class=\"language-text\">TFB</code>를 달성할 수 있다.이미 생성된 HTML 파일을 받기 때문에 <code class=\"language-text\">SEO</code> 친화적이다.</li>\n</ul>\n</li>\n<li><strong>단점</strong>\n<ul>\n<li>모든 URL에 대해 개별 HTML 파일을 생성해야 한다. 따라서 URL을 미리 예측할 수 없거나 URL을 예측할 수 없으면 적용이 어렵다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://ajdkfl6445.gitbook.io/study/web/csr-vs-ssr-vs-ssg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ajdkfl6445.gitbook.io/study/web/csr-vs-ssr-vs-ssg</a></p>\n<h3 id=\"react-useeffectevent\" style=\"position:relative;\"><a href=\"#react-useeffectevent\" aria-label=\"react useeffectevent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React useEffectEvent</h3>\n<p>기존 이벤트 핸들러들은 같은 동작을 다시 수행할 때만 다시 실행된다. 이벤트 핸들러와 달리, effect는 prop이나 state 등의 값이 지난번 렌더링과 달라지면 다시 실행된다.(re-synchronize).</p>\n<p>이벤트 핸들러의 로직은 ‘non-reactive’하고, effect의 로직은 ‘reactive’하다고 말할 수 있다.</p>\n<p>때로 이 두 개 동작을 섞고 싶을 수 있는데, 예를 들면 특정 값의 업데이트에만 동작하는 effect를 만들고 싶을 수 있다.</p>\n<p><code class=\"language-text\">useEffectEvent</code> hook을 사용하면 non-reactive 로직을 effect에서 분리해낼 수 있다.</p>\n<p><strong>before</strong></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatRoom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> roomId<span class=\"token punctuation\">,</span> theme <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> <span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span>serverUrl<span class=\"token punctuation\">,</span> roomId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connected'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">showNotification</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Connected!'</span><span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      connection<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>roomId<span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ All dependencies declared</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p><code class=\"language-text\">theme</code>의 값만 바뀌었을 때도 <code class=\"language-text\">showNotification()</code>이 실행되어버리는 버그가 있다.</p>\n<p><strong>after</strong></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatRoom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> roomId<span class=\"token punctuation\">,</span> theme <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onConnected <span class=\"token operator\">=</span> <span class=\"token function\">useEffectEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">showNotification</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Connected!'</span><span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> <span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span>serverUrl<span class=\"token punctuation\">,</span> roomId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connected'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>roomId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ All dependencies declared</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p><code class=\"language-text\">onConnected</code>는 마치 effect 로직 같지만, 이벤트 핸들러처럼 동작한다. <code class=\"language-text\">useEffectEvent</code> 내부의 로직은 reactive하지 않으며, 마지막 props와 state의 값을 보게 된다.</p>\n<p>이제 <code class=\"language-text\">useEffect</code>의 deps에서 <code class=\"language-text\">theme</code>을 지우면, <code class=\"language-text\">roomId</code>가 바뀌었을 때만 <code class=\"language-text\">showNotification()</code>이 실행된다.</p>\n<blockquote>\n<p><code class=\"language-text\">useEffect</code> hook 내부에서 쓰는 값은 모조리 deps에 넣어달라고 lint가 불평하곤 했었는데,\n<code class=\"language-text\">useEffectEvent</code> hook을 사용하면, reactive해야 하는 값만 정확하게 분리해낼 수 있을 것 같다.</p>\n</blockquote>\n<p>즉 <code class=\"language-text\">useEffectEvent</code>는 Effect에서 Event를 분리하기 위해 탄생한 것으로, reactive와 non-reactive한 업데이트에 대해서 생각해보면 좋을 것 같다.</p>\n<p><strong>Ref</strong> <a href=\"https://react.dev/learn/separating-events-from-effects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://react.dev/learn/separating-events-from-effects</a></p>\n<h3 id=\"presigned-url\" style=\"position:relative;\"><a href=\"#presigned-url\" aria-label=\"presigned url permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>presigned url</h3>\n<ul>\n<li>일반적으로 private인 s3 버킷의 컨텐츠를 presigned URL을 통해 다른 사용자들과 공유할 수 있다.</li>\n<li>객체를 다운로드할 수 있는 시간 제한을 두고 보안 credential을 사용하여 일시적으로 승인한다.</li>\n<li>‘서명된 링크’라고 불리며, 미리 서명된 URL을 통해 사용자가 문서를 업로드하거나 원하는 파일을 S3 버킷에 저장할 수 있다.</li>\n</ul>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://ghdwlsgur.github.io/docs/AWS-Architecture/S3PresignedURL\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ghdwlsgur.github.io/docs/AWS-Architecture/S3PresignedURL</a></li>\n<li><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/ShareObjectPreSignedURL.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.aws.amazon.com/AmazonS3/latest/userguide/ShareObjectPreSignedURL.html</a></li>\n</ul>\n<h3 id=\"키보드-이벤트-주의사항-️\" style=\"position:relative;\"><a href=\"#%ED%82%A4%EB%B3%B4%EB%93%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-%EF%B8%8F\" aria-label=\"키보드 이벤트 주의사항 ️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>키보드 이벤트 주의사항 ❗️</h3>\n<p>키보드의 cmd + k를 눌렀다가 k 먼저 떼고 cmd를 나중에 떼면 cmd의 이벤트만 발생하고 k는 무시된다.</p>\n<p>그런데 cmd를 먼저 떼면 cmd와 k의 이벤트 둘 다 발생한다.</p>\n<p>-> 즉, <strong>메타키에서 손이 떼진 순간</strong> 비로소 <code class=\"language-text\">keyup</code> 이벤트가 발생한다.</p>\n<blockquote>\n<p>cf) keydown과 keyup 이벤트가 항상 대칭으로 일어나는 것은 아니니 사용자 경험을 위해 커맨드를 이용한 숏컷을 만들때는 keydown 이벤트만을 이용하라는 애플의 큰그림?</p>\n</blockquote>\n<h3 id=\"pragmatic-drag-and-drop\" style=\"position:relative;\"><a href=\"#pragmatic-drag-and-drop\" aria-label=\"pragmatic drag and drop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pragmatic-drag-and-drop</h3>\n<p>react-beautiful-dnd의 메인테이너가 새로운 dnd 라이브러리를 만들고있다. 이미 트랠로,지라 등에 사용되고 있다고 한다.</p>\n<p>이름은 <strong>pragmatic-drag-and-drop</strong></p>\n<p>아직 배포는 안됐지만 <a href=\"https://www.youtube.com/watch?v=5SQkOyzZLHM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">영상</a>으로 어떤 라이브러리인지 설명한다.</p>\n<p>react-beautiful-dnd에서는 마우스 이벤트를 사용해서 dnd를 구현했다면 이번에는 네이티브 drag-and-drop API를 이용해서 구현했다고한다. 모든 부분(성능, 번들 크기)에서 좋아졌지만 react-beautiful-dnd의 애니메이션은 사라진 것 같다. 네이티브 dnd라 어쩔 수 없는듯하다.</p>\n<blockquote>\n<p>참고: <a href=\"https://drag-and-drop-performance-comparison.vercel.app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">모든 dnd 라이브러리를 비교한 사이트</a></p>\n</blockquote>\n<blockquote>\n<p>이 분은 dnd만 파신다고 한다. 멋진 외길인생…</p>\n</blockquote>\n<h2 id=\"이것저것-모음집\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83-%EB%AA%A8%EC%9D%8C%EC%A7%91\" aria-label=\"이것저것 모음집 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것 모음집</h2>\n<hr>\n<ul>\n<li>React에서, 상태는 특정한 render에 의존적이다. 즉 각각의 render는 각자만의 상태를 가지고 있다. 따라서 상태를 변경하는 함수가 정의되는 시점에, 특정한 상태값은 해당 render에 의존적이다.</li>\n<li>vitest workspace를 이용해서 각 폴더를 projects로 지정하고 원하는 config파일로 테스트를 실행할 수 있다. (<a href=\"https://vitest.dev/guide/workspace.html#defining-a-workspace\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n</ul>\n<h2 id=\"기타공유\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80%EA%B3%B5%EC%9C%A0\" aria-label=\"기타공유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타공유</h2>\n<hr>\n<h3 id=\"screenshot-to-code\" style=\"position:relative;\"><a href=\"#screenshot-to-code\" aria-label=\"screenshot to code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>screenshot to code</h3>\n<p>스크린샷을 코드로 바꿔주는 서비스! 😲</p>\n<p>뭐야… 어떻게 한거야…</p>\n<p><strong>Ref</strong> <a href=\"https://screenshottocode.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://screenshottocode.com/</a></p>\n<h3 id=\"react-19의-new-hook-api\" style=\"position:relative;\"><a href=\"#react-19%EC%9D%98-new-hook-api\" aria-label=\"react 19의 new hook api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 19의 new hook API</h3>\n<p>React 19 버전이라는 게 더 놀랍다. 16학번이었던 내가 19학번 맞이하는 느낌이랄까…</p>\n<ul>\n<li><code class=\"language-text\">use(Promise)</code>: Promise가 resolve될 때까지 클라이언트 suspending 처리</li>\n<li><code class=\"language-text\">use(Context)</code>: <code class=\"language-text\">useContext</code>와 같지만, loop이나 조건문 등에 사용할 수 있는 hook</li>\n<li><code class=\"language-text\">Form actions</code>: form이 submit될 때 발생하는 동작을 정의</li>\n<li><code class=\"language-text\">useFormState</code>: 비동기 form 동작을 도와준다. 마지막으로 form이 submit되었을 때의 값에 접근할 수 있다.</li>\n<li><code class=\"language-text\">useFormStatus</code>: form이 성공적으로 submit되었는지 알려준다.</li>\n<li><code class=\"language-text\">useOptimistic</code>: 액션이 실제로 완료되기 전까지 UI를 optimistic하게 update해준다.</li>\n</ul>\n<p>Tanstack Query, react-hook-form들의 기능들을 가져온 것 같은… 라이브러리들이 잘 나가는 꼴을 볼 수 없었던 건가…(?)</p>\n<p><strong>Ref</strong> <a href=\"https://marmelab.com/blog/2024/01/23/react-19-new-hooks.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marmelab.com/blog/2024/01/23/react-19-new-hooks.html</a></p>\n<h3 id=\"jquery-400-베타\" style=\"position:relative;\"><a href=\"#jquery-400-%EB%B2%A0%ED%83%80\" aria-label=\"jquery 400 베타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jQuery 4.0.0 베타</h3>\n<p>노장의 귀환… 아무튼 대단하다.</p>\n<p><strong>Ref</strong> <a href=\"https://blog.jquery.com/2024/02/06/jquery-4-0-0-beta/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.jquery.com/2024/02/06/jquery-4-0-0-beta/</a></p>\n<h3 id=\"돌아온-servo-엔진-실제-작업에-돌입\" style=\"position:relative;\"><a href=\"#%EB%8F%8C%EC%95%84%EC%98%A8-servo-%EC%97%94%EC%A7%84-%EC%8B%A4%EC%A0%9C-%EC%9E%91%EC%97%85%EC%97%90-%EB%8F%8C%EC%9E%85\" aria-label=\"돌아온 servo 엔진 실제 작업에 돌입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>돌아온 servo 엔진 실제 작업에 돌입</h3>\n<p>Mozilla의 웹 엔진이라고 한다.</p>\n<p><strong>Ref</strong> <a href=\"https://news.itsfoss.com/servo-rust-web-engine/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://news.itsfoss.com/servo-rust-web-engine/</a></p>\n<h3 id=\"ms의-c-rust-및-wasm-플랫폼-관련-행보에-대한-왈가왈부\" style=\"position:relative;\"><a href=\"#ms%EC%9D%98-c-rust-%EB%B0%8F-wasm-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EA%B4%80%EB%A0%A8-%ED%96%89%EB%B3%B4%EC%97%90-%EB%8C%80%ED%95%9C-%EC%99%88%EA%B0%80%EC%99%88%EB%B6%80\" aria-label=\"ms의 c rust 및 wasm 플랫폼 관련 행보에 대한 왈가왈부 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MS의 C#, Rust 및 wasm 플랫폼 관련 행보에 대한 왈가왈부</h3>\n<p>요약</p>\n<ul>\n<li>C#의 Rust로의 완전한 전환은 현실적으로 불가능 할 것이라는 것이 커뮤니티의 중론</li>\n<li>다만 Rust의 생태계에 대한 평가는 저수준의 경우부터 고수준의 경우까지 훌륭한 편</li>\n<li>한편 MS 365 office web version 구조 개편에 대한 추측이 돌고 있음.</li>\n<li>Rust 진영의 경우 Wasm 지원 수준이 높은 상태이고, C# 진영의 것보다 구조적 측면에서 상대적으로 성능에 더 유리함 (GC 없고 등등)</li>\n</ul>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://www.theregister.com/2024/01/31/microsoft_seeks_rust_developers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.theregister.com/2024/01/31/microsoft_seeks_rust_developers/</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=39240205\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://news.ycombinator.com/item?id=39240205</a></li>\n</ul>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<hr>\n<p>이번주 나의 합법적인 투잡이 시작되었고, 공연은 2주 앞으로 다가왔고, 갑자기 인생 난이도 극상승 🎢</p>\n<p>역시 돈 버는 건 쉽지 않다. 새로운 계획이 필요해</p>","timeToRead":7,"frontmatter":{"title":"2월 3주차 기록","date":"February 18, 2024","description":"투잡은 결코 빡세지","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2024-2-week-3/","previous":null,"next":{"fields":{"slug":"/weekly/2024-2-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"February 11, 2024","description":"설 연휴 그리고 골골병 💊","title":"2월 2주차 기록","tags":["weekly"]}},"previousInSameTag":null,"nextInSameTag":{"fields":{"slug":"/weekly/2024-2-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"February 11, 2024","description":"설 연휴 그리고 골골병 💊","title":"2월 2주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}