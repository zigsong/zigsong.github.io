{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-10-week-2/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"12cbf319-ccff-5a7b-aba3-d8dc29a6ebbc","excerpt":"추운 날씨 좋아 배워가기 Table 내의 내용 없는 셀(td) 표현 테이블에 들어갈 데이터에 값이 없거나 값이 0인 경우에는 아무것도 없는 와 같이 빈 셀로 표현하는 경우가 있다. 하지만 이 경우 CSS에서 를 사용하지 않으면 설정한 border…","html":"<p>추운 날씨 좋아</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"table-내의-내용-없는-셀td-표현\" style=\"position:relative;\"><a href=\"#table-%EB%82%B4%EC%9D%98-%EB%82%B4%EC%9A%A9-%EC%97%86%EB%8A%94-%EC%85%80td-%ED%91%9C%ED%98%84\" aria-label=\"table 내의 내용 없는 셀td 표현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table 내의 내용 없는 셀(td) 표현</h3>\n<p>테이블에 들어갈 데이터에 값이 없거나 값이 0인 경우에는 아무것도 없는 <code class=\"language-text\">&lt;td>&lt;/td></code>와 같이 빈 셀로 표현하는 경우가 있다. 하지만 이 경우 CSS에서 <code class=\"language-text\">border-collapse: collapse</code>를 사용하지 않으면 설정한 border가 제대로 표현되지 않을 수 있으며, 스크린 리더를 사용할 경우 내용 없는 빈 셀은 테이블의 구조의 파악을 어렵게 만든다.</p>\n<p>값이 없는 경우는 ‘없음’과 같은 텍스트를 삽입한 후, CSS를 사용하여 텍스트를 숨겨서 제공하면 디자인상의 문제 없이 table의 정보 접근성을 높일 수 있다.</p>\n<h3 id=\"tsconfiglibjson\" style=\"position:relative;\"><a href=\"#tsconfiglibjson\" aria-label=\"tsconfiglibjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tsconfig.lib.json</h3>\n<p>타입스크립트가 빌드될 때 참조하는 <code class=\"language-text\">tsconfig.json</code>의 컴파일 옵션중에 <code class=\"language-text\">lib</code>이라는 항목이 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"CompilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"es2015.promise\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">lib</code> 파일들은 보통 설치한 타입스크립트 모듈에 존재하며, 타입스크립트는 빌트인 JS API들이나 브라우저 환경에 대한 것들의 타입 정의를 포함하고 있다.</p>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://norux.me/59\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://norux.me/59</a></li>\n<li><a href=\"https://www.typescriptlang.org/tsconfig#lib\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.typescriptlang.org/tsconfig#lib</a></li>\n</ul>\n<h3 id=\"docker-compose로-다중-컨테이너-애플리케이션-만들기\" style=\"position:relative;\"><a href=\"#docker-compose%EB%A1%9C-%EB%8B%A4%EC%A4%91-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"docker compose로 다중 컨테이너 애플리케이션 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>docker-compose로 다중 컨테이너 애플리케이션 만들기</h3>\n<p>docker-compose.yml을 사용하여 다중 컨테이너 애플리케이션을 만들 수 있다.</p>\n<p><a href=\"https://docs.docker.com/storage/volumes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docker의 volume이란</a>, 도커 컨테이너에 의해 생성되는 데이터를 유지하는 데 선호되는 메카니즘이다. volume의 내용물은 주어진 컨테이너의 라이프사이클 바깥에 존재한다.</p>\n<img src=\"02.png\" />\n<p>일반적으로 docker container는 컨테이너 내부에 데이터를 관리하므로, 컨테이너가 파기되면 데이터가 모두 날라가게 된다. 이는 mysql 같은 데이터 스토리지를 사용할 경우 위험하게 되는데, 이를 방지하기 위해 따로 볼륨을 설정해서 데이터를 저장해줘야 한다</p>\n<ul>\n<li>\n<p><a href=\"https://docs.docker.com/engine/reference/commandline/volume_create/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docker volume 만드는 법</a></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> volume create <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>VOLUME<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://joont92.github.io/docker/volume-container-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://joont92.github.io/docker/volume-container-추가하기/</a></p>\n<h3 id=\"nest-registeras\" style=\"position:relative;\"><a href=\"#nest-registeras\" aria-label=\"nest registeras permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nest <code class=\"language-text\">registerAs</code></h3>\n<ul>\n<li>\n<p>namespace에 configuration을 할 때 사용한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">ConfigModule</code>을 이용해서 여러 개의 커스텀 configuration 파일을 정의하고 로드할 수 있다.</p>\n</li>\n<li>\n<p>nesting된 복잡한 configuration 객체들을 사용하는 대신, <code class=\"language-text\">registerAs</code> 를 사용하여 namespace의 configuration을 정의할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">registerAs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"database\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_HOST</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">5432</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://docs.nestjs.com/techniques/configuration#configuration-namespaces\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.nestjs.com/techniques/configuration#configuration-namespaces</a></p>\n<h3 id=\"ioc-di-dip\" style=\"position:relative;\"><a href=\"#ioc-di-dip\" aria-label=\"ioc di dip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IoC, DI, DIP</h3>\n<p><strong>👩‍🏫 IoC (Inversion of Control)</strong></p>\n<p>제어의 역전은 프로그래머가 작성한 프로그램이 재사용 라이브러리의 흐름 제어를 받게 되는 소프트웨어 디자인 패턴이다. 제어의 역전이 적용된 구조에서는 외부 라이브러리의 코드가 프로그래머가 작성한 코드를 호출한다.</p>\n<p>모듈을 작성할 때, 모듈과 외부 프로그램의 결합을 고민할 필요 없이 모듈의 목적에 집중할 수 있으며, 모듈을 바꾸어도 다른 시스템에 부작용을 일으키지 않는다.</p>\n<p>예를 들어, 웹 개발에서 많이 사용하는 <strong>프레임워크</strong>는 규칙에 따라 구성요소를 등록하면, 프레임워크에서 이 구성요소를 가져다 써야 한다. (DOM 렌더링에 관여하는 React가 바로 적합한 예시!)</p>\n<p>코드 상에서 IoC는, 클래스의 생성자를 직접 호출해 인스턴스를 생성하는 방법이다. IoC는 <strong>누가 작업을 수행하느냐</strong>에 대한 이야기다.</p>\n<p><strong>👩‍🏫 DI (Dependency Injection)</strong></p>\n<p>의존성 주입은 프로그래밍에서 구성요소 간의 의존 관계를 소스코드 내부가 아닌 외부의 설정 파일 등을 통해 정의하는 디자인 패턴이다.</p>\n<p>IoC의 한 형태가 DI다. 마틴 파울러는 다음 세 가지 의존성 주입 패턴을 제시한다.</p>\n<ul>\n<li>생성자 주입: 필요한 의존성을 모두 포함하는 클래스의 생성자를 만들고 그 생성자를 통해 의존성을 주입한다.</li>\n<li>setter를 통한 주입: 의존성을 입력받는 setter를 만들고 이를 통해 의존성을 주입한다.</li>\n<li>인터페이스를 통한 주입: 의존성을 주입하는 함수를 포함한 인터페이스를 작성하고 이 인터페이스를 구현하도록 함으로써 실행 시에 이를 토해 의존성을 주입한다.</li>\n</ul>\n<p>즉 DI는 <strong>의존성을 어떻게 주입할 것인가</strong>에 대한 문제다.</p>\n<p><strong>👩‍🏫 DIP (Dependency Inversion principle)</strong></p>\n<p>객체지향 프로그래밍에서 의존 관계 역전 원칙은 소프트웨어 모듈들을 분리하는 특정 형식을 지칭한다. 상위 계층(정책 결정)이 하위 계층(세부사항)에 의존하는 전통적인 의존 관계를 역전시킴으로써 상위 계층이 하위 계층의 구현으로부터 독립되게 할 수 있다. (😲 클린 아키텍처 19장 ‘정책과 수준’에 나온 내용과 같다. 좋은 아키텍처는 각 컴포넌트를 연결할 때 의존성의 방향이 저수준 -> 고수준 컴포넌트가 되어야 한다.)</p>\n<ul>\n<li>상위 모듈은 하위 모듈에 의존해서는 안된다. 상위 모듈과 하위 모듈 모두 추상화에 의존해야 한다.\n<ul>\n<li>어디서 많이 봤다 했더니, 소프트웨어 설계 원칙 SOLID의 마지막 기법(D)에 해당하는 내용이었다! 소스 코드는 구체화된 것에는 의존하지 말아야 한다. 안정된 소프트웨어 아키텍처는 안정된 추상 인터페이스에 의존한다.</li>\n</ul>\n</li>\n<li>추상화는 세부사항에 의존해서는 안된다. 세부사항이 추상화에 의존해야 한다.</li>\n</ul>\n<p>DI는 DIP를 구현하는 방법 중 하나다. DIP로 다형성을 적극적으로 활용하면, 모듈의 재사용성을 높일 수 있다.</p>\n<p>즉 DIP는 <strong>실체에 의존할 것인가, 추상화에 의존할 것인가</strong>에 대한 문제다.</p>\n<p><strong>Ref</strong> <a href=\"https://black-jin0427.tistory.com/194\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://black-jin0427.tistory.com/194</a></p>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li><code class=\"language-text\">animation-fill-mode: forwards</code> - CSS 애니메이션 실행 후 실행 마지막 상태로 남아있게 하는 법 (<a href=\"https://stackoverflow.com/questions/9774829/css-animation-property-stays-after-animating\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li><strong>Poc:</strong> Proof of concept - 새로운 프로젝트가 실제로 실현가능성이 있는지 효과와 효용, 기술적인 관점에서부터 검증하는 과정</li>\n<li><strong>aria-activedescendant</strong> - 여러 개의 focusable한 요소가 있을 때, 선택된 요소와 상관없이 어떤 요소에 포커스 되었는지 표시한다. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-activedescendant\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>webkit-tap-highlight-color - 비표준 CSS 속성으로, 모바일에서 <code class=\"language-text\">&lt;a></code> 태그 즉 링크를 터치했을 때 하이라이트를 표시한다. iOS와 안드로이드의 웹킷 기반 브라우저 (사파리, 크롬 등)가 대상이다. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-tap-highlight-color\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref1</a>, <a href=\"https://min-ji07.tistory.com/entry/webkit-tap-highlight-color\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref2</a>)</li>\n<li>Linux Crontab을 사용해서 일정 주기마다 특정 작업을 반복적으로 실행하게 할 수 있다.</li>\n<li>Nest.js는 monorepo 구조를 지원한다. (<a href=\"https://docs.nestjs.com/cli/monorepo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>tsconfig의 compilerOptions의 declaration은, 해당 모듈의 <code class=\"language-text\">d.ts</code> 파일을 생성할 것인지 여부를 가리킨다. (<a href=\"https://www.typescriptlang.org/tsconfig\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>node.js validation 도구 joi (<a href=\"https://github.com/hapijs/joi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n</ul>\n<hr>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<h3 id=\"rust는-과연-c-킬러인가\" style=\"position:relative;\"><a href=\"#rust%EB%8A%94-%EA%B3%BC%EC%97%B0-c-%ED%82%AC%EB%9F%AC%EC%9D%B8%EA%B0%80\" aria-label=\"rust는 과연 c 킬러인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rust는 과연 C++ 킬러인가?</h3>\n<p>C/C++이 다른 언어에 비해 갖고 있는 큰 단점은, <code class=\"language-text\">include</code> 구문을 갖고 있다는 것이다. 헤더파일의 <code class=\"language-text\">include</code> 구문 탓에, 소스파일 파싱에 O(n^2)의 시간복잡도를 가지게 된다. 반면 Rust는 소스파일 파싱에 O(n)의 시간복잡도를 가진다.</p>\n<p>C/C++의 또 다른 단점은, 지나친 전방선언(forward declaration)이다. Rust는 런타임 코드가 뒤섞이지 않는 언어이면서도, 전방선언이 불필요한 언어다.</p>\n<blockquote>\n<p><strong>전방선언(forward declaration)</strong> 이란?\n식별자를 정의하기 전에 식별자의 존재를 컴파일러에게 미리 알리는 방식이다. 헤더 포함 의존성을 최소화하기 위해 도입된 방식이다.\n<strong>Ref</strong> <a href=\"https://ju3un.github.io/c++-forward-declaration/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ju3un.github.io/c++-forward-declaration/</a></p>\n</blockquote>\n<p>또한 C언어의 매크로는 단순 문자열 대체를 해준다. 하지만 지나칠 정도로 문자열 대체를 지원하여, 때로는 불필요한 오버스펙일 수도 있다. Rust의 declarative macro는, BNF 문법을 사용해서 매크로 안에 들어가는 파라미터를 자유롭게 정의할 수 있다. 또 Rust의 procedural macro를 사용하여 컴파일 타임에 코드를 실행해볼 수 있다.</p>\n<blockquote>\n<p><strong>BNF(Backus-Naur Form)</strong> 란?\n프로그래밍 언어를 정의하기 위한 메타 언어로, 정규화 표현에 많이 사용한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n&lt;hex_letter> ::= A | B | C | D | E | F\n&lt;hex> ::= &lt;digit> | &lt;hex_letter></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://perfectacle.github.io/2018/08/15/bnf/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://perfectacle.github.io/2018/08/15/bnf/</a></p>\n</blockquote>\n<p>이에 더해 Rust는 클래스 상속 대신 traits라는 개념을 사용하며, Rust의 enum 또한 신박하다.</p>\n<p>하지만! 이런 Rust에게도 단점은 있다.</p>\n<p>뒷 이야기는 출처⬇️에서 계속…</p>\n<p><strong>Ref</strong> <a href=\"https://docs.google.com/document/u/1/d/19zX4p3jJGnk-GnTeGz4BSh8XKnVR0fM8x3BY1A-GdD8/mobilebasic\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.google.com/document/u/1/d/19zX4p3jJGnk-GnTeGz4BSh8XKnVR0fM8x3BY1A-GdD8/mobilebasic</a></p>\n<h3 id=\"위젯-주도-개발\" style=\"position:relative;\"><a href=\"#%EC%9C%84%EC%A0%AF-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C\" aria-label=\"위젯 주도 개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>위젯 주도 개발</h3>\n<ul>\n<li>CSS 선택자의 충돌 방지를 위한 BEM</li>\n<li>컴포넌트 접근 방식 - UI 마크업(html)과 UI 로직(자바스크립트)의 조합</li>\n<li>CSS 모듈</li>\n<li>효율적인 데이터 fetching을 위한 공통 부모 접근 방식</li>\n<li>상태 관리 접근 방식과 prop drilling</li>\n<li>재조명되는 단순한 접근 방식 - API wrapper 또는 인터셉터\n<ul>\n<li>GraphQL 클라이언트, RESTful API</li>\n</ul>\n</li>\n</ul>\n<p>…의 역사를 거쳐 탄생한 <strong>위젯 주도 개발</strong>!</p>\n<p>모든 페이지를 자율적으로 작동하고 독립적인, 소위 위젯으로 분할한다.\n<img src=\"01.png\" width=\"480px\" /></p>\n<p>모든 위젯은 다음과 같은 기능을 담당한다.</p>\n<ul>\n<li>필요한 모든 데이터를 UI에 가져와서 제공</li>\n<li>필요한 경우 서버의 관련 데이터를 변경</li>\n<li>UI에서 데이터 표현</li>\n<li>로딩 상태의 UI</li>\n<li>(선택 사항) 오류 상태에 대한 UI</li>\n</ul>\n<p>이러한 접근 방식은 위젯이 의존하는 API 쿼리를 투명하게 만들며, 위젯을 쉽게 테스트할 수 있다.</p>\n<p><strong>Ref</strong> <a href=\"https://medium.com/@yujso66/%EB%B2%88%EC%97%AD-%EC%9C%84%EC%A0%AF-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C-b3e95b261c18\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@yujso66/번역-위젯-주도-개발-b3e95b261c18</a></p>\n<h3 id=\"비동기-요청의-응답-값-검증---schema-validation-layer\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9A%94%EC%B2%AD%EC%9D%98-%EC%9D%91%EB%8B%B5-%EA%B0%92-%EA%B2%80%EC%A6%9D---schema-validation-layer\" aria-label=\"비동기 요청의 응답 값 검증   schema validation layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 요청의 응답 값 검증 - Schema Validation Layer</h3>\n<p>일반적으로 <code class=\"language-text\">axios</code>를 사용하여 비동기 요청을 할 때, 응답 형식으로 제네릭을 사용한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Post<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"https://jsonplaceholder.typicode.com/posts\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Post</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  body<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 제네릭은 컴파일 타임에서 에러가 잡히지 않기 때문에, 런타임에서 예상치 못한 문제가 터질 수 있다!</p>\n<p>이때 필요한 것이 Schema Validation Layer다.</p>\n<p>Validation Layer의 요지는 두 계층 사이에서 오고가는 데이터를 검증하는 계층을 두는 것이다. npm엔 Schema Validation을 위한 패키지가 많이 있다. 여기서는 <a href=\"https://github.com/colinhacks/zod\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">zod</a>를 사용한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// schema/post.ts</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Post</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Post<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Post <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  title<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Posts</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Post<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Posts <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// remotes/post.ts</span>\n<span class=\"token comment\">/* Type Inference: \n  function fetchPosts(): Promise&lt;{\n      userId: number;\n      id: number;\n      title: string;\n      body: string;\n  }[]>\n*/</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"https://jsonplaceholder.typicode.com/posts\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> Posts<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 잘못된 Schema로 <code class=\"language-text\">parse</code>를 시도한다면, <code class=\"language-text\">ZodError</code>를 throw한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://jsonplaceholder.typicode.com/posts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token operator\">+</span> <span class=\"token keyword\">return</span> Post<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">-</span> <span class=\"token comment\">// return z.array(Post).parse(data);</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>zod에서 제공하는 메서드들을 사용하면 schema validation을 손쉽게 할 수 있다!</p>\n<p><strong>Ref</strong> <a href=\"https://www.pumpkiinbell.com/blog/remote/scheme-validation-layer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.pumpkiinbell.com/blog/remote/scheme-validation-layer</a></p>\n<h3 id=\"jetbrains의-fleet\" style=\"position:relative;\"><a href=\"#jetbrains%EC%9D%98-fleet\" aria-label=\"jetbrains의 fleet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jetbrains의 fleet</h3>\n<p>Jetbrains 차세대 IDE인 fleet이 공개테스트 버전으로 풀렸다!</p>\n<p>가볍고, 똑똑하고, 유연한 에디터를 제공한다고 한다.</p>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://www.jetbrains.com/ko-kr/fleet/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.jetbrains.com/ko-kr/fleet/</a></li>\n<li><a href=\"https://blog.jetbrains.com/fleet/2022/10/introducing-the-fleet-public-preview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.jetbrains.com/fleet/2022/10/introducing-the-fleet-public-preview/</a></li>\n</ul>\n<h3 id=\"memlab\" style=\"position:relative;\"><a href=\"#memlab\" aria-label=\"memlab permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>memlab</h3>\n<p>페이스북에서 JavaScript 메모리 누수를 찾기위해 제작한 메모리 테스트 프레임워크</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">memlab run <span class=\"token parameter variable\">--scenario</span> test.js</code></pre></div>\n<p>위 명령어로 간단하게 내 코드를 검사해볼 수 있다! 편리…</p>\n<p>근데 자바스크립트에서 메모리 누수는 어떤 경우들에서 발생할까? 다음 코드를 보자.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">obj</code>를 <code class=\"language-text\">null</code>로 만들었음에도 불구하고 크롬에서는 <code class=\"language-text\">obj</code>에서 메모리 누수가 발생한다. 크롬은 출력된 객체에 대해서 내부 참조를 계속 가지고 있기 때문이다.</p>\n<p>코드 상에서 메모리 누수가 발생하진 않지만, 클라이언트 캐시나 virtualization이 되지 않는 무한 스크롤 등의 상황에서도 메모리 누수가 발생하는 경우가 있다.</p>\n<p>MemLab은 다음과 같은 순서로 작동한다.</p>\n<ol>\n<li>브라우저에서 puppeteer를 사용하여 서비스를 탐색한다.</li>\n<li>페이지를 이동하면서 자바스크립트 heap과 페이지에 할당된 객체들을 비교한다.</li>\n<li>메모리 누수를 발견하고 정제한다.</li>\n<li>heap을 순회하며 각각의 누수된 객체에 대해 보관 흔적(retainer traces)을 생성한다. 이 보관 흔적은 GC 루트의 참조 체인이다.</li>\n<li>보관 흔적을 클러스터링한다.</li>\n<li>누수를 리포트한다.</li>\n</ol>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://facebook.github.io/memlab/?fbclid=IwAR0TxOfaxOepcaA27urpOX332AToO9EDtoMs24eSE932EPEkW_B-pTta8Nk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://facebook.github.io/memlab/?fbclid=IwAR0TxOfaxOepcaA27urpOX332AToO9EDtoMs24eSE932EPEkW_B-pTta8Nk</a></li>\n<li><a href=\"https://engineering.fb.com/2022/09/12/open-source/memlab/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://engineering.fb.com/2022/09/12/open-source/memlab/</a></li>\n</ul>\n<h3 id=\"microsoft-designer\" style=\"position:relative;\"><a href=\"#microsoft-designer\" aria-label=\"microsoft designer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Microsoft Designer</h3>\n<p>이제 나같은 똥손💩도 디자인을 뚝딱뚝딱 만들어버릴 수 있다~!</p>\n<p><strong>Ref</strong> <a href=\"https://designer.microsoft.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://designer.microsoft.com/</a></p>\n<h3 id=\"tsc-port-근황\" style=\"position:relative;\"><a href=\"#tsc-port-%EA%B7%BC%ED%99%A9\" aria-label=\"tsc port 근황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tsc port 근황</h3>\n<p>swc의 창시자 강동윤 님이 만드신 거구나..!</p>\n<p><strong>Ref</strong> <a href=\"https://kdy1.dev/posts/2022/10/tsc-port-status\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kdy1.dev/posts/2022/10/tsc-port-status</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>주 4일제 베타 체험판이 끝났다… 이제 연말까지 공휴일 없다. 그치만 난 휴가가 많이 남아서 괜찮다 ^0^</p>\n<p>pt는 세 번이나 방황한 끝에 드디어 결제했다..! 헬스장이 아니라 전문피티샵이라서 더 좋다. 트레이너 분도 넉살 닮으시고 첫 수업부터 왕 친근 ㅋㅋ 나같은 초짜를 잘 다룰 줄 아시는 것 같다. 이제 약골 탈출하고 지방은 불태워버리자아…</p>\n<p>라고 했는데 주말에 판교 idc 한 곳에 불이나서 카카오가 무려 15시간…? 넘게… 장애… 그리고 일요일 저녁인 지금까지도 일부 서비스들이 돌아오지 않았다. 카톡 뿐만 아니라 카카오맵, 페이, 택시, 바이크 등등 카카오 공화국이었던 대한민국은 완전 패닉에 빠져버렸고… 카카오 형들 힘내세요… 근데 처음으로 라인을 깔아봤는데, 꽤 괜찮은 것 같다. <del>이 참에 탈 카카오 했으면..</del> 싶지만 이미 아주 강력해져버린 Lock-in 🤷‍♀️</p>\n<p>그나저나 맥스🎧를 쓸지말지 아직도 고민중이다. 청음하고 더 고민되는 것 같다 ㅡㅡ 그린 왜 또 이뻐서…</p>","timeToRead":12,"frontmatter":{"title":"10월 2주차 기록","date":"October 14, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-10-week-2/","previous":{"fields":{"slug":"/weekly/2022-10-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 22, 2022","description":"weekly-i-learned","title":"10월 3주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2022-10-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 08, 2022","description":"weekly-i-learned","title":"10월 1주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-10-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 22, 2022","description":"weekly-i-learned","title":"10월 3주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-10-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 08, 2022","description":"weekly-i-learned","title":"10월 1주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}