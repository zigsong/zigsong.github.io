{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-4-week-5/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"e431971f-ed35-5186-8c6c-1fb19c784a97","excerpt":"공포의 배포 주간 배워가기 캐시의 생명주기 브라우저는 요청을 보내는 URL에 직접 리소스를 요청하기 전에, 메모리에 동일한 URL…","html":"<p>공포의 배포 주간</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"캐시의-생명주기\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9C%EC%9D%98-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0\" aria-label=\"캐시의 생명주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐시의 생명주기</h3>\n<p>브라우저는 요청을 보내는 URL에 직접 리소스를 요청하기 전에, 메모리에 동일한 URL에 해당하는 리소스가 캐시되어있는지 먼저 확인한다. 이때, 배포 시 요청할 파일 뒤에 해시값을 붙여 넣으면 최초 실행시 해당 해시값과 일치하는 캐시를 찾지못해 서버에 다시 리소스 요청을 보내게 된다.</p>\n<p>ex) 처음 버전에서 <code class=\"language-text\">.../a.png?v=1</code> 파일을 요청하다가 새로운 버전에서 <code class=\"language-text\">.../a.png?v=2</code>로 요청한다면 해당 URL에 해당하는 파일이 캐싱되어있지 않다고 판단하여 서버에 다시 리소스를 요청한다.</p>\n<p>메모리에 리소스가 있으면 캐시의 유효성을 확인한다. 캐시가 유효하다면, 서버에 추가 요청을 보내지 않고 해당 리소스를 사용한다. 그렇기 때문에 서버에서 CDN Invalidation 등의 작업이 있더라도 유효한 캐시를 지우기는 어렵다.</p>\n<p>다만 캐시의 유효기간이 지났다고 해서 캐시가 완전히 사라지는 것은 아니고, 서버에 조건부 요청을 통해 캐시가 여전히 유효한지 재검증을 수행할 수 있다. 재검증 결과 브라우저가 갖고 있는 캐시가 유효하다면 서버는 <strong>304요청</strong> 을 내려준다. 해당 응답은 HTTP 본문을 포함하지 않기 때문에 매우 빠르게 내려받을 수 있다. 재검증 결과 캐시가 유요하지 않으면 서버는 적합한 상태코드와 함께 본문을 내려준다.</p>\n<blockquote>\n<p><strong>no-cache vs no-store</strong></p>\n</blockquote>\n<ul>\n<li>no-cache\n<ul>\n<li>캐시를 저장은 하지만, 사용할 때마다 서버에 재검증 요청을 보낸다.</li>\n<li><code class=\"language-text\">max-age=0</code>과 동일하다.</li>\n</ul>\n</li>\n<li>no-store\n<ul>\n<li>캐시를 저장조차 하지 않는다.</li>\n<li>캐시를 해서는 안되는 리소스일 때 사용한다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>max-age / s-maxage</strong></p>\n</blockquote>\n<ul>\n<li>max-age\n<ul>\n<li>Cache-Control의 헤더 값으로 <code class=\"language-text\">max-age=&lt;seconds></code>를 지정하면 해당 초만큼 캐시가 유효해진다.</li>\n<li>Expires 헤더로 캐시 만료 시간을 정확히 지정할 수도 있다.</li>\n</ul>\n</li>\n<li>s-maxage\n<ul>\n<li>CDN같은 중간 서버에만 적용되는 max-age 값을 설정하기 위해 사용된다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"typescript의-타입-공변성\" style=\"position:relative;\"><a href=\"#typescript%EC%9D%98-%ED%83%80%EC%9E%85-%EA%B3%B5%EB%B3%80%EC%84%B1\" aria-label=\"typescript의 타입 공변성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript의 타입 공변성</h3>\n<p>TypeScript는 선언된 함수의 타입보다 매개변수의 개수가 더 적은 함수도 할당이 될 수 있도록 설계되어 있다.</p>\n<p>예를 들어, JavaScript Array의 내장 메서드인 <code class=\"language-text\">forEach</code>의 콜백 함수에는 <code class=\"language-text\">currentValue</code>, <code class=\"language-text\">index</code>, <code class=\"language-text\">array</code> 총 3개의 인자를 넘겨주게 되어있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>currentvalue<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>TypeScript에서 <code class=\"language-text\">forEach</code> 메서드를 사용할 때, 항상 3가지 인자를 명시해야 하는 번거로움이 있어, 일부 인자를 생략해도 되도록 설계했다고 한다.</p>\n<p>이는 TypeScript의 <strong>공변성(convariance)</strong> 과도 관계가 있다. (사실 이 블로그에서 공변성에 대한 주제를 몇 번이나 다뤘는데, 접할 때마다 헷갈리긴 한다…)</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> array<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> stringArray<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray <span class=\"token operator\">=</span> stringArray<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ OK</span>\nstringArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 Error</span></code></pre></div>\n<p>위 예제에서, <code class=\"language-text\">array</code>에 <code class=\"language-text\">stringArray</code>를 할당하는 것은 가능하다. 그러나 <code class=\"language-text\">stringArray</code>에 <code class=\"language-text\">array</code>를 할당하는 것은 불가하다.</p>\n<p><code class=\"language-text\">string | number</code>는 <code class=\"language-text\">string</code>을 포함하고 있으나, <code class=\"language-text\">string</code>은 <code class=\"language-text\">string | number</code>를 포함하지 않는다. <code class=\"language-text\">string</code>이 <code class=\"language-text\">string | number</code>의 서브타입이기 때문에, <code class=\"language-text\">array</code>에 <code class=\"language-text\">stringArray</code>를 할당하는 것만 가능하다.</p>\n<p>이처럼 <code class=\"language-text\">A</code> ➡️ <code class=\"language-text\">B</code>일 때, <code class=\"language-text\">X&lt;A></code> ➡️ <code class=\"language-text\">X&lt;B></code>의 관계라면 <code class=\"language-text\">X</code>는 <strong>공변</strong> 타입이다.</p>\n<p>함수에서는 어떨까?</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Logger<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> log<span class=\"token operator\">:</span> Logger<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> logNumber<span class=\"token operator\">:</span> Logger<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nlog <span class=\"token operator\">=</span> logNumber<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 Error</span>\nlogNumber <span class=\"token operator\">=</span> log<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ OK</span></code></pre></div>\n<p>위 예제는 <code class=\"language-text\">Array</code>의 예제와는 정확히 반대로 동작한다. <code class=\"language-text\">logNumber</code>에 <code class=\"language-text\">log</code>를 할당할 수는 있지만, 반대로 <code class=\"language-text\">log</code>에 <code class=\"language-text\">logNumber</code>를 할당할 수 없다. <code class=\"language-text\">number</code>가 <code class=\"language-text\">sring | number</code>의 서브타입임에도 불구하고, <code class=\"language-text\">Logger&lt;string | number></code>가 오히려 <code class=\"language-text\">Logger&lt;number></code>의 서브타입이 되는 셈이다.</p>\n<p>이처럼 <code class=\"language-text\">A</code> ➡️ <code class=\"language-text\">B</code>일 때, <code class=\"language-text\">X&lt;B></code> ➡️ <code class=\"language-text\">X&lt;A></code>의 관계라면 <code class=\"language-text\">X</code>는 <strong>반공변</strong> 타입이다.</p>\n<p>TypeScript에서 제공한 타입을 매개변수로 사용하는 함수 타입은 반변한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NumberParser<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>따라서 앞서 설명했던 것처럼, <code class=\"language-text\">forEach</code>의 콜백에 모든 인자를 넣지 않도 정상적으로 동작한다.</p>\n<p><strong>Ref</strong>\n<a href=\"https://seob.dev/posts/%EA%B3%B5%EB%B3%80%EC%84%B1%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://seob.dev/posts/공변성이란-무엇인가/</a>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</a></p>\n<h3 id=\"usestate-lazy-initialization\" style=\"position:relative;\"><a href=\"#usestate-lazy-initialization\" aria-label=\"usestate lazy initialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">useState</code> lazy initialization</h3>\n<p><code class=\"language-text\">useState</code>에 직접적인 값 대신에 함수를 넘기는 것을 <strong>게으른 초기화(Lazy initial state)</strong> 라고 한다. 넘긴 함수는 넘기면 첫 렌더링 시에만 실행되고, 리렌더링 시에는 무시된다. 초기값이 복잡한 연산을 요할 때 사용하면 유용하다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token function\">someExpensiveComputation</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Ref</strong>\n<a href=\"https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://reactjs.org/docs/hooks-reference.html#lazy-initial-state</a>\n<a href=\"https://yceffort.kr/2020/10/IIFE-on-use-state-of-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://yceffort.kr/2020/10/IIFE-on-use-state-of-react</a></p>\n<h3 id=\"react-componentprops\" style=\"position:relative;\"><a href=\"#react-componentprops\" aria-label=\"react componentprops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React ComponentProps</h3>\n<p>리액트에서 특정 컴포넌트 A를 서로 다른위치에 여러번 사용할 때 코드간 중복을 피하기위해 HOC 로 전환해서 사용할 때가 종종 있다.</p>\n<p>이 때 A 의 props 타입 인터페이스를 명시적으로 정의하는 대신에 ComponentProps 를 사용하여 정의할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HOC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ComponentProps<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> AtomicComponent<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AtomicComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"함수형-컴포넌트-vs-함수-컴포넌트\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-vs-%ED%95%A8%EC%88%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"함수형 컴포넌트 vs 함수 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 컴포넌트 vs 함수 컴포넌트</h3>\n<p><strong>함수형 컴포넌트(Functional Component)</strong> 와 <strong>함수 컴포넌트(Function Component)</strong> 중 무엇이 옳은 말일까?</p>\n<p>React에서는 처음에 Functional Component라는 네이밍을 사용하다가 “함수형 컴포넌트를 사용하면 함수형 프로그래밍 방법으로 개발하는 것”이라는 오해의 소지가 생길 수 있는 여지가 생김에 따라 Functional Component란 네이밍이 1년 가량 유지되다가 Function Component로 이름이 바뀌게 되었다.</p>\n<p>👩‍🏫 결론: 함수형 컴포넌트는 함수형 프로그래밍이라는 오해의 소지를 만들 수 있기 때문에 함수 컴포넌트 (Function Component) 라는 네이밍을 사용하는 것이 좋다.</p>\n<p><strong>Ref</strong> <a href=\"https://velog.io/@nsunny0908/%ED%95%A8%EC%88%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EA%B0%80-%EA%B0%99%EC%9D%80-%EB%A7%90%EC%9D%B4%EB%9D%BC%EA%B3%A0-%EC%83%9D%EA%B0%81%ED%95%98%EC%8B%9C%EB%82%98%EC%9A%94\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@nsunny0908/함수-컴포넌트와-함수형-컴포넌트가-같은-말이라고-생각하시나요</a></p>\n<h3 id=\"css-animation-fill-mode\" style=\"position:relative;\"><a href=\"#css-animation-fill-mode\" aria-label=\"css animation fill mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS <code class=\"language-text\">animation-fill-mode</code></h3>\n<p>css animation의 <code class=\"language-text\">animation-fill-mode</code> 속성은 애니메이션의 시작 또는 끝 상태를 계속 유지하고자 할 때 사용한다.</p>\n<p>예를 들어, 어떤 요소에 대하여 <code class=\"language-text\">from transform(20, 20) to transform(50, 50)</code> 으로 애니메이션을 주고 싶다고 하자.</p>\n<p><code class=\"language-text\">animation-fill-mode</code> 속성을 주지 않는다면 해당 요소는</p>\n<ol>\n<li><code class=\"language-text\">transform(0, 0)</code> 상태</li>\n<li>깜빡거리면서 <code class=\"language-text\">(20, 20)</code>으로 바뀜</li>\n<li><code class=\"language-text\">(50, 50)</code>으로 바뀜</li>\n<li>다시 <code class=\"language-text\">(0, 0)</code>으로 돌아옴</li>\n</ol>\n<p>위 순서로 바뀔 것이다.</p>\n<p><code class=\"language-text\">animation-fill-mode</code>의 값에 따라 요소의 상태가 어떻게 변하는지 살펴보자.</p>\n<ul>\n<li><code class=\"language-text\">animation-fill-mode: forwards</code> - 애니메이션의 마지막 상태를 유지할 수 있다. 즉 애니메이션이 끝난 후 마지막 <code class=\"language-text\">transform(50, 50)</code> 상태가 유지된다.</li>\n<li><code class=\"language-text\">animation-fill-mode: backwards</code> - 요소 즉시 애니메이션의 첫 상태를 적용할 수 있다. 즉 요소는 처음부터 <code class=\"language-text\">transform(20, 20)</code> 상태를 가지게 된다.</li>\n<li><code class=\"language-text\">animation-fill-mode: both</code> - 애니메이션의 첫 상태와 마지막 상태를 모두 유지한다.</li>\n</ul>\n<h3 id=\"nodejs의-https-기능\" style=\"position:relative;\"><a href=\"#nodejs%EC%9D%98-https-%EA%B8%B0%EB%8A%A5\" aria-label=\"nodejs의 https 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>node.js의 http(s) 기능</h3>\n<p>node에서는 기본으로 제공되는 모듈인 <code class=\"language-text\">http(s)</code>를 활용해 GET 요청을 할 수 있다.</p>\n<p>이때 콜백 함수의 param으로 요청의 response가 들어오고, 데이터는 여러 chunk 파일로 나뉘어져서 전송된다. (아마 전송되는 데이터가 세그먼트 단위로 나뉘어져서 전달되기 때문에 그런 것 같다.)</p>\n<p>chunk 데이터는 <code class=\"language-text\">toString('utf8')</code>을 통해 우리가 알아볼 수 있는 일반 문자열로 변환시킬 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">https<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> fullChunk <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 청크 데이터가 여러 번에 걸쳐서 들어온다</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    fullChunk <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> fullChunk<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> jsonData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"enum-권한-열거형의-형태\" style=\"position:relative;\"><a href=\"#enum-%EA%B6%8C%ED%95%9C-%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%98-%ED%98%95%ED%83%9C\" aria-label=\"enum 권한 열거형의 형태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>enum 권한 열거형의 형태</h3>\n<p>enum의 권한 열거형에는 주로 0,1,2,4,8과 같은 2진수가 사용된다.</p>\n<p>이는 비트 플래그를 효율적으로 활용하기 위한 방법이다.</p>\n<p>메모리의 최소 크기 단위는 1byte(8bit) 이상이다. 8비트는 8가지 상태를 저장할 수 있기 때문에, 비트 플래그를 잘 활용하면 1바이트를 사용해서 1가지 상태만 저장하는 bool 자료형보다 훨씬 효율적으로 사용할 수 있다.</p>\n<p>아래의 예시에서 바이트의 개별 비트를 비트 플래그라고 한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">enum</span> Permissions <span class=\"token punctuation\">{</span>\n  None   <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  Read   <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  Write  <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  Delete <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span>\nPermissions<span class=\"token punctuation\">.</span>Read   <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token number\">00000001</span>\nPermissions<span class=\"token punctuation\">.</span>Write  <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">00000010</span>\nPermissions<span class=\"token punctuation\">.</span>Delete <span class=\"token operator\">===</span> <span class=\"token number\">4</span> <span class=\"token operator\">===</span> <span class=\"token number\">00000100</span>\n\nReadAndWritePermission <span class=\"token operator\">=</span> Permissions<span class=\"token punctuation\">.</span>Read <span class=\"token operator\">|</span> Permissions<span class=\"token punctuation\">.</span>Write\n\nReadAndWritePermission <span class=\"token operator\">===</span> <span class=\"token number\">00000011</span> <span class=\"token punctuation\">(</span>read <span class=\"token operator\">&amp;</span> write 권한<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위처럼 권한과 관련해서 1byte로 다양한 경우의 수를 처리할 수 있기 때문에 enum의 값에는 0,1,2,4,8 … 의 형태가 많이 사용한다.</p>\n<h3 id=\"쿠키와-samesite\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4%EC%99%80-samesite\" aria-label=\"쿠키와 samesite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키와 SameSite</h3>\n<p>서버의 응답헤더 <code class=\"language-text\">set-cookie</code> 값에 <code class=\"language-text\">Domain</code>이 설정된 경우 해당 도메인을 대상으로 한 요청에만 쿠키가 전송된다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">set-cookie: foo=bar; Domain=localhost</code></pre></div>\n<p>하지만 쿠키에 별도로 설정을 하지 않는다면 크롬(<code class=\"language-text\">samesite=lax</code>)을 제외한 브라우저들은 모든 HTTP 요청에 대해 쿠키를 전송하게 되는데, 이때 사용자가 접속한 페이지와 다른 도메인으로 전송하는 쿠키인 서드 파티 쿠키를 이용해서 csrf 와 같은 공격에 노출될 수 있다.</p>\n<p><code class=\"language-text\">SameSite</code> 쿠키는 서드파티 쿠키의 보안적 문제를 해결하기 위해 존재한다. 크로스사이트로 전송하는 요청의 경우 쿠키의 전송에 제한을 건다.</p>\n<p><code class=\"language-text\">SameSite</code>에 들어갈 수 있는 구체적인 값은 다음과 같다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">None</code> - <code class=\"language-text\">SameSite</code> 를 설정하지 않았을 때와 같은 값이며, 크로스 사이트 요청의 경우에도 항상 전송된다. 즉 서드파티 쿠키도 전송된다.</p>\n<ul>\n<li>크롬의 경우 <code class=\"language-text\">SameSite = None</code>을 설정하려면 <strong>Secure</strong>(https가 적용된 요청에만 쿠키가 전송되는 옵션)를 추가해줘야한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Strict</code> - 크로스 사이트 요청에는 전송되지 않고 동일 도메인일 경우에만 전송된다. (퍼스트 파티 쿠키일 때에만 전송)</p>\n</li>\n<li>\n<p><code class=\"language-text\">Lax</code> - <code class=\"language-text\">Strict</code>에 비해 상대적으로 완화된 정책으로 대체로 서드파티 쿠키는 전송되지 않지만 몇가지 예외적인 요청에는 전송된다.</p>\n</li>\n</ul>\n<h3 id=\"top-level-navigation\" style=\"position:relative;\"><a href=\"#top-level-navigation\" aria-label=\"top level navigation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Top Level Navigation</h3>\n<p>Top Level Navigation은 <code class=\"language-text\">&lt;a></code> 앵커 태그를 클릭하거나, <code class=\"language-text\">window.location.replace</code> 등의 동작을 통해 자동으로 이뤄지는 이동을 의미한다. 302 리다이렉트를 이용한 이동도 포함한다.</p>\n<p><code class=\"language-text\">&lt;iframe></code>이나 <code class=\"language-text\">&lt;img></code>는 navigation이라 할 수 없으며, <code class=\"language-text\">&lt;iframe></code> 안에서의 페이지 이동도 역시 top level이라 할 수 없기 때문에 <code class=\"language-text\">SameSite = Lax</code>일 때 쿠키가 전송되지 않는다.</p>\n<h3 id=\"클래스-컴포넌트에-custom-hook-적용하기\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-custom-hook-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"클래스 컴포넌트에 custom hook 적용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 컴포넌트에 custom hook 적용하기</h3>\n<p>…이런 걸 해내는 사람이 있다. 그 사람이 내 친구이자 동료라니</p>\n<p><code class=\"language-text\">useToast</code>라는 custom hook을 만들고, 아래와 같은 클래스 컴포넌트가 있다고 하자.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> useToast<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ToastProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>PropsWithChildren<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">,</span> isVisible <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ToastBase</span></span>\n          <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">text</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">isVisible</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isVisible<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 wrapper HoC로 클래스 컴포넌트를 감싸는 형태다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withHasMounted</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  Comp<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ComponentClass<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>PropsWithChildren<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">>></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comp</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">useToast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withHasMounted</span><span class=\"token punctuation\">(</span>ToastProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">withHasMounted</code> 함수는 리턴값으로 함수 컴포넌트를 가지는 함수를 반환한다. 클래스 컴포넌트에서 직접 hook을 사용할 수 없으므로, HoC에서 hook을 사용하고, hook의 반환 결과를 클래스 컴포넌트에 넘겨주는 것이다.</p>\n<p>생각만 해봤지만… 직접 만든 것을 보니 괜찮은 것 같기도… 👀</p>\n<p><strong>Ref</strong> <a href=\"https://zereight.tistory.com/1175\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://zereight.tistory.com/1175</a></p>\n<h3 id=\"react-query의-isloading-vs-isfetching\" style=\"position:relative;\"><a href=\"#react-query%EC%9D%98-isloading-vs-isfetching\" aria-label=\"react query의 isloading vs isfetching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query의 isLoading vs isFetching</h3>\n<p>react-query에는 <code class=\"language-text\">isLoading</code>, <code class=\"language-text\">isFetching</code> 두 가지의 boolean 값이 있는데, 이 두 값에는 차이가 존재한다.</p>\n<ul>\n<li><code class=\"language-text\">isLoading</code> - 사전에 데이터가 없을 때, 값을 불러올 당시에 true로 변경된다.</li>\n<li><code class=\"language-text\">isFetching</code> - 데이터 요청 작업이 있기만 하면, true로 변경된다.</li>\n<li><code class=\"language-text\">refetch()</code> - 이미 데이터가 있는 경우이기 때문에 query는 <code class=\"language-text\">success</code> 상태다. 따라서 refetch의 경우 <code class=\"language-text\">isLoading</code>의 값은 true로 변경되지 않는다. <strong>stale-while-revalidate</strong> 의 원리다.</li>\n</ul>\n<h3 id=\"css-appearance-속성\" style=\"position:relative;\"><a href=\"#css-appearance-%EC%86%8D%EC%84%B1\" aria-label=\"css appearance 속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS appearance 속성</h3>\n<p>얼마나 생소하면… 검색하면 MDN보다 블로그가 먼저 나온다~!!</p>\n<p>운영체제 및 브라우저에 기본적으로 설정되어 있는 UI Control의 native appearance를 바꾸기 위한 속성이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">appearance</span><span class=\"token punctuation\">:</span> button<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-appearance</span><span class=\"token punctuation\">:</span> button<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Firefox */</span>\n  <span class=\"token property\">-webkit-appearance</span><span class=\"token punctuation\">:</span> button<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Safari and Chrome */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래 케이스들에서 사용할 수 있다.</p>\n<ul>\n<li>iOS의 폼 요소들에 부여되어 있는 둥근 테두리값이나 그림자 효과를 제거할 때</li>\n<li>webkit 계열의 브라우저의 <code class=\"language-text\">type=\"search\"</code> 필드의 둥근 테두리 값이나 reset 효과를 나타내는 버튼을 삭제하고 싶을 때</li>\n<li><code class=\"language-text\">select</code> 필드의 기본 화살표 모양을 삭제하거나 대체할 때</li>\n</ul>\n<p><strong>Ref</strong>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/appearance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/en-US/docs/Web/CSS/appearance</a>\n<a href=\"https://webdir.tistory.com/430\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://webdir.tistory.com/430</a></p>\n<h3 id=\"-property-does-not-exist-in-type-union\" style=\"position:relative;\"><a href=\"#-property-does-not-exist-in-type-union\" aria-label=\" property does not exist in type union permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚨 property does not exist in type union</h3>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> conditional <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> conditional <span class=\"token operator\">?</span> p<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>value <span class=\"token operator\">:</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드에서</p>\n<p><code class=\"language-text\">property does not exist in type union</code> 에러가 발생할 때는, 객체 프로퍼티의 소유 여부로 검사해주면 된다~!</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"payload\"</span> <span class=\"token keyword\">in</span> p <span class=\"token operator\">?</span> p<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>value <span class=\"token operator\">:</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"모바일-디바이스-픽셀은-어려워\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%B0%94%EC%9D%BC-%EB%94%94%EB%B0%94%EC%9D%B4%EC%8A%A4-%ED%94%BD%EC%85%80%EC%9D%80-%EC%96%B4%EB%A0%A4%EC%9B%8C\" aria-label=\"모바일 디바이스 픽셀은 어려워 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모바일 디바이스 픽셀은 어려워</h3>\n<p>픽셀에는 <strong>물리 픽셀</strong> 과 <strong>논리 픽셀</strong> 이 있다.</p>\n<p>모바일 디바이스는 물리적 해상도와 논리적 해상도가 다르다. 이는 모바일 프로덕트를 벡터 기반 프로그램으로 사용해야 하는 근거가 된다.</p>\n<p><strong>🌻 물리적(Physical) 해상도</strong>\n물리 픽셀 = 디바이스 픽셀로, 단말이 실제로 표현할 수 있는 물리적인 화소 기본 단위를 가리킨다.</p>\n<p>예) 사진 기본 크기</p>\n<p><strong>🌻 논리적(Logical) 해상도</strong>\n논리 픽셀 = CSS 픽셀로, 디바이스 픽셀과 무관하게 HTML/CSS에서 논리적으로 표현할 수 있는 화소 기본 단위를 가리킨다.</p>\n<p>예) 사진 출력 크기</p>\n<p>프론트엔드 개발자의 고충을 덜기 위해, <a href=\"https://viewportsizer.com/devices/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">디바이스의 픽셀을 확인할 수 있는 사이트</a>가 있다. (그러나 실제 고충이 덜어진 건진 모르겠다.)</p>\n<p>사실 아티클을 읽어봐도 무슨 말인지 잘 모르겠다. <del>역시 그때그때 대응법이 최고다.</del></p>\n<p><strong>Ref</strong> <a href=\"https://velog.io/@productuidev/%ED%95%B4%EC%83%81%EB%8F%84%5D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@productuidev/%ED%95%B4%EC%83%81%EB%8F%84]</a></p>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>parameter vs argument\n<ul>\n<li>parameter: 함수를 정의할 때 전달 받을 매개변수</li>\n<li>argument: 함수를 호출할 때 입력하는 전달인자</li>\n</ul>\n</li>\n<li>node.js 의 경우 버전에 따른 성능차도 존재하기 때문에 해당 결과를 맹목적으로 신뢰할 수는 없다. 단일 내장함수, prototype 메소드 뿐 아니라 종종 쓰이는 로직에 대해(배열 중복체크 등) 코드를 모두 작성하고 커밋하기 전에 한번은 비슷한 로직과의 퍼포먼스는 어떤지 확인하는 것이 나중에 같은 상황에서의 효율적인 코드 선택이 가능하다.</li>\n<li>드래그가 안된다면 상위 컴포넌트 스타일에 <code class=\"language-text\">user-select: none</code>이 걸려있지 않은지 확인해보자.</li>\n<li>배열 타입의 요소 타입을 알아올 때 <code class=\"language-text\">a[0]</code> 대신 <code class=\"language-text\">a[number]</code>를 사용해도 된다.</li>\n<li>클립보드에 복사하기 기능\n<ul>\n<li><code class=\"language-text\">Clipboard.writeText()</code> web API를 사용한다.</li>\n<li>ex) <code class=\"language-text\">navigator.clipboard.writeText(message)</code></li>\n</ul>\n</li>\n<li>SAP 시스템이란, 비즈니스 프로세스를 위한 포괄적인 솔루션으로, 회계 및 재무 결산을 위한 용도로 사용되는 시스템이다.</li>\n<li>ad-hoc 테스트란 비공식적이고, 자의적이고 임의적인 테스트를 의미한다. 실제 업무에서 설계한 TC를 모두 마친 후, 말그대로 예상 결과를 정의하지 않고 테스트를 하다보면 소프트웨어의 특성상 결함이 발생할 수도 있다. (<a href=\"https://ddanx2.tistory.com/96\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n</ul>\n<hr>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<h3 id=\"m1-맥북의-고성능-모드\" style=\"position:relative;\"><a href=\"#m1-%EB%A7%A5%EB%B6%81%EC%9D%98-%EA%B3%A0%EC%84%B1%EB%8A%A5-%EB%AA%A8%EB%93%9C\" aria-label=\"m1 맥북의 고성능 모드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>m1 맥북의 고성능 모드</h3>\n<p>m1 맥북에서는 <a href=\"https://support.apple.com/ko-kr/HT212852\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">고성능 모드</a>를 켤 수 있다.</p>\n<h3 id=\"measurethatnet\" style=\"position:relative;\"><a href=\"#measurethatnet\" aria-label=\"measurethatnet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MeasureThat.net</h3>\n<p><a href=\"http://measurethat.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MeasureThat.net</a>은, JavaScript 코드 성능을 온라인으로 측정할수 있는 벤치마크 툴이다. prototype 메소드 중에서 어떤 메소드가 효율적인지 빠르게 확인하기 위해서 사용할 수 있다.</p>\n<p>ex) Array.prototype → <a href=\"https://www.measurethat.net/Benchmarks/Show/8221/0/array-indexof-vs-includes-vs-some\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">indexOf vs includes vs some</a></p>\n<h3 id=\"state-of-frontend-2022\" style=\"position:relative;\"><a href=\"#state-of-frontend-2022\" aria-label=\"state of frontend 2022 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State of frontend 2022</h3>\n<p>원래 UI가 이랬나? 🤔 낯설다. 그리고 결정적으로, 재미가 없어졌다! 그냥 블로그 형식의 줄글들만… 🤮</p>\n<p><strong>Ref</strong> <a href=\"https://tsh.io/state-of-frontend/?utm_campaign=SOFE2022&#x26;utm_content=205764693&#x26;utm_medium=social&#x26;utm_source=twitter&#x26;hss_channel=tw-1672399308\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tsh.io/state-of-frontend/?utm_campaign=SOFE2022&#x26;utm_content=205764693&#x26;utm_medium=social&#x26;utm_source=twitter&#x26;hss_channel=tw-1672399308</a></p>\n<h3 id=\"npm을-효율적으로-사용하기-위한\" style=\"position:relative;\"><a href=\"#npm%EC%9D%84-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C\" aria-label=\"npm을 효율적으로 사용하기 위한 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm을 효율적으로 사용하기 위한</h3>\n<p>구글에서 새로 개발한 <a href=\"https://github.com/google/wireit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wireit</a>이라는 도구다. 로고가 힙하다. 세상이 발전하는구나. 근데… [와이레]라고 읽는 건가…? <del>와이라노… 와이라노…</del></p>\n<p>아래 feature들을 자랑하고 싶다고 한다.</p>\n<ul>\n<li>기존에 알고 있는 <code class=\"language-text\">npm run</code> 명령어를 사용할 수 있다.</li>\n<li>npm scripts들 사이의 의존성을 자동으로 병렬적으로 실행해준다.</li>\n<li>모든 script를 watch하며, 변화가 발생했을 때 지속적으로 재실행(re-run)한다.</li>\n<li>이미 최신 상태의 scripts는 스킵한다.</li>\n<li>로컬과 github에서 모두 cache 결과를 확인할 수 있다 (무료로!)</li>\n<li>단일 패키지, npm 워크스페이스, 그리고 다른 monorepo들과 함께 잘 동작한다.</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://github.com/google/wireit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/google/wireit</a></p>\n<h3 id=\"google-io\" style=\"position:relative;\"><a href=\"#google-io\" aria-label=\"google io permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Google I/O</h3>\n<p>오~ 왠지 구글에서 하는 건 다 간지나 보인다. <del>문화 사대주의</del></p>\n<p><strong>Ref</strong> <a href=\"https://io.google/2022/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://io.google/2022/</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p><del>주말에 놀고 와서 써야징</del></p>\n<p>놀고..와서.. 인생이 뜻대로 되는 일은 없다. 거의 없다!\n3년 전에 두 번 다쳐서 반깁스까지 했던 발목을 기어코 또 다치고 말았다~! 언제 또 다치나 했드만 바로 이번에! 🤩 주말이라 병원도 못가고… 셀프로 붕대 툴툴 감고 쓰레빠 끌고 스터디 첫 모임 다녀왔다 ㅎㅎ 다치는 데 능숙해버린 스물 여섯살.</p>\n<p>그리고 주말에 다시는 드라이브를 가지 않을 것 같다~! 1시간 반 거리를 3시간, 4시간 걸려서 왔당 ㅎㅎ 왕복 140km를 7시간 동안 달렸다고 하면 누가 믿으리오… 시위까지 겹쳐서 교통 통제 당하고 해탈해서 중간에 길도 잘못 들어서 울 뻔했지만 ‘나는 개짱쎈 어른이다’라고 맘을 다잡으며 다친 발을 이끌고 무사히 귀가했다… 남자친구는 그래도 왼발을 다쳐서 다행이라며 (운전은 오른발로 하니까) 🙄</p>\n<p>벌써 까마득해져버렸지만, <del>공포의</del> 새벽 배포가 있었다. 서비스를 하는 개발자의 숙명인가보다. 프론트 개발자는 조금 덜하긴 하겠지만, 그래도 정말 오랜만에 야식까지 먹고 뺨 때리며 대기탔다. 새벽에 다같이 잠긴 목소리로 대화하는 경험도 (가끔은) 추억일 것 같다. 건강 쪼렙이의 바이오리듬이 대붕괴될 것이라고 생각했으나, 대충 자고 다음날 꽤나 멀쩡했다. 꾸준한 운동으로 체력이 정말 나아진건가?</p>\n<p>그치만 이런 긍정적 신호를 세상이 두고볼 리가 없지. 다시 발목 안녕~</p>","timeToRead":15,"frontmatter":{"title":"4월 5주차 기록","date":"April 29, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-4-week-5/","previous":{"fields":{"slug":"/weekly/2022-5-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"May 07, 2022","description":"weekly-i-learned","title":"5월 1주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2022-4-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"April 24, 2022","description":"weekly-i-learned","title":"4월 4주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-5-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"May 07, 2022","description":"weekly-i-learned","title":"5월 1주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-4-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"April 24, 2022","description":"weekly-i-learned","title":"4월 4주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}