{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2024-6-week-2/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"21e10af4-d1b9-5c82-bde5-a1c9e829e5c7","excerpt":"배워가기 react-query  네트워크 연결이 끊겼을 때 query와 mutation들이 어떻게 동작할지를 결정한다.  query와 mutation은 네트워크 연결이 있을 때에만 동작한다. 기본 모드이다.  온라인/오프라인 상태와 상관없이 항상 query fetch…","html":"<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<hr>\n<h3 id=\"react-query-networkmode\" style=\"position:relative;\"><a href=\"#react-query-networkmode\" aria-label=\"react query networkmode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query <code class=\"language-text\">networkMode</code></h3>\n<p>네트워크 연결이 끊겼을 때 query와 mutation들이 어떻게 동작할지를 결정한다.</p>\n<ul>\n<li><code class=\"language-text\">networkMode: online</code>\n<ul>\n<li>query와 mutation은 네트워크 연결이 있을 때에만 동작한다. 기본 모드이다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">networkMode: always</code>\n<ul>\n<li>온라인/오프라인 상태와 상관없이 항상 query fetch를 수행한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">networkMode: offlineFirst</code>\n<ul>\n<li>위 두 개 옵션의 중간점으로, <code class=\"language-text\">queryFn</code>을 한번 실행하지만, retry는 중단한다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://tanstack.com/query/v4/docs/framework/react/guides/network-mode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tanstack.com/query/v4/docs/framework/react/guides/network-mode</a></p>\n<h3 id=\"imeinput-method-editor-입력-방식-편집기\" style=\"position:relative;\"><a href=\"#imeinput-method-editor-%EC%9E%85%EB%A0%A5-%EB%B0%A9%EC%8B%9D-%ED%8E%B8%EC%A7%91%EA%B8%B0\" aria-label=\"imeinput method editor 입력 방식 편집기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IME(Input Method Editor; 입력 방식 편집기)</h3>\n<p>한글, 한자처럼 컴퓨터 자판에 있는 글자보다 수가 더 많은 문자를 계산하거나 조합하여 입력해주는 시스템 소프트웨어</p>\n<p>예를 들어, <code class=\"language-text\">onKeyDown</code> 이벤트 발생 시 해당 이벤트를 OS와 브라우저가 모두 처리하기 때문에 한글 입력 시 중복 이벤트가 발생할 수도 있다. 이때 Keyboard Event의 <code class=\"language-text\">isComposing</code> 속성으로 현재 입력이 합성 상태인지 아닌지 알 수 있다.</p>\n<p>cf) <code class=\"language-text\">compositionStart</code>, <code class=\"language-text\">compositionEnd</code>를 이용해서 합성에 대한 이벤트를 처리할 수 있다.</p>\n<h3 id=\"nfc-nfd\" style=\"position:relative;\"><a href=\"#nfc-nfd\" aria-label=\"nfc nfd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NFC, NFD</h3>\n<ul>\n<li>NFC(Normalize Form Canonical Composition)\n<ul>\n<li>모든 음절을 정준분해하고 정준결합하는 방식</li>\n<li>ex) 가 → 가</li>\n<li>window는 한글을 NFC로 사용</li>\n</ul>\n</li>\n<li>NFD(Normalize Form Canonical Decomposition)\n<ul>\n<li>모든 음절을 정준분해해서 한글 자모 코드를 이용하는 방식</li>\n<li>ex) 가 → ㄱㅏ</li>\n<li>MAC은 한글을 NFD로 사용</li>\n</ul>\n</li>\n<li>윈도우는 크게 문제가 안되지만, 맥에서 파일이름에 제한을 두고 싶은 경우에 정규화를 생각해야 한다. NFD 방식은 모든 음절이 분해되어 표현되니, NFC를 이용해서 결합한 상태로 파일 이름을 제한해야 한다.</li>\n</ul>\n<h3 id=\"scroll-vs-getboundingclientrect-vs-intersectionobserver\" style=\"position:relative;\"><a href=\"#scroll-vs-getboundingclientrect-vs-intersectionobserver\" aria-label=\"scroll vs getboundingclientrect vs intersectionobserver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>scroll vs <code class=\"language-text\">getBoundingClientRect</code> vs <code class=\"language-text\">IntersectionObserver</code></h3>\n<ul>\n<li>\n<p><code class=\"language-text\">scroll</code>- 스크롤 시 짧은 시간 내에 수 백, 수 천의 이벤트가 동기적으로 실행될 수 있어서 성능에 악영향을 줄 수 있다. 그리고 페이지 내에 각 요소가 각기의 목적(광고, 레이지 로딩, 무한 스크롤 등)의 이유로 <code class=\"language-text\">scroll</code> 이벤트를 리스닝하기 때문에 이에 상응하는 콜백이 무수히 실행될 수 있다. 이는 메인 스레드에 큰 부하를 줄 수 있다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">getBoundingClientRect</code> - <code class=\"language-text\">reflow</code>를 발생시킬 수 있다. 본래 브라우저는 최적화를 위해 필요한 여러 작업을 묶어 큐에 쌓아 대기하다가 한 번의 <code class=\"language-text\">reflow</code> 로 처리한다. 그러나 <code class=\"language-text\">getBoundingClientRect</code> 호출시 값(top, right 등)을 정확히 읽어들이기 위해 큐를 <code class=\"language-text\">flush</code>하고 스타일을 적용함으로써 다수의 <code class=\"language-text\">reflow</code> 를 발생시킬 수 있다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">Intersection Observer API</code> - 루트 요소와 타겟 요소의 교차점을 관찰한다. 그리고 타겟 요소가 루트 요소와 교차하는지 아닌지를 구별하는 기능을 제공한다. <code class=\"language-text\">scroll</code> 이벤트와 다르게 교차 시 비동기적으로 실행되며 가시성 구분 시 <code class=\"language-text\">reflow</code>를 발생시키지 않기 때문에 성능 상 유리하다.</p>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://velog.io/@elrion018/%EC%8B%A4%EB%AC%B4%EC%97%90%EC%84%9C-%EB%8A%90%EB%82%80-%EC%A0%90%EC%9D%84-%EA%B3%81%EB%93%A4%EC%9D%B8-Intersection-Observer-API-%EC%A0%95%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@elrion018/실무에서-느낀-점을-곁들인-Intersection-Observer-API-정리</a></p>\n<h3 id=\"react-testing-library의-not-wrapped-in-act-에러-원인-및-해결-방법\" style=\"position:relative;\"><a href=\"#react-testing-library%EC%9D%98-not-wrapped-in-act-%EC%97%90%EB%9F%AC-%EC%9B%90%EC%9D%B8-%EB%B0%8F-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"react testing library의 not wrapped in act 에러 원인 및 해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-testing-library의 ‘not wrapped in act’ 에러 원인 및 해결 방법</h3>\n<p>다음 에러</p>\n<p><code class=\"language-text\">When testing, code that causes React state updates should be wrapped into act(...):</code></p>\n<p>🤯</p>\n<ol>\n<li>비동기 업데이트</li>\n</ol>\n<p>컴포넌트가 비동기 API를 호출하고 그 응답값을 state에 저장하는 경우, 컴포넌트 업데이트는 React 콜스택 바깥에서 이루어진다.</p>\n<p>-> <code class=\"language-text\">waitFor</code> 비동기 함수를 사용하여 컴포넌트 업데이트가 완료될 때까지 기다릴 수 있다.</p>\n<ol start=\"2\">\n<li>Fake Timer</li>\n</ol>\n<p>컴포넌트 내부에 <code class=\"language-text\">setTimeout</code> 또는 <code class=\"language-text\">setInterval</code>을 사용하는 경우, 테스트 코드에서 타이머 함수를 <code class=\"language-text\">jest.useFakeTimers()</code>로 mocking하고 <code class=\"language-text\">jest.advanceTimersByTime(msToRun)</code>으로 실행할 수 있다.</p>\n<p>-> 컴포넌트를 업데이트하고 있기 때문에 <code class=\"language-text\">act()</code>로 감싸주어야 한다.</p>\n<ol start=\"3\">\n<li>렌더링/업데이트 전에 테스트가 종료됨</li>\n</ol>\n<p>ex) 조건문을 통해 컴포넌트를 렌더링하는 코드에서, 응답으로 컴포넌트가 설정되기 전에 테스트가 종료되는 경우</p>\n<p>-> <code class=\"language-text\">waitFor</code>를 통해 컴포넌트의 렌더링을 기다린다.</p>\n<h3 id=\"merge-train\" style=\"position:relative;\"><a href=\"#merge-train\" aria-label=\"merge train permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Merge Train</h3>\n<p>여러 MR을 순차적으로 병합하는 기능</p>\n<p>🚂 첫 번째 MR 병합\n✅ 성공\n🚂 다음 MR을 병합\n✅ 성공\n…</p>\n<p>왜 필요할까?</p>\n<p>CI/CD 파이프라인에서 병합 과정의 안정성을 높일 수 있다.</p>\n<p>그리고 각 MR이 병합되기 전에 CI/CD 파이프라인에서 빌드/테스트를 수행해서 실패 및 merge conflict를 방지할 수 있다.</p>\n<h3 id=\"browserrouter-vs-memoryrouter\" style=\"position:relative;\"><a href=\"#browserrouter-vs-memoryrouter\" aria-label=\"browserrouter vs memoryrouter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BrowserRouter vs MemoryRouter</h3>\n<ul>\n<li><code class=\"language-text\">BrowserRouter</code> - 브라우저 빌트인 히스토리 API를 사용 -> 프로덕션 환경에 적합</li>\n<li><code class=\"language-text\">MemoryRouter</code> - 내부 Array 사용하여 히스토리를 관리 -> 테스트 환경에 적합\n<ul>\n<li><code class=\"language-text\">initialEntries[]</code> - prop을 확장해서 RTL 렌더링을 하면, 컴포넌트 안에서 <code class=\"language-text\">useLocation</code> 등 react-router 훅을 일일이 모킹할 필요가 없어진다.</li>\n<li><code class=\"language-text\">initialEntries={[\"/users/1?test=test\"]}</code>와 같이 파라미터들을 테스트 코드 안에서 제어할 수 있기 때문이다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"이것저것-모음집\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83-%EB%AA%A8%EC%9D%8C%EC%A7%91\" aria-label=\"이것저것 모음집 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것 모음집</h2>\n<hr>\n<ul>\n<li>DAMP 원칙 - <strong>Descriptive and Meaningful Phrases</strong>의 약자로, 의미있고 설명적인 구문을 사용하라는 원칙. 테스트 코드에는 스마트한 로직보다 직설적인 코드를 작성한다.</li>\n</ul>\n<h2 id=\"기타공유\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80%EA%B3%B5%EC%9C%A0\" aria-label=\"기타공유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타공유</h2>\n<hr>\n<h3 id=\"마이크로소프트의-react-탈출기\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%86%8C%ED%94%84%ED%8A%B8%EC%9D%98-react-%ED%83%88%EC%B6%9C%EA%B8%B0\" aria-label=\"마이크로소프트의 react 탈출기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마이크로소프트의 React 탈출기</h3>\n<p>공용 번들과 파일을 공유하는 다른 컴포넌트 개발에서의 이슈 및 UI 성능 문제로 React를 벗어난다!</p>\n<p>React 대신 사용하게 된 웹 UI 2.0마크업 퍼스트 아키텍처는 커다란 코드 번들 문제를 해결해서 크기를 줄인다.</p>\n<p>이제 세상은 어떻게 되는 걸까 😲</p>\n<p><strong>Ref</strong> <a href=\"https://javascript.plainenglish.io/microsoft-is-ditching-react-f8b952b92b9b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://javascript.plainenglish.io/microsoft-is-ditching-react-f8b952b92b9b</a></p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<hr>\n<p>인사이드 아웃2 개봉하자마자 보러 갔다왔다.</p>\n<p>울라고 만든 영화는 아닐 텐데, 불안이 땜시 혼자 오열한 사람 저요</p>\n<p>여운인지 힘든 감정인지 오래오래 남을 것 같다.</p>","timeToRead":5,"frontmatter":{"title":"6월 2주차 기록","date":"June 15, 2024","description":"날 미치게 만든 불안이 😵‍💫","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2024-6-week-2/","previous":null,"next":{"fields":{"slug":"/weekly/2024-6-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"June 08, 2024","description":"끝나지 않는 휴일 🚗","title":"6월 첫주차 기록","tags":["weekly"]}},"previousInSameTag":null,"nextInSameTag":{"fields":{"slug":"/weekly/2024-6-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"June 08, 2024","description":"끝나지 않는 휴일 🚗","title":"6월 첫주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}