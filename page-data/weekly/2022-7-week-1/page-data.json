{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-7-week-1/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"d9c27c72-48a5-58e5-8cee-9a9dc6aa4282","excerpt":"여름이닷 배워가기 URL에서 pathname, parameter 가져오기 URL에서 , 를 우아하게 가져올 수 있다. Ref https://developer.mozilla.org/en-US/docs/Web/API/URL inner border line 그리기 inner border…","html":"<p>여름이닷</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"url에서-pathname-parameter-가져오기\" style=\"position:relative;\"><a href=\"#url%EC%97%90%EC%84%9C-pathname-parameter-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" aria-label=\"url에서 pathname parameter 가져오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL에서 pathname, parameter 가져오기</h3>\n<p>URL에서 <code class=\"language-text\">pathname</code>, <code class=\"language-text\">parameter</code>를 우아하게 가져올 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// URL 사용하지 않고 특정 path를 가져올 때</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pathname <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> pathname<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// URL을 사용해서 가져올 때</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pathname <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/en-US/docs/Web/API/URL</a></p>\n<h3 id=\"inner-border-line-그리기\" style=\"position:relative;\"><a href=\"#inner-border-line-%EA%B7%B8%EB%A6%AC%EA%B8%B0\" aria-label=\"inner border line 그리기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inner border line 그리기</h3>\n<p>inner border line을 그리고 싶을 때, 일반적으로 <code class=\"language-text\">box-sizing: border-box</code>를 사용하는데, 해당 케이스는 width나 height이 특정값으로 고정되어있을 때만 inner-border-line이 생긴다.</p>\n<p>width, height이 auto 값으로 쓰여지는 경우가 생기면 예상과는 다르게 outside-border-line이 생긴다. 이런 경우에는 <code class=\"language-text\">box-shadow</code>로 inner-border-line을 만들 수 있다.</p>\n<h3 id=\"useimperativehandle\" style=\"position:relative;\"><a href=\"#useimperativehandle\" aria-label=\"useimperativehandle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useImperativeHandle</h3>\n<p><code class=\"language-text\">useImperativeHandle</code>은 <code class=\"language-text\">ref</code>를 사용할 때 부모 컴포넌트에 노출되는 인스턴스 값을 사용자화(customizes)한다. (즉 ref를 사용하는 부모 측에서 커스터마이징된 메서드를 사용할 수 있게 해준다.) <code class=\"language-text\">forwardRef</code>와 함께 사용되는 훅이며, 새로운 <code class=\"language-text\">ref</code>에 커스터마이징 작업을 할 수 있다. 아래 예시에서처럼 <code class=\"language-text\">FancyInput</code> 컴포넌트를 사용하는 곳에서 커스터마이징된 값을 이용할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FancyInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">focus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nFancyInput <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>FancyInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// FancyInput 컴포넌트를 사용하는 곳</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">FancyForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ FancyInput의 `useImperativeHandle` 내 `focus` 함수를 실행한다.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FancyInput</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputRef<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://ko.reactjs.org/docs/hooks-reference.html#useimperativehandle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.reactjs.org/docs/hooks-reference.html#useimperativehandle</a></p>\n<h3 id=\"a-download\" style=\"position:relative;\"><a href=\"#a-download\" aria-label=\"a download permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">&lt;a download/></code></h3>\n<p><code class=\"language-text\">&lt;a /></code> 태그에 download 속성을 넣으면 href 경로에서 파일을 다운 받을 수 있는데, 해당 경로의 파일이 이미지라면 미리보기를, docx같은 파일이면 바로 다운로드 창이 뜬다.</p>\n<p>이미지 또한 바로 다운로드창을 띄우고 싶으면 해당 경로에 대해 fetch를 사용해서 응답값을 받고, blob, URL, createObjectURL 등을 사용해서 링크를 새로 만들어서 받아온다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"no-cors\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> blobUrl <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> fileName <span class=\"token operator\">||</span> <span class=\"token string\">\"download\"</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> blobUrl<span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"basic-auth\" style=\"position:relative;\"><a href=\"#basic-auth\" aria-label=\"basic auth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic Auth</h3>\n<p>Basic Auth는 하나의 HTTP 인증 방식이다.</p>\n<p>username과 pw를 Base64 인코딩 해서 <code class=\"language-text\">Basic -</code>의 형식으로 보내는 방식이다.</p>\n<p>헤더에 Bearer AccessToken 보내는 방식과 유사하지만, Basic Auth 방식에서는 username, pw을 axios 요청에 넣어주면 axios가 알아서 Base64로 인코딩 처리해준다. 그후 요청을 열어보면, <code class=\"language-text\">Authorization: Basic ZGVtbzpwQDU1dzByZA==</code>과 같은 형식으로 들어가 있다.</p>\n<p><strong>Ref</strong> <a href=\"https://stackoverflow.com/questions/34013299/web-api-authentication-basic-vs-bearer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/34013299/web-api-authentication-basic-vs-bearer</a></p>\n<h3 id=\"shell-command-이것저것\" style=\"position:relative;\"><a href=\"#shell-command-%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"shell command 이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shell command 이것저것</h3>\n<ul>\n<li><code class=\"language-text\">chmod +x</code> - 실행권한을 부여하는 명령어이다.</li>\n<li><code class=\"language-text\">grep</code> - 현재 프로젝트에서 특정 문자열의 위치들을 찾을 수 있다. (vs code 검색기능이랑 동일)</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># -I 는 binary 파일 제외, r은 재귀적으로 탐색, n은 라인넘버 추출, w는 단어가 whole matching인 것만\ngrep --exclude-dir={\"/User/...\", ...} -I -rnw \"${brosMobileDir}\" -e \"$imageName\"</code></pre></div>\n<ul>\n<li><code class=\"language-text\">wc -w</code> - 문자열의 word 매칭개수를 반환한다.</li>\n<li><code class=\"language-text\">tr -d ' '</code> - trim 기능을 구현할 수 있다.</li>\n</ul>\n<h3 id=\"superstruct의-assign\" style=\"position:relative;\"><a href=\"#superstruct%EC%9D%98-assign\" aria-label=\"superstruct의 assign permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>superstruct의 assign()</h3>\n<p>superstruct 의 <code class=\"language-text\">assign()</code> 유틸 함수는 자바스크립트의 <code class=\"language-text\">Object.assign()</code>과 유사하지만 첫번째 파라미터로 전달된 것과 동일한 구조체를 반환한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ✅ 첫번째 파라미터가 type이기 때문에, 아래 구조체는 type이 된다.</span>\n  <span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">walk</span><span class=\"token operator\">:</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jill\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">race</span><span class=\"token operator\">:</span> <span class=\"token string\">\"human\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">walk</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> schema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></code></pre></div>\n<h3 id=\"타입스크립트-어서션assertion\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B4%EC%84%9C%EC%85%98assertion\" aria-label=\"타입스크립트 어서션assertion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 어서션(assertion)</h3>\n<p>타입스크립트에서 타입가드를 위해 <code class=\"language-text\">is</code>를 사용할 수도 있지만, <code class=\"language-text\">asserts</code> 키워드와 함께 사용해서 에러를 throw하는 방식으로도 타입가드를 할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> v is <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> v <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> assert2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> asserts v is <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> v <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">v</span><span class=\"token operator\">:</span> unknown</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ✅ 여기서 v의 타입은 string이 된다</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ✅ v가 string이 아니라면 Error를 throw한다.</span>\n  <span class=\"token comment\">// ✅ v가 string이라면 런타임에서 문제가 없지만, 이후에 v의 타입이 string이 된다</span>\n  <span class=\"token function\">assert2</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 위에서 throw Error가 되지 않으면 v는 string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"forwardref에서-children이-되지-않는-이유\" style=\"position:relative;\"><a href=\"#forwardref%EC%97%90%EC%84%9C-children%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"forwardref에서 children이 되지 않는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>forwardRef에서 children이 되지 않는 이유</h3>\n<p><code class=\"language-text\">forwardRef</code>를 사용한 아래 예시 코드를 살펴보자.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChildProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ChildComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>forwardRef<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token punctuation\">,</span> ChildProps<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ParentComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> useRef<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HTMLInputElement</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(null);\n\n  return (\n    // 🚨 Property 'children' does not exist on type 'IntrinsicAttributes &amp; ChildProps &amp; RefAttributes&lt;HTMLInputElement>'\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildComponent</span></span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello child<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputRef<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">children을 넣어주고 싶어요</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChildComponent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  );\n};</span></code></pre></div>\n<p><code class=\"language-text\">ParentComponent</code>에서 <code class=\"language-text\">ChildComponent</code>를 렌더링할 때, <code class=\"language-text\">ChildComponent</code>에 <code class=\"language-text\">children</code> prop을 끼워넘기면 에러가 발생한다. 물론 <code class=\"language-text\">ChildProps</code>에 <code class=\"language-text\">children: React.ReactNode</code>를 명시적으로 넣어서 해결해줄 수도 있지만, <code class=\"language-text\">forwardRef</code>의 타입 시그니처가 아래와 같이 되어 있어서 <code class=\"language-text\">children</code>을 명시해주지 않아도 <code class=\"language-text\">children</code> prop이 자동으로 들어갈 것이라고 생각했다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> forwardRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>render<span class=\"token operator\">:</span> ForwardRefRenderFunction<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ForwardRefExoticComponent<span class=\"token operator\">&lt;</span>PropsWithoutRef<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> &amp; RefAttributes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">>;\n\ninterface ForwardRefRenderFunction&lt;T, P = </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">> </span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> PropsWithChildren<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">, ref: ForwardedRef</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">): ReactElement | null;\n  displayName?: string | undefined;\n  defaultProps?: never | undefined;\n  propTypes?: never | undefined;\n}</span></code></pre></div>\n<p><code class=\"language-text\">forwardRef</code>의 인자로 들어가는 <code class=\"language-text\">render()</code> 함수의 타입인 <code class=\"language-text\">ForwardRefRenderFunction</code>의 타입 시그니처에는 <code class=\"language-text\">(props: PropsWithChildren&lt;P>)</code>가 있지 않은가? 🤔</p>\n<p>이 문제로 몇날을 속썩이다가, 동기가 한 의견을 제시해주었다. <code class=\"language-text\">forwardRef</code>의 타입 시그니처 <code class=\"language-text\">function forwardRef&lt;T, P = {}></code>에서 <code class=\"language-text\">P</code>에 <code class=\"language-text\">children</code>이 없다면, <code class=\"language-text\">forwardRef</code>의 리턴 타입인 <code class=\"language-text\">&lt;PropsWithoutRef&lt;P> &amp; RefAttributes&lt;T>></code>에도 <code class=\"language-text\">children</code>이 들어가지 않을 것이다!</p>\n<p><code class=\"language-text\">render()</code> 함수의 인자 타입이 <code class=\"language-text\">PropsWithChildren&lt;P></code>이라는 사실에만 꽂혀서, 리턴 타입을 보지 못했던 것이다! 😵</p>\n<h3 id=\"esconfigts의-typescript-rules\" style=\"position:relative;\"><a href=\"#esconfigts%EC%9D%98-typescript-rules\" aria-label=\"esconfigts의 typescript rules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>esconfig.ts의 typescript rules</h3>\n<ul>\n<li>“off” - 0 (rule을 완전히 끈다.)</li>\n<li>“warn” - 1 (rule을 켜두긴 하지만, linter가 실패하진 않는다.)</li>\n<li>“error” - 2 (rule을 켜두며, linter가 실패한다.)</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">@typescript-eslint/eslint-plugin</code>에서 지원하는 rules\n<a href=\"https://www.npmjs.com/package/@typescript-eslint/eslint-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@typescript-eslint/eslint-plugin</a></p>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://khalilstemmler.com/blogs/typescript/eslint-for-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to use ESLint with TypeScript | Khalil Stemmler</a></p>\n<h3 id=\"함수-파라미터는-반변한다는-사실의-쉬운-예시\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EB%8A%94-%EB%B0%98%EB%B3%80%ED%95%9C%EB%8B%A4%EB%8A%94-%EC%82%AC%EC%8B%A4%EC%9D%98-%EC%89%AC%EC%9A%B4-%EC%98%88%EC%8B%9C\" aria-label=\"함수 파라미터는 반변한다는 사실의 쉬운 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 파라미터는 반변한다는 사실의 쉬운 예시</h3>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Don't force these extra parameters</span>\nitems<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Should be OK!</span>\nitems<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>보통의 경우 타입스크립트에서 타입 체크는 초과 속성을 허용하지만(공변), 함수의 인자 타입은 그 반대로 동작한다. (반변) <code class=\"language-text\">forEach()</code> 메서드를 보면 알 수 있는데, <code class=\"language-text\">item</code>, <code class=\"language-text\">index</code>, <code class=\"language-text\">array</code> 3가지의 인자를 모두 사용하지 않더라도 <code class=\"language-text\">forEach()</code> 함수의 콜백 인자로 넘겨줄 수 있다!</p>\n<p><strong>Ref</strong> <a href=\"https://www.typescriptlang.org/docs/handbook/type-compatibility.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Documentation - Type Compatibility</a></p>\n<h3 id=\"package-lockjson의-lockfileversion\" style=\"position:relative;\"><a href=\"#package-lockjson%EC%9D%98-lockfileversion\" aria-label=\"package lockjson의 lockfileversion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package-lock.json의 <code class=\"language-text\">lockfileVersion</code></h3>\n<ul>\n<li><code class=\"language-text\">1</code>: npm v5와 v6에서 사용하는 lockfileVersion</li>\n<li><code class=\"language-text\">2</code>: npm v7에서 사용하는 lockfileVersion으로, v1 lockfiles과 호환된다.</li>\n<li><code class=\"language-text\">3</code>: npm v7에서 사용하는 lockfileVersion으로, 이전의 버전들과 호환되지 않는다. <code class=\"language-text\">node_modules/.package-lock.json</code>의 숨겨진 lockfile에서 사용되며, npm v6 지원이 더 이상 필요하지 않을 때 npm의 추후 버전에서 사용될 것이다.</li>\n</ul>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://jopemachine.github.io/2021/11/09/Package-Lock-Json-Lockfile-Version/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">package-lock.json의 lockfileVersion에 대해 - Development Notes</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v8/configuring-npm/package-lock-json#lockfileversion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">package-lock.json | npm Docs</a></li>\n</ul>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>\n<p>RN 테스트코드를 작성할 때에는 OS도 모킹해줘야한다. OS를 모킹하지 않으면 mac 로컬에서는 iOS로 인식하여 통과하지만, CI에서는 iOS가 아니라서 Fail이 될 수 있다.</p>\n</li>\n<li>\n<p>android studio로 에뮬레이터를 돌릴 때, 갤럭시 기기와 에뮬레이터 사이즈를 비교해보고 싶다면 <a href=\"https://developer.samsung.com/galaxy-emulator-skin/galaxy-s.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.samsung.com/galaxy-emulator-skin/galaxy-s.html</a> 에서 확인할 수 있다. 스킨도 다운받아서 에뮬레이터를 갤럭시처럼 꾸밀 수도 있다.</p>\n</li>\n<li>\n<p>스크린 리더가 필요할 때 Mac 기준 - 시스템 환경설정 → 손쉬운 사용 → VoiceOver 를 사용하면 된다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">nvm use</code> - 현재 터미널에서의 node 버전을 변경하는 명령어이다. 새로운 터미널에서도 지정한 node 버전을 유지하려면 <code class=\"language-text\">nvm alias default</code> 로 지정해야 한다.</p>\n</li>\n<li>\n<p>uuid는 universally unique identifier의 약자로, ‘범용 고유 식별자’를 의미한다.</p>\n</li>\n<li>\n<p>jest 에서 실제 라이브러리의 일부만 모킹해줄 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// redux mocking</span>\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> actualRedux <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">requireActual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>actualRedux<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">useDispatch</span><span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">touchstart</code>, <code class=\"language-text\">touchmove</code>, <code class=\"language-text\">touchend</code> 이벤트가 발생하였을 때 <code class=\"language-text\">event.preventDefault()</code>를 호출하여 해당 event를 cancel하면 이후의 <code class=\"language-text\">click</code> 이벤트가 발생하지 않는다. (<a href=\"https://w3c.github.io/touch-events/#mouse-events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n</li>\n<li>\n<p>safari on iOS에서 체크박스 를 빠르게 클릭 시 좌표가 보정되는 이유는, <code class=\"language-text\">dblclick</code> 이벤트 핸들러가 설정되어 있기 때문이다. (react 에서는 root element에 모든 이벤트 핸들러를 등록해두기 때문에, 의도치않게 항상 <code class=\"language-text\">dblclick</code> 이벤트 핸들러가 설정되어 있다.) (<a href=\"https://github.com/facebook/react/blob/2c8a1452b82b9ec5ebfa3f370b31fda19610ae92/packages/react-dom/src/events/DOMPluginEventSystem.js#L389\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n</li>\n<li>\n<p><code class=\"language-text\">jest.mock()</code>의 3번째 인자로 <code class=\"language-text\">{ virtual: true }</code> 를 주면 mocking하려던 모듈이 자바스크립트 상에 존재하지 않아도 모킹할 수 있다. (ex. RN에서 native module)</p>\n</li>\n<li>\n<p>DOM Tree를 순회할 수 있는 API가 존재한다. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n</li>\n<li>\n<p>인터페이스 설계는 상황이 변경됨(추가, 수정, 삭제)에 따라 좌지우지 되면 안된다. 설계 초기에는 상황을 잘 모르거나, 달라질 수 있는 부분이 많이 존재하기 때문에 다 열어주는 형식으로 만들어서 추후 변경에 취약하지 않게끔 설계해야한다.</p>\n</li>\n<li>\n<p>storybook은 preview iframe을 입맛대로 다룰 수 있게 html을 사용할 수 있게 지원해준다. <code class=\"language-text\">.storybook</code> 폴더 아래에 preview-body.html 과 preview-head.html 을 만들어서 적절히 사용할 수 있다.</p>\n</li>\n<li>\n<p>storybook 에서 addons panel이 사라져 안보이는 경우가 cache로 남아서, controls 등 인터렉티브를 다룰 때 불편해질 수 있는 상황이 있다. 이는 스토리북의 고질적인 문제이며 <code class=\"language-text\">localStorage.clear()</code>를 통해 해결할 수 있다. storybook의 preview-body.html에 script로 localStorage.clear() 해주는 코드를 추가하면 이 동작을 자동화할 수 있다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">@storybook/addon-viewport</code> 라이브러리를 통해 기본적인 (갤럭시, 아이폰, 태블릿 기종별) 모바일 view에서 디자인을 확인할 수 있다. 추가적으로 사이즈를 커스텀해서 등록할 수 있는 기능도 포함되어있다.</p>\n</li>\n<li>\n<p>CRA 환경에서 ESBuild 를 사용하면(craco-esbuild plugin) babel 을 esbuild 로 대체하기 때문에 babel 구성이 사용되지 않는다. <a href=\"https://github.com/pradel/create-react-app-esbuild/issues/61\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue</a>\n질문에 대한 답에 따르면 <code class=\"language-text\">babel-loader</code> 와 <code class=\"language-text\">esbuild-loader</code> 를 동시에 사용하는 신박한 <a href=\"https://github.com/privatenumber/esbuild-loader/issues/99\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">방법</a>이 있는데, <code class=\"language-text\">esbuild</code> 사용의 속도 이점을 누릴 수 없기 때문에 권장하지 않는 방법이라고 한다.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<h3 id=\"esbuild\" style=\"position:relative;\"><a href=\"#esbuild\" aria-label=\"esbuild permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ESBuild</h3>\n<p>차세대 자바스크립트 번들러로, 문서에 따르면 webpack5 보다 125배 빠르다고 한다. (5^3…? 😲)</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/evanw/esbuild\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/evanw/esbuild</a></p>\n<h3 id=\"playwright\" style=\"position:relative;\"><a href=\"#playwright\" aria-label=\"playwright permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Playwright</h3>\n<p>모든 브라우저/플랫폼을 하나의 API로 테스트할 수 있는(?!) e2e 테스트 라이브러리다.</p>\n<p><strong>Ref</strong> <a href=\"https://playwright.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://playwright.dev/</a></p>\n<h3 id=\"esbuild-kittsx\" style=\"position:relative;\"><a href=\"#esbuild-kittsx\" aria-label=\"esbuild kittsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>esbuild-kit/tsx</h3>\n<p>ts-node 를 대체할 수 있는 타입스크립트 실행 도구로, esbuild 로 컴파일 하기 때문에 빠르다.</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/esbuild-kit/tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/esbuild-kit/tsx</a></p>\n<h3 id=\"esbuild-loader\" style=\"position:relative;\"><a href=\"#esbuild-loader\" aria-label=\"esbuild loader permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>esbuild-loader</h3>\n<p>웹팩 내 빌드 속도 향상을 위한 툴이다. <a href=\"https://github.com/privatenumber/esbuild-loader#css-assets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESBuildMinifyPlugin</a> 이 내장 되어있어 TerserPlugin, CSSMinimizerPlugin 등 파일 축소를 위해 직접 사용했던 플러그인들을 대체할 수 있다.</p>\n<h3 id=\"nextjs-122\" style=\"position:relative;\"><a href=\"#nextjs-122\" aria-label=\"nextjs 122 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next.js 12.2</h3>\n<p>아직 Next를 제대로 써본 않았지만~\n미들웨어를 여러 개 정의할 수 없는 꽤 큰 변화가 있었다고 한다!</p>\n<p><strong>Ref</strong> <a href=\"https://nextjs.org/blog/next-12-2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nextjs.org/blog/next-12-2</a></p>\n<h3 id=\"fresh-10\" style=\"position:relative;\"><a href=\"#fresh-10\" aria-label=\"fresh 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fresh 1.0</h3>\n<p>Frech stable 첫 번째 버전으로, Deno를 위한 풀스택 웹 프레임워크라고 한다. 클라이언트에 자바스크립트 코드를 보내지 않는다는데, 정체가 뭐지?</p>\n<p>CSR은 상당히 무겁고, 몇몇 새로운 프레임워크들은 SSR을 지원한다. 하지만 대부분의 경우 모든 렌더링을 클라이언트에 위임하기 때문에 UX 경험이 좋지 않다.</p>\n<p>Fresh는 클라이언트에 자바스크립트를 전달하지 않는다! 대부분의 내용은 서버에서 렌더링이 끝나며, 클라이언트는 아주 작은 양의 상호작용만 맡게 된다. 서버에서는 JIT 방식의 렌더링을 제공하며, Fresh를 이용하여 서버 데이터를 불러오는 코드도 작성할 수 있다. 그리고 클라이언트에서는 <strong>Islands</strong>라고 불리는 컴포넌트를 사용하는데, 이들은 클라이언트에서 re-hydration된다.</p>\n<p>Preact(!)와 JSX를 사용하는 상당히 fancy한 프레임워크이며, 라우팅은 Next.js를 흉내낸, 믹스덩어리같아 보인다.</p>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://deno.com/blog/fresh-is-stable\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://deno.com/blog/fresh-is-stable</a></li>\n<li><a href=\"https://fresh.deno.dev/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fresh.deno.dev/docs/introduction</a></li>\n</ul>\n<h3 id=\"stackoverflow-2022\" style=\"position:relative;\"><a href=\"#stackoverflow-2022\" aria-label=\"stackoverflow 2022 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stackoverflow 2022</h3>\n<p><strong>Ref</strong> <a href=\"https://survey.stackoverflow.co/2022/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://survey.stackoverflow.co/2022/</a></p>\n<h3 id=\"jsconf-2022\" style=\"position:relative;\"><a href=\"#jsconf-2022\" aria-label=\"jsconf 2022 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSconf 2022</h3>\n<p>노들섬~ 짱 가깝다 😆</p>\n<p><strong>Ref</strong> <a href=\"https://2022.jsconf.kr/ko\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://2022.jsconf.kr/ko</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>너어어어무 덥다! 가 아니고 습하다! 밖에 거의 나가지 않는데도, 잠깐만 나가는 순간 바로 집 가고 싶어진다. 어쩔 수 없는 여름…</p>\n<p>오랜만에 멋사 운영진들을 만났다. 다들 어엿한 직장인이 되어 비슷한 고민들 생각들을 나누고 있었다. 그래도 여전히 초딩같은 생각과 말과 웃음포인트들이 남아있어서 즐거웠던 시간 ☺️</p>","timeToRead":12,"frontmatter":{"title":"7월 1주차 기록","date":"July 02, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-7-week-1/","previous":{"fields":{"slug":"/weekly/2022-7-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"July 09, 2022","description":"weekly-i-learned","title":"7월 2주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2022-6-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"June 25, 2022","description":"weekly-i-learned","title":"6월 4주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-7-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"July 09, 2022","description":"weekly-i-learned","title":"7월 2주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-6-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"June 25, 2022","description":"weekly-i-learned","title":"6월 4주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}