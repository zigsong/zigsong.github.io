{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-5-week-2/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"cbf74de5-9465-585a-8a1f-04440ed66b33","excerpt":"양평같은 방 아니고 진짜 양평 배워가기 워룸, WBS, 간트차트 워룸(War Room…","html":"<p>양평같은 방 아니고 진짜 양평</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"워룸-wbs-간트차트\" style=\"position:relative;\"><a href=\"#%EC%9B%8C%EB%A3%B8-wbs-%EA%B0%84%ED%8A%B8%EC%B0%A8%ED%8A%B8\" aria-label=\"워룸 wbs 간트차트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>워룸, WBS, 간트차트</h3>\n<ul>\n<li>워룸(War Room)\n<ul>\n<li>전쟁이 벌어졌을 때, 지휘관과 참모들이 모여 전쟁 상황을 한눈에 파악하고 작전을 세우는 곳이라는 의미다. 긴급한 일이나 위기 상황에 대처하기 위하여 마련한 상황실을 비유적으로 이르는 말.</li>\n<li>* 작전실, 전시 작전상황실, 종합상황실으로도 불린다.</li>\n</ul>\n</li>\n<li>WBS\n<ul>\n<li>업무 분류 체계(Work breakdown structure)는 <code class=\"language-text\">종속 관계</code>를 바탕으로 프로젝트 결과물이 나오기까지의 단계를 여러 계층으로 나눠 시각적으로 분류한 것이다. 즉, 프로젝트를 진행하기 위해(또는 결과를 위해) 필요한 정보들을 파악할 수 있도록 하는 딜리버러블 지향(결과물을 도출할 수 있도록 하는) 분업 구조를 의미한다.</li>\n<li>칸반보드, 타임라인, 간트 차트, 캘린더 등 특정한 수단을 활용하여 시각적으로 나타낼 수 있다.</li>\n</ul>\n</li>\n<li>간트차트\n<ul>\n<li>프로젝트 일정 추적관리를 위해 사용하는 도구로서, 각 업무별로 걸리는 시간(또는 걸릴것이라고 예상한 시간)을 가로 막대 형태(바형태)로 나타낸다. Karol Adamiecki의 하모노그램과 Henry Gantte의 공장 작업 소요시간 나타내는 차트 시스템이 통합되어 오늘날 간트 차트가 되었다. 또한 업무간의 관계도 알 수 있어서 종속관계(연관성)를 파악하기 쉽다. 보통은 일정(바), 담당자, 마일스톤, 업무간의 관계정도만 표현한다.</li>\n<li>간트차트는 프로젝트를 설계할 때 작성하는데에 유용하다. 정보를 많이 기입해야하면 한눈에 파악할 수 있다는 장점이 사라질 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"errorboundary는-await-함수의-에러만\" style=\"position:relative;\"><a href=\"#errorboundary%EB%8A%94-await-%ED%95%A8%EC%88%98%EC%9D%98-%EC%97%90%EB%9F%AC%EB%A7%8C\" aria-label=\"errorboundary는 await 함수의 에러만 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ErrorBoundary는 <code class=\"language-text\">await</code> 함수의 에러만!</h3>\n<p>ErrorBoundary는 <code class=\"language-text\">await</code>하지 않은 비동기 함수에서의 에러는 감지하지 못한다. 추가로 아래 2가지 경우에서도 에러를 감지하지 못한다.</p>\n<ul>\n<li>이벤트 핸들러</li>\n<li>비동기적 코드 (예: <code class=\"language-text\">setTimeout</code> 혹은 <code class=\"language-text\">requestAnimationFrame</code> 콜백)</li>\n<li>서버 사이드 렌더링</li>\n<li>자식에서가 아닌 에러 경계 자체에서 발생하는 에러</li>\n</ul>\n<p><code class=\"language-text\">await</code>하지 않고 실행한 비동기 함수는 리액트의 render와 commit phase 밖에서 동작하기 때문이다. 우회적으로 <code class=\"language-text\">await</code> 하지 않은 비동기 함수의 <code class=\"language-text\">catch</code> 문에서 에러를 던지고 싶다면, hook 내부에서 에러를 던지는 방법으로 작성하는 방식이 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이를 재사용 가능한 hook으로 만들면 다음과 같다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useAsyncError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>setError<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><strong>React의 render vs commit phase</strong></p>\n<ul>\n<li><strong>render phase</strong>에서는 JSX 코드를 JavaScript 표현식으로 바꿔 Virtual DOM을 생성한다.</li>\n<li><strong>commit phase</strong>에서는 위 표현식을 실제 DOM에 반영한다.\n👩‍🏫 이 모든 과정을 통틀어 <strong>재조정(reconciliation)</strong> 이라고 한다.</li>\n</ul>\n</blockquote>\n<p><strong>Ref</strong>\n<a href=\"https://github.com/facebook/react/issues/14981#issuecomment-468452682\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/facebook/react/issues/14981#issuecomment-468452682</a>\n<a href=\"https://medium.com/trabe/catching-asynchronous-errors-in-react-using-error-boundaries-5e8a5fd7b971\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/trabe/catching-asynchronous-errors-in-react-using-error-boundaries-5e8a5fd7b971</a>\n<a href=\"https://dev.to/thee_divide/reconciliation-react-rendering-phases-56g2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dev.to/thee_divide/reconciliation-react-rendering-phases-56g2</a></p>\n<h3 id=\"모노레포의-기본\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC%EC%9D%98-%EA%B8%B0%EB%B3%B8\" aria-label=\"모노레포의 기본 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모노레포의 기본</h3>\n<ul>\n<li>모노레포(monorepo)\n<ul>\n<li>두개 이상의 프로젝트가 동일한 저장소를 사용하는 소프트웨어 개발 전략</li>\n<li>프로젝트 사이에 의존성이 존재하거나 동일한 도메인과 같은 정의된 관계가 존재한다.</li>\n</ul>\n</li>\n<li>모노레포 도구(tools)\n<ul>\n<li>모노레포를 구축하고 이를 쉽게 관리하고 유지할 수 있게하는 도구. 관리/속도/구조 등 여러 측면에서 나의 프로젝트와 궁합이 잘 맞는 도구를 선택하는 것이 좋다.</li>\n</ul>\n</li>\n<li>모노레포 도구를 선택할 때 고려해야 할 것\n<ul>\n<li><strong>로컬 캐싱</strong> - 같은 머신에서 같은 것을 두번 빌드하거나 테스트 하지 않는다.</li>\n<li><strong>로컬 작업 오케스트레이션</strong> - 여러 Task 를 올바른 순서로 병렬 실행할 수 있는 기능</li>\n<li><strong>분산 캐싱</strong> - 서로 다른 환경에서 캐시 아티팩트를 공유할 수 있는 기능</li>\n<li><strong>분산 작업 실행</strong> - 단일 시스템에서 실행되어 여러 시스템에 명령을 전달하는 기능</li>\n<li><strong>변경에 영향을 받는 프로젝트(패키지) 감지</strong> - 변경에 영향을 받는 프로젝트만 빌드/테스트한다.</li>\n<li><strong>워크스페이스 분석</strong> - 추가 구성 없이 시각적인 워크스페이스 그래프를 제공한다.</li>\n<li><strong>의존성 그래프 시각화</strong> - 프로젝트 및 Task 간의 의존 관계를 시각화한다.</li>\n<li><strong>소스코드 공유</strong> - 서로 다른 프로젝트 간에 소스코드를 쉽게 공유할 수 있다.</li>\n<li><strong>코드 제너레이터</strong> - 말그대로 코드 스캐폴딩이 가능하다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://monorepo.tools/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://monorepo.tools/</a></p>\n<h3 id=\"node-서버-활용하기\" style=\"position:relative;\"><a href=\"#node-%EC%84%9C%EB%B2%84-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"node 서버 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node 서버 활용하기</h3>\n<p>기본적으로 노드 서버는 자바스크립트로 요청이 올 때, v8 엔진이 싱글쓰레드로 읽으므로 여러 프로세스를 동작하도록 해야한다. 만약 이게 싫다면 성능을 낮추고 작은 서버로 여러 인스턴스를 띄우는 것도 방법이다.</p>\n<p>pm2의 클러스터 모드를 활용해 여러 노드 프로세스를 띄울 수 있다. 클러스터 모드를 사용하면, 서버 안에 CPU가 처리할 수 있는 프로세스의 개수 안에서 프로세스 당 하나씩 노드 서버를 띄울 수 있다.</p>\n<h3 id=\"implicit-props-vs-explicit-props\" style=\"position:relative;\"><a href=\"#implicit-props-vs-explicit-props\" aria-label=\"implicit props vs explicit props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>implicit props vs explicit props</h3>\n<p>implicit props는 <code class=\"language-text\">@types/react</code>에서 자동으로 추가되는 암시적인 props를 가리킨다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>’first’</span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>explicit props는 명시적으로 props interface에 작성되어 있는 props를 의미한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">InputProps</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Input<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>InputProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h3 id=\"심볼릭-링크-vs-하드링크\" style=\"position:relative;\"><a href=\"#%EC%8B%AC%EB%B3%BC%EB%A6%AD-%EB%A7%81%ED%81%AC-vs-%ED%95%98%EB%93%9C%EB%A7%81%ED%81%AC\" aria-label=\"심볼릭 링크 vs 하드링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>심볼릭 링크 vs 하드링크</h3>\n<ul>\n<li>심볼릭 링크는 원본 파일이 삭제되거나 경로가 바뀔 때 link가 깨진다</li>\n<li>하드 링크는 원본 파일과 동일한 inode를 사용해서 원본 파일이 삭제되어도 hard link된 파일은 삭제되지 않아 접근이 가능하다.</li>\n</ul>\n<h3 id=\"next-transpile-modules\" style=\"position:relative;\"><a href=\"#next-transpile-modules\" aria-label=\"next transpile modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next-transpile-modules</h3>\n<p>빌드되지 않은 형태의 TypeScript 파일을 직접 임포트해서 사용할 수 있다.</p>\n<p>Nextjs는 기본적으로 외부 패키지를 트랜스파일하지 않는다. <code class=\"language-text\">next-transpile-modules</code>는 Nextjs에서 지원하는 모든 확장자의 트랜스파일을 지원한다. (<code class=\"language-text\">.js</code> <code class=\"language-text\">.jsx</code> <code class=\"language-text\">.ts</code> <code class=\"language-text\">.tsx</code> <code class=\"language-text\">.mjs</code> <code class=\"language-text\">.css</code> <code class=\"language-text\">.scss</code> <code class=\"language-text\">.sass</code>)</p>\n<p>모노레포 환경에서 다른 워크스페이스에 있는 컴포넌트를 사전 트랜스파일링 없이 바로 가져오고 싶을 때 유용하다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// shared-ui/components/Button.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button<span class=\"token punctuation\">;</span></code></pre></div>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// next.config.js</span>\n<span class=\"token keyword\">const</span> withTM <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next-transpile-modules\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"shared-ui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">withTM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://www.npmjs.com/package/next-transpile-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.npmjs.com/package/next-transpile-modules</a></p>\n<h3 id=\"pnpm\" style=\"position:relative;\"><a href=\"#pnpm\" aria-label=\"pnpm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pnpm</h3>\n<p>npm, yarn과 같은 패키지 매니저 중 하나다.</p>\n<p><strong>평탄하지 않은</strong> <code class=\"language-text\">node_modules</code>를 생성하기 때문에 <strong>오직 직접적인 의존성을 가진 패키지만 사용된다.</strong> (자동완성도 실제로 설치한 패키지에서만 동작한다)</p>\n<p>모노레포 프로젝트에 적합하며, 빠르다는 장점이 있다.</p>\n<h3 id=\"plug-and-play\" style=\"position:relative;\"><a href=\"#plug-and-play\" aria-label=\"plug and play permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>plug and play</h3>\n<p>usb를 꽂으면 바로 연결되는 것처럼, “꽂으면 실행된다”는 의미로 사용한다. 하드웨어에서는 <strong>사용자가 별다른 조작이나 설정하지 않고 바로 연결됨</strong>을 의미한다.</p>\n<p>모노레포에서 이 개념은 상위 레포에서 <strong>필요한 모듈을 버전별로</strong> 모두 가지고 있고, 하위 레포에서 <strong>모듈 버전 정보만</strong> 소유한다는 의미를 가진다.</p>\n<p>하위 레포에서 해당 모듈을 <strong>사용할 때</strong> 가지고 있는 버전 정보를 기반으로 상위 레포에서 필요한 모듈을 가져오는 것을 의미한다.</p>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>\n<p>MR 때 하지 않아도 되는 CI 작업이라면 MR 머지 후 release 브랜치에 커밋이 생긴 시점으로 해결하는 방법도 있다.</p>\n</li>\n<li>\n<p>node 13버전 이하에서는 optional chaining, nullish 문법을 쓸 수 없다.</p>\n</li>\n<li>\n<p>디자인 토큰 - 브랜드 색상, 간격과 같은 스타일 변수를 말하는 용어로 쓰인다.</p>\n</li>\n<li>\n<p><a href=\"https://docusaurus.io/ko/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docusaurus</a> - 예쁜 다큐먼트 사이트를 뚝딱 만들 수 있게 도와준다.</p>\n</li>\n<li>\n<p>웹뷰를 띄울 때 기존 웹뷰를 남기려면 query param에 <code class=\"language-text\">shouldKeepPresentedView=true</code> 옵션을 주면 된다.</p>\n</li>\n<li>\n<p>Logical nullish assignment <code class=\"language-text\">(x ??= y)</code> - <code class=\"language-text\">x</code>가 nullish (<code class=\"language-text\">null</code> 또는 <code class=\"language-text\">undefined</code>일 때만) 값을 할당한다. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n</li>\n<li>\n<p>sFTP - ssh 방식을 사용하여 안전하게 암호화된 구간에서 FTP(파일 전송)기능을 사용할 수 있다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">Location.hash</code> - <code class=\"language-text\">#</code> 뒤에 나오는 식별자를 value로 하는 값</p>\n<ul>\n<li>해시라우터를 사용하면 주소 뒤에 #이 붙는다.</li>\n<li>별도 서버 설정 없이도 새로고침 시 오류가 나지 않는다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">webviewWillAppear</code> 인터페이스는 웹뷰가 새롭게 띄워졌을 때가 아닌 focus out 됐다가 focus in 될 때 실행된다.</p>\n</li>\n<li>\n<p>스냅샷 테스팅(Snapshot Testing) - 어떤 기능의 예상 결과를 미리 정확히 포착해두고 실제 결과에 비교하는 테스트 방식</p>\n</li>\n<li>\n<p>타입스크립트에서 객체에 <code class=\"language-text\">readonly</code> 가 붙어도 객체의 필드는 수정이 가능하다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">File</code> 객체의 <code class=\"language-text\">type</code> 필드 - MIME 타입을 반환한다. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File/type\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n</li>\n<li>\n<p>pps, ppsx 파일 확장자 - MS powerpoint XML을 가리킨다. (<a href=\"https://ko.eyewated.com/ppsx-%ED%8C%8C%EC%9D%BC%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9E%85%EB%8B%88%EA%B9%8C/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<h3 id=\"turborepo로-모노레포-개발-경험-향상하기\" style=\"position:relative;\"><a href=\"#turborepo%EB%A1%9C-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%EA%B0%9C%EB%B0%9C-%EA%B2%BD%ED%97%98-%ED%96%A5%EC%83%81%ED%95%98%EA%B8%B0\" aria-label=\"turborepo로 모노레포 개발 경험 향상하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Turborepo로 모노레포 개발 경험 향상하기</h3>\n<p>LINE에서 Turborepo로 모노레포를 개발한 경험을 공유한 글이다.</p>\n<blockquote>\n<p>Turborepo의 주요 미션은 모노레포 환경에서 개발자가 조금 더 쉽고 빠르게 개발할 수 있도록 빌드 도구를 제공하는 것입니다. 고급 빌드 시스템을 구축하는 복잡한 과정을 Turborepo가 대신해 주기 때문에 개발자는 복잡한 설정과 스크립트에 신경 쓰는 대신 개발에 더 집중할 수 있습니다.</p>\n</blockquote>\n<p>역시 개발자들은 귀찮음을 해결하기 위해 뭔가를 또 만든다..! 불편하면 불편한 대로 사는 나와는 참 다르다.</p>\n<p>Turborepo의 기본 원칙은 한 번 작업을 수행하며 수행한 계산은 이후 다시 수행하지 않는 것이다. 따라서 두 번째 실행할 때는 이전에 계산한 작업은 건너뛰고 이전에 캐싱해 놓은 로그를 다시 보여준다.</p>\n<p>마지막에 Performance가 향상된 모습을 보여주는데, 탐난다..! :amaze:</p>\n<p><strong>Ref</strong> <a href=\"https://engineering.linecorp.com/ko/blog/monorepo-with-turborepo/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://engineering.linecorp.com/ko/blog/monorepo-with-turborepo/</a></p>\n<h3 id=\"noto-emoji-font\" style=\"position:relative;\"><a href=\"#noto-emoji-font\" aria-label=\"noto emoji font permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Noto emoji font</h3>\n<p>구글에서 공개했다. 흑백이고 가변 글꼴이어서 색상이나 굵기 설정도 가능하다.</p>\n<img src=\"/9ee43979a2a5de9e5842a70d43365542/01.gif\">\n<p>그리고 무엇보다 귀엽다!</p>\n<p><strong>Ref</strong> <a href=\"https://developers.googleblog.com/2022/04/what-is-black-and-white-and-read-all.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developers.googleblog.com/2022/04/what-is-black-and-white-and-read-all.html</a></p>\n<h3 id=\"리액트는-언제-컴포넌트를-렌더링-하나요\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%A0%8C%EB%8D%94%EB%A7%81-%ED%95%98%EB%82%98%EC%9A%94\" aria-label=\"리액트는 언제 컴포넌트를 렌더링 하나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트는 언제 컴포넌트를 렌더링 하나요?</h3>\n<p>리액트에서 가장 기본이면서도 항상 골칫덩어리인 문제!</p>\n<p><strong>😜 TL;DR</strong></p>\n<p>리액트는 컴포넌트를 다음과 같은 상황일 경우 (재)렌더링한다.</p>\n<ul>\n<li>컴포넌트에 예정된 상태 업데이트가 있을 경우\n<ul>\n<li>컴포넌트에서 사용된 커스텀 훅의 예정된 업데이트가 있을 경우도 포함</li>\n</ul>\n</li>\n<li>부모 컴포넌트가 렌더링 되고 리렌더링에서 제외되는 기준에 충족하지 않을 경우. 제외되는 기준은 다음의 네 가지 조건을 모두 동시에 충족해야 한다.\n<ul>\n<li>컴포넌트가 이전에 렌더링 되었어야 함. 즉, 이미 마운트 되었어야 함.</li>\n<li>변경된 props(참조)가 없어야 함.</li>\n<li>컴포넌트에서 사용하고 있는 context 값이 변경되지 않아야 함.</li>\n<li>컴포넌트에 예정된 상태 업데이트가 없어야 함.</li>\n</ul>\n</li>\n</ul>\n<p>아래 예시가 특히 흥미로웠다!</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parent</span></span> <span class=\"token attr-name\">lastChild</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildC</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildB</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> lastChild <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildA</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>lastChild<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ChildA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>childA<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ChildB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>childB<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ChildC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>childC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 <code class=\"language-text\">Parent</code>의 업데이트가 예정되어 있다면, 어떤 컴포넌트가 리렌더링 될까?</p>\n<p>당연히 <code class=\"language-text\">Parent</code> 자체는 업데이트를 예약한 컴포넌트이기 때문에 리액트에 의해 리렌더링 될 것이다. 하지만 모든 자식 컴포넌트 <code class=\"language-text\">ChildA</code>, <code class=\"language-text\">ChildB</code>, <code class=\"language-text\">ChildC</code>도 리렌더링 될까?</p>\n<p>🤔🤔🤔…</p>\n<p>답은 <code class=\"language-text\">ChildA</code>만 리렌더링된다!</p>\n<p><code class=\"language-text\">ChildA</code>와 달리 <code class=\"language-text\">ChildB</code>와 <code class=\"language-text\">ChildC</code>는 리렌더링 되지 않는다. 그 이유는 <code class=\"language-text\">ChildB</code>와 <code class=\"language-text\">ChildC</code>가 렌더링 제외 기준을 충족했기 때문에 리액트가 렌더링을 건너뛰었기 때문이다.</p>\n<p>리액트의 렌더링 제외 기준을 알기 위해 이 글에서는 <a href=\"https://github.com/facebook/react/blob/4072bdfd6d1fcebe520e114e04047e06992af839/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L3774-L3829\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">소스 코드</a>까지 살펴보고 있다. 😵</p>\n<p>코드 내에서 리액트의 렌더링 제외 로직 관련 코드는 다음과 같다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 보류 중인 업데이트 또는 context가 없습니다. 여기서 렌더링을 제외합니다.</span>\ndidReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">attemptEarlyBailoutIfNoScheduledUpdate</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token punctuation\">,</span>\n  renderLanes\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 라인에 도달하기 위해서는 다음 조건이 충족되어야 한다.</p>\n<ul>\n<li><code class=\"language-text\">current !== null</code></li>\n<li><code class=\"language-text\">oldProps === newProps</code></li>\n<li><code class=\"language-text\">hasLegacyContextChanged() === false</code></li>\n<li><code class=\"language-text\">hasScheduledUpdateOrContext === false</code></li>\n</ul>\n<p>해석하면 대략 다음과 같다.</p>\n<ul>\n<li>컴포넌트가 이전에 렌더링되었다. 즉, 이미 마운트되었다.</li>\n<li>변경된 props가 없다.</li>\n<li>컴포넌트에서 사용되는 <code class=\"language-text\">context</code> 값 중 변경된 것이 없다.</li>\n<li>컴포넌트 자체에서 업데이트를 예약하지 않았다.</li>\n</ul>\n<p>처음 살펴보았던 예시에서,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Parent</code>에서 반환된 <code class=\"language-text\">&lt;Child /></code>는 Babel에 의해 <code class=\"language-text\">React.createElement(Child, null)</code>로 컴파일되고 <code class=\"language-text\">{ type: Child, props: {} }</code>과 같은 형태의 <code class=\"language-text\">ReactElement</code>가 생성된다.</p>\n<p><code class=\"language-text\">props</code>는 자바스크립트 객체이기 때문에 다시 생성될 때마다 참조가 변경된다. 기본적으로 React는 <code class=\"language-text\">===</code>를 사용하여 이전 <code class=\"language-text\">props</code>와 현재 <code class=\"language-text\">props</code>를 비교한다. 따라서, <code class=\"language-text\">props</code>는 리렌더링 되면 다른 값으로 간주된다. 그렇기 때문에 <code class=\"language-text\">Child</code>는 <code class=\"language-text\">props</code>의 일부로 <code class=\"language-text\">Parent</code>로부터 아무것도 받지 않지만, <code class=\"language-text\">Parent</code>가 리렌더링 될 때마다 여전히 리렌더링 된다. <code class=\"language-text\">React.createElement</code>는 <code class=\"language-text\">Child</code>를 위해 호출되고 새로운 <code class=\"language-text\">props</code> 객체를 만든다.</p>\n<p>하지만 만약 <code class=\"language-text\">Child</code>를 <code class=\"language-text\">Parent</code>의 <code class=\"language-text\">props</code>로 전달할 수 있다면 어떻게 될까?</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Parent</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>리액트에 의해 <code class=\"language-text\">Parent</code>가 렌더링될 때 <code class=\"language-text\">Child</code>에 대한 <code class=\"language-text\">React.createElement</code> 함수가 호출되지 않는다. 따라서 <code class=\"language-text\">Child</code>의 새로운 <code class=\"language-text\">props</code>가 생성되지 않고, 이는 위에서 언급한 네 가지 렌더링 제외 기준을 모두 충족시킨다.</p>\n<p>이것이 처음 예시에서 <code class=\"language-text\">Parent</code>가 업데이트를 예약할 때마다 <code class=\"language-text\">ChildA</code>만 리렌더링 되었던 이유다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> lastChild <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildA</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> // ChildA만 리렌더링된다.\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> // 리렌더링 제외\n      </span><span class=\"token punctuation\">{</span>lastChild<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> // 리렌더링 제외\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>조금 복잡한 내용이다..!!</p>\n<p>두고두고 다시 읽어봐야겠다.</p>\n<p><strong>Ref</strong> <a href=\"https://velog.io/@eunbinn/when-does-react-render-your-component\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@eunbinn/when-does-react-render-your-component</a></p>\n<h3 id=\"volta\" style=\"position:relative;\"><a href=\"#volta\" aria-label=\"volta permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Volta</h3>\n<p>Node.js용 가상환경 같은 툴로, 프로젝트 구성원끼리 노드 버전 맞출 용도라면 nvm 대신 사용할 수 있다.</p>\n<p><strong>Ref</strong> <a href=\"https://volta.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://volta.sh/</a></p>\n<h3 id=\"자바스크립트는-왜-프로토타입을-선택했을까\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%99%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C\" aria-label=\"자바스크립트는 왜 프로토타입을 선택했을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트는 왜 프로토타입을 선택했을까</h3>\n<p>이전에도 두어 번 읽어보았던 글인데, 볼 때마다 신선하고 정말 재미있다. 철학적 관점에서 프로그래밍 언어를 풀어내다니, 정말 간지…</p>\n<p><strong>Ref</strong> <a href=\"https://medium.com/@limsungmook/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%99%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C-997f985adb42\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@limsungmook/자바스크립트는-왜-프로토타입을-선택했을까-997f985adb42</a></p>\n<h3 id=\"파이스크립트pyscript\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8pyscript\" aria-label=\"파이스크립트pyscript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이스크립트(PyScript)</h3>\n<p>아나콘다가 발표한 새로운 언어다. 이름이..!! <del>정말 끔찍한 혼종</del></p>\n<p>파이스크립트는 사용자가 파이썬과 표준 HTML을 결합하여 브라우저에서 풍부한 파이썬 애플리케이션을 만들 수 있도록 지원하는 프레임워크다. 브라우저 내 단일-포함(single-include) 방식으로 HTML 페이지에서 자바스크립트만큼 쉽게 파이썬 스크립트를 실행할 수 있도록 한다.</p>\n<p>파이스크립트를 사용한 예제가 올라왔다.</p>\n<ul>\n<li><a href=\"https://devocean.sk.com/blog/techBoardDetail.do?ID=163882\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">웹브라우저로 python 실행하기</a></li>\n<li><a href=\"https://github.com/pyscript/pyscript/blob/main/GETTING-STARTED.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting started with PyScript</a></li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://www.ciokorea.com/news/234899\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.ciokorea.com/news/234899</a></p>\n<h3 id=\"ts-error-translator\" style=\"position:relative;\"><a href=\"#ts-error-translator\" aria-label=\"ts error translator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ts-error-translator</h3>\n<p>혼란스러운 TS 로그를 사람이 보기 좋은 형태로 보여주는 VSCode 익스텐션이다.</p>\n<p><del>라떼는… 에러 로그도 불친절했다 이말이야</del></p>\n<p><strong>Ref</strong> <a href=\"https://github.com/mattpocock/ts-error-translator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/mattpocock/ts-error-translator</a></p>\n<h3 id=\"rayn-dahl의-javascript-container-한-마디\" style=\"position:relative;\"><a href=\"#rayn-dahl%EC%9D%98-javascript-container-%ED%95%9C-%EB%A7%88%EB%94%94\" aria-label=\"rayn dahl의 javascript container 한 마디 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rayn Dahl의 “JavaScript Container” 한 마디</h3>\n<p>한 마디가 아니고 투머치 주의…</p>\n<p><strong>Ref</strong> <a href=\"https://www.facebook.com/xguru/posts/10227448129370092\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.facebook.com/xguru/posts/10227448129370092</a></p>\n<h3 id=\"nrwl이-가져간-lerna\" style=\"position:relative;\"><a href=\"#nrwl%EC%9D%B4-%EA%B0%80%EC%A0%B8%EA%B0%84-lerna\" aria-label=\"nrwl이 가져간 lerna permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nrwl이 가져간 lerna</h3>\n<p><a href=\"https://nx.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nx</a> 를 만든 Nrwl에서 lerna를 이어서 관리한다고 한다.</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/lerna/lerna/issues/3121\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/lerna/lerna/issues/3121</a></p>\n<h3 id=\"자바스크립트-함수-합성-뭐가-그렇게-대단할까\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%95%A8%EC%88%98-%ED%95%A9%EC%84%B1-%EB%AD%90%EA%B0%80-%EA%B7%B8%EB%A0%87%EA%B2%8C-%EB%8C%80%EB%8B%A8%ED%95%A0%EA%B9%8C\" aria-label=\"자바스크립트 함수 합성 뭐가 그렇게 대단할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 함수 합성, 뭐가 그렇게 대단할까?</h3>\n<p>그동안 함수형 프로그래밍에서 종종 보았던 <code class=\"language-text\">compose()</code>, <code class=\"language-text\">pipe()</code> 등의 함수를 만들면서 원리와 flow에 대해 설명한다.</p>\n<blockquote>\n<p>합성의 진정한 아름다움은 코드가 아니라 코드가 우리를 변화시키는데 있습니다. 코드에 대한 새로운 시각을 제공하기 때문입니다.</p>\n</blockquote>\n<p>뭔가 굉장한 세계가 열린 것처럼..!</p>\n<p>하지만 처음 접했을 때의 그 새로운 시야의 신비로움(?)은 잊지 못한다.\n아직도 혼자 코드 쓰라 하면 못하지만.</p>\n<p><strong>Ref</strong> <a href=\"https://junghan92.medium.com/%EB%B2%88%EC%97%AD-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%95%A8%EC%88%98-%ED%95%A9%EC%84%B1-%EB%AD%90%EA%B0%80-%EA%B7%B8%EB%A0%87%EA%B2%8C-%EB%8C%80%EB%8B%A8%ED%95%A0%EA%B9%8C-5a2664b7c2b8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://junghan92.medium.com/번역-자바스크립트-함수-합성-뭐가-그렇게-대단할까-5a2664b7c2b8</a></p>\n<h3 id=\"tc39proposal-decorators\" style=\"position:relative;\"><a href=\"#tc39proposal-decorators\" aria-label=\"tc39proposal decorators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tc39/proposal-decorators</h3>\n<p>벌써 stage3..!</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/tc39/proposal-decorators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/tc39/proposal-decorators</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>오오.. 눈치채지 못했는데 이번주는 상당히 정보공유글이 많았네. 지난주는 씨가 말랐었는데… 정리하느라 힘들었다. 사실 평일 동안 집중도 잘 안 되고 😬</p>\n<p>이번주는 개발을 많이 하지 못한 것 같다. 마크업 정도 하고, 코드리뷰 하고, 그동안 해왔던 프로젝트 장애 대응 (프론트 문제는 아니었지만..!)하고… 사아알짝 지루했던 주였다.</p>\n<p>금요일엔 팀 전체 워크샵을 다녀왔다! 우형 오피스의 자랑인 &#x3C;양평같은 방> 아니고 진짜 양평으로! ㅋㅋㅋ 맛있는 해물 칼국수도 먹고, 강릉이 아닌 양평(서종)의 테라로사에서 존맛탱이었던 까눌레도 먹었다. 입사 4개월 만에 드디어 만난 팀원분들이 엄청 반겨주셔서 행복했당 🥳</p>\n<p>빨리 깁스 풀고 싶다 🥺</p>","timeToRead":16,"frontmatter":{"title":"5월 2주차 기록","date":"May 14, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-5-week-2/","previous":{"fields":{"slug":"/refactoring/refactoring-11-1/","langKey":"en","directoryName":"refactoring"},"frontmatter":{"date":"May 14, 2022","description":null,"title":"리팩터링 11장 - 1","tags":["refactoring"]}},"next":{"fields":{"slug":"/etc/nest-typeorm/","langKey":"en","directoryName":"etc"},"frontmatter":{"date":"May 12, 2022","description":null,"title":"Docker로 MySQL 띄워 NestJS + TypeORM과 연결하기","tags":["docker","mysql","nestjs","typeorm"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-5-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"May 21, 2022","description":"weekly-i-learned","title":"5월 3주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-5-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"May 07, 2022","description":"weekly-i-learned","title":"5월 1주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}