{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-11-week-1/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"c167537a-0ea8-5687-9d28-d266e946f756","excerpt":"넘 추웡 배워가기 반응형 디자인의 2가지 스타일 반응형 디자인이란, 하나의 UI가 모든 디바이스 화면에 대응되도록 디자인하는 것이다. 반응형 디자인에도 2가지 스타일이 존재한다. 유연한 칼럼(Fluid Columns): 해상도 변화에 따라 Grid…","html":"<p>넘 추웡</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"반응형-디자인의-2가지-스타일\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EC%9D%91%ED%98%95-%EB%94%94%EC%9E%90%EC%9D%B8%EC%9D%98-2%EA%B0%80%EC%A7%80-%EC%8A%A4%ED%83%80%EC%9D%BC\" aria-label=\"반응형 디자인의 2가지 스타일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반응형 디자인의 2가지 스타일</h3>\n<p>반응형 디자인이란, 하나의 UI가 모든 디바이스 화면에 대응되도록 디자인하는 것이다. 반응형 디자인에도 2가지 스타일이 존재한다.</p>\n<ul>\n<li>유연한 칼럼(Fluid Columns): 해상도 변화에 따라 Grid가 유연하게 변화한다.</li>\n<li>고정된 박스(Fixed Boxes): 박스 크기는 유지하되 해상도에 따라 박스 위치만 변화한다.</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://hello-woody.tistory.com/8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hello-woody.tistory.com/8</a></p>\n<h3 id=\"query-key-factory\" style=\"position:relative;\"><a href=\"#query-key-factory\" aria-label=\"query key factory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>query-key-factory</h3>\n<p>react-query를 사용할 때, 항상 그 수많은 key들을 어떻게 관리해야할지 의문이었다. 그런데 query-key를 만들어주는 라이브러리를 알게 되었다. 바로 <a href=\"https://github.com/lukemorales/query-key-factory\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">query-key-factory</a></p>\n<p><code class=\"language-text\">createQueryKeyStore</code> 메서드를 사용하여 앱에서 사용하는 query key들을 한데 선언한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createQueryKeyStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@lukemorales/query-key-factory\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// if your prefer to declare everything in one file</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> queries <span class=\"token operator\">=</span> <span class=\"token function\">createQueryKeyStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  users<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    all<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">detail</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>userId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> api<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">detail</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>todoId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>todoId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">list</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>filters<span class=\"token operator\">:</span> TodoFilters<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> filters <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> api<span class=\"token punctuation\">.</span><span class=\"token function\">getTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filters<span class=\"token punctuation\">,</span> page<span class=\"token operator\">:</span> ctx<span class=\"token punctuation\">.</span>pageParam <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      contextQueries<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">useQuery</code>를 사용하는 곳에서는 다음과 같이 가져온다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> queries <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../queries\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>queries<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> api<span class=\"token punctuation\">.</span><span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useUserDetail</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>queries<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">detail</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"polling과-retrying\" style=\"position:relative;\"><a href=\"#polling%EA%B3%BC-retrying\" aria-label=\"polling과 retrying permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>polling과 retrying</h3>\n<p>자바스크립트로 간단하게 polling과 retrying을 구현할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timeout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>👩‍🏫 쉼표 연산자\n쉼표 연산자는 각각의 피연산자를 왼쪽에서 오른쪽 순서로 평가하고, 마지막 연산자의 값을 반환합니다.\n위 예제에서, <code class=\"language-text\">while (await timeout(500))</code>만 하면 <code class=\"language-text\">while (undefined)</code>니 루프가 안 돌지만, 쉼표 연산자 우항에 <code class=\"language-text\">treu</code> 값을 넣으면 <code class=\"language-text\">while (true)</code>가 돼 무한 반복한다.\n(<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Comma_Operator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n</blockquote>\n<h3 id=\"css의--sign\" style=\"position:relative;\"><a href=\"#css%EC%9D%98--sign\" aria-label=\"css의  sign permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS의 <code class=\"language-text\">*=</code> sign</h3>\n<p>CSS에서 <code class=\"language-text\">*=</code> 기호는, 특정 문자열을 포함하고 있는 속성을 가리킨다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\">element[attribute*=<span class=\"token string\">\"includesthis\"</span>]</code></pre></div>\n<p>즉 다음 요소에서 <code class=\"language-text\">a</code> 태그는,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>someclassicol-hello<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Click me and win a free monkey<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>아래 CSS 셀렉터로 가져올 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\">a[class*=<span class=\"token string\">\"icol-\"</span>]</code></pre></div>\n<blockquote>\n<p>👩‍🏫 참고</p>\n<ul>\n<li>특정 문자열로 <strong>시작</strong>할 때: <code class=\"language-text\">^=</code></li>\n<li>특정 문자열로 <strong>끝</strong>날 때: <code class=\"language-text\">$=</code></li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>이벤트 스토밍은 눈에 보이는 그럴싸한 멋진 문서를 만드는 것이 아니라, 머리 속에 있는 도메인 지식을 상향 평준화하는 과정이다.</li>\n<li>gitlab CI에서 젠킨스를 trigger하는 과정은 별 게 아니라, <code class=\"language-text\">curl</code> 명령어를 통해서 젠킨스 서버를 실행시키는 것이었다.</li>\n</ul>\n<hr>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<h3 id=\"nextjs-13-업그레이드-가이드\" style=\"position:relative;\"><a href=\"#nextjs-13-%EC%97%85%EA%B7%B8%EB%A0%88%EC%9D%B4%EB%93%9C-%EA%B0%80%EC%9D%B4%EB%93%9C\" aria-label=\"nextjs 13 업그레이드 가이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js 13 업그레이드 가이드</h3>\n<ul>\n<li><code class=\"language-text\">pages/</code>에서 <code class=\"language-text\">app/</code>으로\n<ul>\n<li><code class=\"language-text\">app/</code> 디렉토리는 여전히 nested routes와 layout을 지원한다.</li>\n<li>route segment들을 특별한 <code class=\"language-text\">page.js</code> 파일을 이용하여 정의할 수 있다.</li>\n<li>각 route segment의 UI를 만들기 위해 특별한 파일 컨벤션(<code class=\"language-text\">page.js</code>, <code class=\"language-text\">layout.js</code>)이 사용된다.</li>\n<li><code class=\"language-text\">app/</code> 디렉토리 안에 컴포넌트, 스타일, 테스트 파일들까지 넣을 수 잇다.</li>\n<li><code class=\"language-text\">getServerSideProps</code>, <code class=\"language-text\">getStaticProps</code>, <code class=\"language-text\">getStaticPaths</code> 등의 데이터 페칭 함수들은 이제 <code class=\"language-text\">app</code> 내의 새로운 API로 대체되었다.</li>\n<li><code class=\"language-text\">pages/_app.js</code>와 <code class=\"language-text\">pages/_document.js</code>는 이제 하나의 <code class=\"language-text\">app/layout.js</code>로 대체되었다.</li>\n<li><code class=\"language-text\">pages/_error.js</code>는 더 세분화된 <code class=\"language-text\">error.js</code> 파일들로 대체된다.</li>\n<li><code class=\"language-text\">pages/404.js</code>는 <code class=\"language-text\">notFound()</code>로 대체되었다.</li>\n<li><code class=\"language-text\">pages/api/*</code>는 <code class=\"language-text\">pages/</code> 디렉토리 안에 남는다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">&lt;Image /></code> 컴포넌트의 개선: 클라이언트 자바스크립트 코드를 줄이고, 스타일 방식과 접근성을 개선했으며, 브라우저 네이티브 lazy loading을 지원한다.</li>\n<li><code class=\"language-text\">&lt;Link /></code> 컴포넌트의 변화: 이제 더 이상 자식에 <code class=\"language-text\">&lt;a></code> 태그를 넣을 필요가 없다.</li>\n<li><code class=\"language-text\">&lt;Script /></code> 컴포넌트: <code class=\"language-text\">pages/</code>와 <code class=\"language-text\">app/</code> 디렉토리를 모두 지원하게 되었다.</li>\n<li>폰트 최적화: <code class=\"language-text\">next/font</code> 모듈을 제공하여, 폰트 로딩 속도를 커스텀하게 향상시킬 수 있다.</li>\n</ul>\n<p>뭔가 엄청 많이 바뀐 것 같은데, 점진적인 적용이 가능하다고 한다 😎</p>\n<p><strong>Ref</strong> <a href=\"https://beta.nextjs.org/docs/upgrade-guide\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://beta.nextjs.org/docs/upgrade-guide</a></p>\n<h3 id=\"openssl의-크리티컬-이슈-\" style=\"position:relative;\"><a href=\"#openssl%EC%9D%98-%ED%81%AC%EB%A6%AC%ED%8B%B0%EC%BB%AC-%EC%9D%B4%EC%8A%88-\" aria-label=\"openssl의 크리티컬 이슈  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OpenSSL의 크리티컬 이슈 😱</h3>\n<p>critical 등급의 OpenSSL 보안 취약점이 있었고, 11/1 긴급 패치 업데이트가 이루어졌다고 한다.</p>\n<p><strong>Ref</strong> <a href=\"https://www.zdnet.com/article/openssl-warns-of-critical-security-vulnerability-with-upcoming-patch/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.zdnet.com/article/openssl-warns-of-critical-security-vulnerability-with-upcoming-patch/</a></p>\n<h3 id=\"turbopack이-정말-vite-보다-10배-빠른가요\" style=\"position:relative;\"><a href=\"#turbopack%EC%9D%B4-%EC%A0%95%EB%A7%90-vite-%EB%B3%B4%EB%8B%A4-10%EB%B0%B0-%EB%B9%A0%EB%A5%B8%EA%B0%80%EC%9A%94\" aria-label=\"turbopack이 정말 vite 보다 10배 빠른가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Turbopack이 정말 Vite 보다 10배 빠른가요?</h3>\n<p>(Vue.js/Vite 개발자 Evan You의 글이다.)</p>\n<p>Turbopack이 공개되면서 “Vite보다 10배 빠름”을 강조하며 많은 곳에서 사용되었다.</p>\n<p>Next 13 + Turbopack 이 React HMR에서 0.01초 걸린데 반해, Vite는 0.09초 걸렸다는 벤치마크 결과가 있었다. 그러나 다른 성능에서는 10배 빠른 것은 없고 오직 HMR에서만 그렇게 나왔다.</p>\n<p>Vercel이 처음엔 실제 HMR 벤치마크 자료를 첨부하지 않아서 직접 Next 13과 Vite 3.2를 비교해 본 결과, (코드와 방법 모두 공개) 실제로는 Next HMR이 2배 정도 빠르게 나왔다.</p>\n<p>하지만 이건 Vite가 Babel을 이용하기 때문에 약간 다르게 나온 결과일 수 있다. 똑같이 Rust로 코딩된 SWC를 이용하면 속도가 거의 비슷하게 나오기 때문이다. (Vite가 SWC를 사용하지 않은 것은 SWC의 크기 문제 때문이다. Vite가 19MB인데, SWC가 58MB이다.)</p>\n<p>흥미로운 점은, import 하는 컴포넌트가 많아지면 Next/Turbo는 4배 느려지는데 반해 Vite는 2.4배만 느려진다.</p>\n<p>Evan이 벤치마크를 공개하고 나서, Vercel도 블로그에 벤치마크 방법을 공개했다.</p>\n<p>결과적으로 Turbopack이 10배 빠르려면</p>\n<ul>\n<li>SWC를 사용하지 않아야 하고</li>\n<li>30k가 넘는 모듈을 포함해야 하며</li>\n<li>핫업데이트된 모듈이 평가되는 시간만 측정해야</li>\n</ul>\n<p>그러한 결과가 나온다는 것이다!</p>\n<p>Evan You는 사용자가 용량vs속도에 대한 트레이드 오프를 스스로 결정할 수 있도록 Vite에서도 공식 React SWC 플러그인 도입을 고려중이라고 한다.</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/yyx990803/vite-vs-next-turbo-hmr/discussions/8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/yyx990803/vite-vs-next-turbo-hmr/discussions/8</a></p>\n<h3 id=\"remix를-인수한-shopify\" style=\"position:relative;\"><a href=\"#remix%EB%A5%BC-%EC%9D%B8%EC%88%98%ED%95%9C-shopify\" aria-label=\"remix를 인수한 shopify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remix를 인수한 Shopify</h3>\n<p><strong>Ref</strong> <a href=\"https://shopify.engineering/remix-joins-shopify\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://shopify.engineering/remix-joins-shopify</a></p>\n<h3 id=\"jpeg_xl\" style=\"position:relative;\"><a href=\"#jpeg_xl\" aria-label=\"jpeg_xl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPEG_XL</h3>\n<p>2019년부터 구글이 jpeg를 대체하기 위해 내놓은 이미지 포맷인 XL이 여전히 실험적이고 아직 생태계에서 각광 받지 못한다는 이유로 드롭되었다.</p>\n<p>XL포맷은 webp등의 포맷보다 효율적이고 무손실과 빠른 처리등으로 사용된 바 있다.</p>\n<p><strong>Ref</strong> <a href=\"https://www.phoronix.com/news/Chrome-Dropping-JPEG-XL-Reasons\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.phoronix.com/news/Chrome-Dropping-JPEG-XL-Reasons</a></p>\n<h3 id=\"refactoringguru의-한국어-버전-출시\" style=\"position:relative;\"><a href=\"#refactoringguru%EC%9D%98-%ED%95%9C%EA%B5%AD%EC%96%B4-%EB%B2%84%EC%A0%84-%EC%B6%9C%EC%8B%9C\" aria-label=\"refactoringguru의 한국어 버전 출시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>refactoring.guru의 한국어 버전 출시!</h3>\n<p>디자인 패턴을 그림으로 쉽게 정리한 페이지</p>\n<p><strong>Ref</strong> <a href=\"https://refactoring.guru/ko/design-patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://refactoring.guru/ko/design-patterns</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>인생 첫 지인 결혼식을 다녀왔다. 거의 우테코 정모였고, 반가운 얼굴들과 함께 결혼식도 보고, 맛있는 밥도 먹고, 다같이 처음으로 멀끔한 차림으로 워크샵을 빙의한 놀자판까지 즐거운 주말이었당 😋</p>","timeToRead":6,"frontmatter":{"title":"11월 첫주차 기록","date":"November 04, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-11-week-1/","previous":{"fields":{"slug":"/weekly/2022-11-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"November 13, 2022","description":"weekly-i-learned","title":"11월 2주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/typescript/typescript-declare-2/","langKey":"en","directoryName":"typescript"},"frontmatter":{"date":"October 29, 2022","description":null,"title":"타입스크립트 declare 다시 알아보기","tags":["typescript"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-11-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"November 13, 2022","description":"weekly-i-learned","title":"11월 2주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-10-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 29, 2022","description":"weekly-i-learned","title":"10월 4주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}