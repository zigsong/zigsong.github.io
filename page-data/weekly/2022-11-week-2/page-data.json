{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-11-week-2/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"c8a8ca9d-b8e7-512f-9cbd-4c9ddb796148","excerpt":"가을 흠뻑 배워가기 gitlab-ci.yml 문법  으로  을 붙이면 variable로 선언한다  으로 &를 붙이면 해당 variable을 변수명처럼 사용할 수 있다 : variable를 사용한다 (inheritance) key: 변경을 감지할 값 paths…","html":"<p>가을 흠뻑</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"gitlab-ciyml-문법\" style=\"position:relative;\"><a href=\"#gitlab-ciyml-%EB%AC%B8%EB%B2%95\" aria-label=\"gitlab ciyml 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gitlab-ci.yml 문법</h3>\n<ul>\n<li><code class=\"language-text\">.{~}</code> 으로 <code class=\"language-text\">.</code> 을 붙이면 variable로 선언한다</li>\n<li><code class=\"language-text\">: &amp;{~}</code> 으로 &#x26;를 붙이면 해당 variable을 변수명처럼 사용할 수 있다</li>\n<li><code class=\"language-text\">&lt;&lt;: *</code>: variable를 사용한다 (inheritance)</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">.</span>node_build<span class=\"token operator\">-</span>cache<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>next_build<span class=\"token operator\">-</span>cache\n<span class=\"token operator\">...</span>\n  <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span>\n  <span class=\"token operator\">-</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">:</span> <span class=\"token operator\">*</span>node_build<span class=\"token operator\">-</span>cache</code></pre></div>\n<ul>\n<li>key: 변경을 감지할 값</li>\n<li>paths: 대상 디렉토리 경로</li>\n<li>policy: pull / push / pull-push(default)\n<ul>\n<li>pull: 해당 캐시를 읽기만한다 (read)</li>\n<li>push: 해당 캐시를 업로드만 한다 (write)</li>\n<li>pull-push: 해당 캐시를 읽고/업로드한다 (read-write)</li>\n</ul>\n</li>\n<li>next/Image를 사용하면 이미지 경로가 pathname이 아닌 query로 넘어온다.</li>\n<li>pathname은 _next/image?url=~~ 까지만 넘어온다</li>\n</ul>\n<h3 id=\"ux-vs-cx\" style=\"position:relative;\"><a href=\"#ux-vs-cx\" aria-label=\"ux vs cx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UX vs CX</h3>\n<ul>\n<li>UX\n<ul>\n<li>사용자가 특정 서비스나 제품을 이용하는 과정에서 겪는 경험</li>\n<li>주로 앱/웹이나 제품 등 하나의 서비스에 대한 사용자 경험을 뜻하는 경우가 많다.</li>\n</ul>\n</li>\n<li>CX\n<ul>\n<li>UX를 확장한 개념</li>\n<li>브랜드와 고객의 접점이 지속해서 이어지며 발생하는 고객 경험의 총체</li>\n<li>매장, 점원, 서비스센터 등 고객이 브랜드를 경험할 수 있는 모든 것이 CX 에 속한다</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"svelte의-번들-사이즈-알아보기\" style=\"position:relative;\"><a href=\"#svelte%EC%9D%98-%EB%B2%88%EB%93%A4-%EC%82%AC%EC%9D%B4%EC%A6%88-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"svelte의 번들 사이즈 알아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>svelte의 번들 사이즈 알아보기</h3>\n<p>svelte는 컴포넌트가 커질수록 다른 프레임워크에 비해서 번들사이즈가 빠르게 증가한다. 용량이 몹시 중요하고 상대적으로 복잡하지 않은 애플리케이션이라면 svelte를 고려해볼 수 있다.</p>\n<p><a href=\"https://infrequently.org/2021/03/the-performance-inequality-gap/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Mobile Performance Inequality Gap</a>에 따르면 2021년 기준 페이지가 처음 로드될 때 사용되는 모든 JS파일 크기의 합은 300~350kB(gzipped 기준)이라고 한다. 이는 느린 네트워크에서 5초 안에 페이지가 로드되는 저성능 디바이스를 타겟팅한 기준으로, 3초를 기준으로 한다면 애플리케이션의 크기는 185kb로 svelte 기준으로는 80개가 조금 안 되는 TodoMVC가 들어갈 수 있다.</p>\n<p><strong>Ref</strong> <a href=\"https://taegon.kim/archives/10477\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://taegon.kim/archives/10477</a></p>\n<h3 id=\"border-radius-px-또는-percent\" style=\"position:relative;\"><a href=\"#border-radius-px-%EB%98%90%EB%8A%94-percent\" aria-label=\"border radius px 또는 percent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>border-radius: px 또는 percent?</h3>\n<p>css에서 가로 길이에 관계 없이 양쪽 끝이 동그란 막대형의 요소를 그리고 싶을 때는, <code class=\"language-text\">border-radius</code>를 아주 큰 px 값으로 주어야 한다. <code class=\"language-text\">border-radius: 50%</code>와 같이 percent 값으로 주었을 때는 이상한 타원형의 모양으로 그려지기 때문이다.</p>\n<img src=\"01.png\" width=\"360px\" />\n<img src=\"02.png\" width=\"360px\" />\n<p><code class=\"language-text\">border-radius</code>를 px로 주는 것과 percent로 주는 것의 차이는 무엇일까?</p>\n<p><code class=\"language-text\">border-radius</code>는 2가지 값을 받는데, 타원형의 1/4 영역에서 각각 x/y축 기준의 반지름을 의미한다. 값이 하나로만 설정됐을 경우 두 번째 값은 첫 번째 값과 동일한 값으로 설정된다. (즉 <code class=\"language-text\">border-radius: x</code>는 <code class=\"language-text\">border-radius: x/x</code>와 같다.)</p>\n<p>W3C의 설명에 따르면, <code class=\"language-text\">border-radius</code>의 값을 percent로 설정하면 border box의 크기에 관여한다. 즉 <code class=\"language-text\">border-radius: 50%</code>은, x축과 y축 각각의 반지름을 container의 width, height의 50%로 설정한다.</p>\n<blockquote>\n<p>💡 <code class=\"language-text\">border-radius</code>가 해당 요소의 모든 width-height에 먹힌다고 생각하면 쉽다.</p>\n</blockquote>\n<img src=\"03.jpeg\" width=\"360px\" />\n<p>반면, <code class=\"language-text\">border-radius</code>의 값을 px로 설정하면 x/y의 반지름이 같은 타원형이 된다. 즉, 원형이 된다. <code class=\"language-text\">border-radius: 999px</code>로 설정하면, 원의 반지름은 999px이 되어야 하지만 <a href=\"https://www.w3.org/TR/css-backgrounds-3/#corner-overlap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">curves overlap</a>이 적용되어 원의 반지름을 가장 작은 측면(요소의 width 또는 height)의 절반의 값으로 설정하게 된다.</p>\n<blockquote>\n<p>💡 <code class=\"language-text\">border-radius</code>가 해당 요소의 모든 모서리(corner)에 동일하게 적용된다고 생각하면 쉽다.</p>\n</blockquote>\n<img src=\"04.jpeg\" width=\"360px\" />\n<p>사실… 뭔 소린지 다는 이해하지 못했지만, 결과만 잘 알고 있으면 될듯 🫠</p>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/29966499/border-radius-in-percentage-and-pixels-px-or-em\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/29966499/border-radius-in-percentage-and-pixels-px-or-em</a></li>\n<li><a href=\"https://stackoverflow.com/questions/22578979/border-radius-50-vs-border-radius-999em\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/22578979/border-radius-50-vs-border-radius-999em</a></li>\n</ul>\n<h3 id=\"css-in-js의-장단점\" style=\"position:relative;\"><a href=\"#css-in-js%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"css in js의 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS-in-JS의 장단점</h3>\n<p><strong>👍 장점</strong></p>\n<ul>\n<li>한 파일에 스타일 파일을 같이 둘 수 있다. (colocate)</li>\n<li>css에 js변수를 사용할 수 있다.</li>\n<li>css 이름 충돌을 방지해준다.</li>\n</ul>\n<p><strong>👎 단점</strong></p>\n<ul>\n<li>런타임 오버헤드가 생길 가능성이 있다.(document에 삽입할 수 있는 일반 CSS로 스타일을 “직렬화”해야한다.)\n<blockquote>\n<p>스타일 직렬화, emotion이 CSS 문자열 또는 객체 스타일을 가져와 document에 삽입할 수 있는 일반 CSS 문자열로 변환하는 과정을 가리킨다.</p>\n</blockquote>\n</li>\n<li>번들 크기를 늘린다.</li>\n<li>react dev tool을 어지럽힌다.</li>\n</ul>\n<h3 id=\"자바스크립트의-동시성-개념\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EB%8F%99%EC%8B%9C%EC%84%B1-%EA%B0%9C%EB%85%90\" aria-label=\"자바스크립트의 동시성 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트의 동시성 개념</h3>\n<p><strong>동시성(Concurrent)</strong> 이란, 한 번에 하나 밖에 처리하지 못하는 싱글 코어에서 한 번에 여러 일을 처리하는 것처럼 보이는 논리적인 개념이다. 이게 가능한 이유는 동시에 실행하는 것처럼 보이기 위해 내부적으로 문맥 교환(Context Switch)이 일어난다.</p>\n<p><strong>병렬성 (Parallel)</strong> 이란, 실제로 여러 일을 동시에 처리할 수 있는 멀티 코어에서 멀티 스레드를 동작 시키는 방식이다. 즉, 동시성과는 달리 논리가 아닌 물리적인 의미에서의 동시 실행을 의미한다.</p>\n<p>병렬성이 멀티 코어 작업이라 항상 더 좋을 것 같지만 네트워크 통신과 같은 I/O 작업은 CPU 가 거의 일하지 않고, 응답이 올 때까지 대기 상태에 있게 되어 효율적이지 못하다. 또, 작업이 바뀔 때 문맥 교환(Context Switch) 이 발생하고 동시 작업이 너무 많다면 문맥 교환의 오버헤드로 동시성 보다 더 느릴 수 있다.</p>\n<p>자바스크립트는 병렬성이 아닌, 동시성을 지원하며, 이 동시성을 지원하기 위해 웹 브라우저(런타임 환경)는 Context Switch(이벤트 루프)를 지원한다 따라서 자바스크립트는 동시성(싱글스레드) 이며 이벤트 루프를 기반으로 한 비동기(논 블로킹) 언어 이다.</p>\n<h3 id=\"encodeuri-vs-encodeuricomponent\" style=\"position:relative;\"><a href=\"#encodeuri-vs-encodeuricomponent\" aria-label=\"encodeuri vs encodeuricomponent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>encodeURI vs encodeURIComponent</h3>\n<ul>\n<li><code class=\"language-text\">encodeURI()</code>: 인터넷 주소에서 사용하는 :, ;, /, =, ?, &#x26; 등을 제외하고 인코딩하는 함수</li>\n<li><code class=\"language-text\">encodeURIComponent()</code>: 모든 문자를 인코딩하는 함수</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> uri <span class=\"token operator\">=</span> <span class=\"token string\">\"https://mozilla.org/?x=шеллы\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> encoded <span class=\"token operator\">=</span> <span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> encodedComponent <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>encodedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// https%3A%2F%2Fmozilla.org%2F%3Fx%3D%D1%88%D0%B5%D0%BB%D0%BB%D1%8B</span></code></pre></div>\n<p>출력값</p>\n<h3 id=\"mkcert\" style=\"position:relative;\"><a href=\"#mkcert\" aria-label=\"mkcert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mkcert</h3>\n<p>mkcert를 이용하여 로컬환경에서 신뢰할 수 있는 인증서를 생성해 https를 적용할 수 있다.</p>\n<ol>\n<li><code class=\"language-text\">mkcert -install</code> 로 local CA를 생성한 후</li>\n<li><code class=\"language-text\">mkcert [beta-ceo-local.baemin.com](http://beta-ceo-local.baemin.com/)</code> 등으로 원하는 호스트 이름에 대한 인증서를 생성하고, mkcert가 이 인증서에 서명하도록 한다.</li>\n<li>그리고 서버에 https를 사용해주도록 설정하면 된다.</li>\n</ol>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{CERTIFICATE-KEY-FILENAME}.pem'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cert</span><span class=\"token operator\">:</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{CERTIFICATE-FILENAME}.pem'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<blockquote>\n<p><a href=\"https://github.com/FiloSottile/mkcert%C2%A0%EB%A5%BC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/FiloSottile/mkcert 를</a> 사용하여 local에서 CA를 자동으로 생성 및 설치 할 수 있다.</p>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://web.dev/i18n/ko/how-to-use-local-https/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://web.dev/i18n/ko/how-to-use-local-https/</a></p>\n<h2 id=\"데코레이터\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"데코레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데코레이터</h2>\n<p>데코레이터는 프로퍼티나, 메서드 또는 클래스를 ‘장식(수정, 확장..)’할 수 있다.</p>\n<p>자바스크립트의 데코레이터 함수는 target(데코레이터가 적용될 객체), key(데코레이터를 적용할 프로퍼티 이름), descriptor(프로퍼티의 설명자)를 인자로 받는다</p>\n<p>다만, 데코레이터는 ES 표준이 아니며, MobX 6에서는 호환성을 고려해 데코레이터를 사용하지 않는 것을 공식적으로 권장한다.</p>\n<p>그런데 올해 상반기에 stage3로 승격했다!</p>\n<p><strong>Ref</strong> <a href=\"https://ui.toast.com/weekly-pick/ko_20200102\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ui.toast.com/weekly-pick/ko_20200102</a></p>\n<h3 id=\"lodash의-지연평가\" style=\"position:relative;\"><a href=\"#lodash%EC%9D%98-%EC%A7%80%EC%97%B0%ED%8F%89%EA%B0%80\" aria-label=\"lodash의 지연평가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lodash의 지연평가</h3>\n<p>프론트 개발자라면 자주 쓰게 되는 lodash 라이브러리는, 알고보면 기본적으로 지연 평가(lazy evaluation)을 사용하여 성능을 개선하고 있다고 한다!</p>\n<blockquote>\n<p>이 방법은 for문 등의 반복적인 작업을 수행할 때, 주기의 ‘횟수’를 줄이는 것이지 주기에 걸리는 ‘시간’을 줄이는 것이 아니다.</p>\n</blockquote>\n<p>다음 예제를 살펴보자.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">priceLt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>price <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> gems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sunstone\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Amethyst\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Prehnite\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sugilite\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Diopside\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Feldspar\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dioptase\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sapphire\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> chosen <span class=\"token operator\">=</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span>gems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function\">priceLt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>$10보다 작은 가격의 보석 3개를 고르려고 할 때, 일반적인 lodash 접근인 엄격한 평가에서는 8개의 보석을 모두 걸러낸 후 앞의 3개를 골라낸다.</p>\n<p>지연 평가 알고리즘에서는 이 방식과 대조적으로, 배열에서 작은 가격의 요소만을 가져와 올바른 결과를 얻는다. (즉, Sunstone, Sugilite, Diopside만 가져온다!) 이런 방식으로 쉽게 37.5%의 성능 향상을 만든다.</p>\n<p><strong>Ref</strong> <a href=\"https://edykim.com/ko/post/introduction-to-lodashs-delay-evaluation-by-filip-zawada/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://edykim.com/ko/post/introduction-to-lodashs-delay-evaluation-by-filip-zawada/</a></p>\n<h3 id=\"크롬의-connection-stalled\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EB%A1%AC%EC%9D%98-connection-stalled\" aria-label=\"크롬의 connection stalled permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>크롬의 Connection Stalled</h3>\n<p>클라이언트에서 서로 다른 파라미터를 가지고 같은 API endpoint로 수십 개의 API 요청을 보낼 때, 단순히 for문을 사용하여 하나하나 API 요청을 보낼 때와 <code class=\"language-text\">Promise.all()</code>을 사용하여 요청을 보낼 때 성능상의 차이가 크게 발생했다. 이를 크롬 Network 탭에서 확인해보았는데, 요청 시작 시간이나 TTFB와 같은 서버 응답 시간 이외에도 <code class=\"language-text\">Connection Stalled</code>라는 낯선 항목이 있어서 뭔지 알아봄!</p>\n<figure style=\"text-align: center;\">\n  <img src=\"05.png\" width=\"400px\" />\n  <figcaption>요청을 그냥 보냈을 때</figcaption>\n</figure>\n<figure style=\"text-align: center;\">\n  <img src=\"06.png\" width=\"400px\" />\n  <figcaption>요청을 Promise.all로 묶었을 때 </figcaption>\n</figure>\n<p><a href=\"https://developer.chrome.com/docs/devtools/network/reference/#timing-explanation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">크롬 개발자도구 문서</a>에 따르면, 네트워크의 Timing 탭에서 아래와 같은 phase들을 볼 수 있다고 한다.</p>\n<ul>\n<li>Queueing: 다음의 경우들에서 브라우저는 요청을 줄 세운다.\n<ul>\n<li>더 높은 우선순위의 요청이 있을 때</li>\n<li>같은 origin에 대해 이미 6개의 TCP 커넥션이 열려있을 때 (HTTP/1.0과 HTTP/1.1에만 해당)</li>\n<li>브라우저가 디스크 캐시에 공간을 할당할 때</li>\n</ul>\n</li>\n<li>Stalled: 위 Queueing에 해당하는 이유가 발생했을 때 요청은 잠시 멈춘다.</li>\n</ul>\n<p>즉 동일한 API endpoint로 수십 개의 요청을 보내는 위 작업의 경우, 브라우저의 queueing 작업 때문에 몇몇 요청들이 stalled된 상태였다고 해석하면 될 것 같다!</p>\n<p>문서에서 설명하는 그밖의 phase들은 다음과 같다.</p>\n<ul>\n<li>DNS Lookup</li>\n<li>Initial connection</li>\n<li>Proxy negotiation</li>\n<li>Request sent</li>\n<li>ServiceWorker Preparation</li>\n<li>Request to ServiceWorker</li>\n<li>Waiting (TTFB)</li>\n<li>Content Download</li>\n<li>Receiving Push</li>\n<li>Reading Push</li>\n</ul>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li><code class=\"language-text\">enterkeyhint</code>는 가상 키보드의 엔터키를 커스텀할 수 있는 속성이다. 그렇다고 아무거나로는 안되고, 7가지 지정 값 중에서 선택해서 넣을 수 있다. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>크롬 개발자도구의 더보기 (…) 버튼을 누르면 more tools를 선택할 수 있는데, Animations 툴로 속도 조절, 키프레임 수정/제어 등을 할 수 있다.</li>\n<li>네이티브 앱 지면은 <code class=\"language-text\">window.location.href</code>를 이용해 페이지 이동을 할 때 바로 이동이 가능하고, 웹뷰 지면의 경우 URI 인코딩을 해줘야 한다.</li>\n<li><code class=\"language-text\">focusin</code> , <code class=\"language-text\">focusout</code> 은 버블링이 일어나고 <code class=\"language-text\">blur</code> , <code class=\"language-text\">focus</code> 는 버블링이 일어나지 않는다.</li>\n<li>gitbeaker - Gitlab API를 지원하는 node.js의 gitlab API 라이브러리 (<a href=\"https://github.com/jdalrymple/gitbeaker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n</ul>\n<hr>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<h3 id=\"css-transform-속성-분할해서-사용하기\" style=\"position:relative;\"><a href=\"#css-transform-%EC%86%8D%EC%84%B1-%EB%B6%84%ED%95%A0%ED%95%B4%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"css transform 속성 분할해서 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS transform 속성 분할해서 사용하기</h3>\n<p>CSS의 <code class=\"language-text\">transform</code> 속성은 다음과 같이 작성한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.target</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>50%<span class=\"token punctuation\">)</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1.2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 방법은 잘 작동하지만, 각각의 속성들을 따로따로 사용하려면 굉장히 귀찮다. 예를 들어, hover 시에 <code class=\"language-text\">scale</code>의 동작만 변경하고 싶다 하더라도 앞에 나열했던 모든 속성을 다시 작성해줘야 한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.target:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>50%<span class=\"token punctuation\">)</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Only the value of scale() changed */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>크롬 104부터는 CSS transform의 속성을 각각 사용할 수 있다. (💡 브라우저 지원을 확인하자!)</p>\n<p>앞의 예제를 CSS transform 분할 방식으로 사용하면, 다음과 같이 작성할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.target</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">translate</span><span class=\"token punctuation\">:</span> 50% 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">rotate</span><span class=\"token punctuation\">:</span> 30deg<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">scale</span><span class=\"token punctuation\">:</span> 1.2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>순서는 어떻게 될까? 기존의 <code class=\"language-text\">transform</code> 문법에서는 왼쪽에서 오른쪽으로 나열된 순서에 따라 속성이 적용됐다. 새로운 transform 속성 분할 방식에서는, 순서가 항상 고정되어 있다. 1. <code class=\"language-text\">translate</code>, 2. <code class=\"language-text\">rotate</code>, 3. <code class=\"language-text\">scale</code></p>\n<p>새로운 <code class=\"language-text\">transform</code> 속성 작성 방식으로 애니메이션을 보다 쉽게 만들 수 있다 😎</p>\n<p><strong>Ref</strong> <a href=\"https://web.dev/css-individual-transform-properties/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://web.dev/css-individual-transform-properties/</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>우테캠 분들이 새로 입사하셔서 그런지 TIL이 아주 핫하다..! 정리할 것들이 많아졌다 🤩 (기쁘다는 뜻)</p>\n<p>간만에 금요일 휴가 내고 여행 다녀왔다. 안동이라는 크지 않은 동네였는데, 사람도 거의 없고 날씨도 너무 따뜻해서 완전 힐링하고 왔다. 갈비에, 찜닭에, 고등어에… 단백질 가득했던(!) 먹부림은 덤 😋 가을 정취 물씬 느끼고 와서 하루 남은 주말 띵구르르</p>\n<br />\n<img src=\"07.jpg\" width=\"480px\" />","timeToRead":10,"frontmatter":{"title":"11월 2주차 기록","date":"November 13, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-11-week-2/","previous":{"fields":{"slug":"/weekly/2022-11-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"November 19, 2022","description":"weekly-i-learned","title":"11월 3주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2022-11-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"November 04, 2022","description":"weekly-i-learned","title":"11월 첫주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-11-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"November 19, 2022","description":"weekly-i-learned","title":"11월 3주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-11-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"November 04, 2022","description":"weekly-i-learned","title":"11월 첫주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}