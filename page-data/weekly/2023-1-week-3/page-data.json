{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2023-1-week-3/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"bebed319-ddfb-54da-903b-71914646edec","excerpt":"설 앞두고 설렌 맘 배워가기 Deno의 특징들 nodejs에서 개발을 하기위해선 lint, testing tool, package manager, transpiler 등이 필요하다. Deno…","html":"<p>설 앞두고 설렌 맘</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"deno의-특징들\" style=\"position:relative;\"><a href=\"#deno%EC%9D%98-%ED%8A%B9%EC%A7%95%EB%93%A4\" aria-label=\"deno의 특징들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deno의 특징들</h3>\n<p>nodejs에서 개발을 하기위해선 lint, testing tool, package manager, transpiler 등이 필요하다. Deno는 개발 환경 설정에 필요한 작업들 중 일부분을 해결해준다.</p>\n<ul>\n<li>\n<p>본질적으로 패키지 매니저가 없으며, 외부 모듈은 url로 import해서 가지고온다.</p>\n</li>\n<li>\n<p>로컬 캐시에 패키지를 저장한다. (remote HTTP imports)</p>\n</li>\n<li>\n<p>lint도 서브 커맨드로 자체적으로 실행할 수 있다.</p>\n</li>\n<li>\n<p>Node보다 다양한 빌트인 API를 지원한다. (ex. debounce를 자체적으로 지원)</p>\n</li>\n<li>\n<p>런타임 version과 표준 라이브러리 version이 독립적이다.</p>\n<ul>\n<li>예를 들어 node를 사용할 때는 ver 14에서 16으로 버전업할 때 표준라이브러리 API 호환을 걱정해야 하지만, deno에서는 그럴 필요가 없다. 버전을 명시해서 표준 라이브러리를 가져오기 때문이다.</li>\n<li><code class=\"language-text\">import { copy } from \"&lt;[https://deno.land/std@0.172.0/fs/copy.ts](https://deno.land/std@0.172.0/fs/copy.ts)>\";</code></li>\n</ul>\n</li>\n<li>\n<p>원칙적으로는 ESM만 지원한다.</p>\n</li>\n<li>\n<p>Node와의 호환성</p>\n<ul>\n<li><a href=\"https://deno.land/manual@v1.17.0/npm_nodejs/compatibility_mode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node Compatibility mode</a>를 통해 node 코드를 deno에서 실행할 수도 있다.</li>\n<li><code class=\"language-text\">import express from \"npm:express@^4.18\";</code>와 같은 방식 npm package를 가져올 수 있다.</li>\n<li>dnt(deno-node transform)에 의해서 deno 코드를 node에서도 실행할 수 있다.</li>\n<li>Deno 코드를 esbuild와 esbuild-deno-lader를 이용해서 번들링 할 수도 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"받침에-따라-은는-이가-을를-구분하기\" style=\"position:relative;\"><a href=\"#%EB%B0%9B%EC%B9%A8%EC%97%90-%EB%94%B0%EB%9D%BC-%EC%9D%80%EB%8A%94-%EC%9D%B4%EA%B0%80-%EC%9D%84%EB%A5%BC-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0\" aria-label=\"받침에 따라 은는 이가 을를 구분하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>받침에 따라 은/는 이/가 을/를 구분하기</h3>\n<p>한글 유니코드 조합은, 다음 형식으로 구성되어 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0xAC00(처음 한글 시작값) + (초성 인덱스 x 21 x 28 ) + (중성 인덱스 x 28) + 종성 인덱스</code></pre></div>\n<ul>\n<li>초성 인덱스 = ((한글 유니코드값 - 0xAC00) / 28) / 21</li>\n<li>중성 인덱스 = ((한글 유니코드값 - 0xAC00) / 28) % 21</li>\n<li>종성 인덱스 = (한글 유니코드값 - 0xAC00) % 28</li>\n</ul>\n<p>종성 인덱스가 0 이상일 경우는 받침이 있는 경우, 그렇지 않은 경우는 받침이 없는 경우다. 따라서 마지막 글자를 가져온 뒤 종성 인덱스를 가지고 있는지 여부를 판단해서 함수를 만들 수 있다.</p>\n<p>예시로 작성해보자.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">조사를붙여줘</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">,</span> secondValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lastChar <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lastChar <span class=\"token operator\">-</span> <span class=\"token number\">0xac00</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> firstValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> secondValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/e-/Josa.js/blob/master/josa.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">josa</a>라는 이름이 아주 직관적인 라이브러리도 참고해볼 만 하다.</p>\n<h3 id=\"npm을-대체할-yarn-berry\" style=\"position:relative;\"><a href=\"#npm%EC%9D%84-%EB%8C%80%EC%B2%B4%ED%95%A0-yarn-berry\" aria-label=\"npm을 대체할 yarn berry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm을 대체할 yarn berry</h3>\n<p>npm은 파일시스템(<code class=\"language-text\">node_modules</code>)을 통해서 의존성을 관리한다. 이때 찾고자 하는 모듈이 없다면 상위 폴더의 <code class=\"language-text\">node_modules</code>를 참조하기 때문에 불필요한 I/O가 많아질 수 있다.</p>\n<p>또한 <code class=\"language-text\">node_modules</code> 에 패키지가 잘 설치되었는지 확인하기 쉽지않다. 수 백개의 패키지가 서로 의존하고 있는데, 이를 모두 확인해보려면 <code class=\"language-text\">node_modules</code>를 느린 I/O작업으로 살펴봐야 한다.</p>\n<p>이를 개선하기 위해 Yarn berry에서는 pnp 모드를 지원한다.</p>\n<p>해당 모드에서는 <code class=\"language-text\">node_modules</code> 를 아예 사용하지 않으며, <code class=\"language-text\">.pnp.cjs</code> 파일을 사용한다.</p>\n<p>이 파일을 통해 라이브러리가 실제 어디에 존재하는지 경로가 값으로 써져 있어 어떤 패키지가 무엇을 의존하고 있는지 알 수 있으며,</p>\n<p>결과적으로 node가 이미 경로를 알기 때문에 직접 <code class=\"language-text\">node_modules</code>를 탐색할 필요가 없다. 그러므로 <code class=\"language-text\">node_modules</code> 파일 트리 형태를 만들지 않아도 된다.</p>\n<p>또한 모든 패키지는 패키지 버젼별로 zip파일로 만들어져 <code class=\"language-text\">.yarn/cache/</code>로 저장된다. 패키지 버전마다 하나의 zip파일을 가지고 있어서 중복 설치되지 않으며, zip파일로 저장해서 용량도 아낄 수 있다.</p>\n<p>본래 <code class=\"language-text\">node_modules</code> 는 큰 용량 때문에 git 추적에서 제외하지만 yarn berry에서는 의존성 파일들(<code class=\"language-text\">.yarn/cache</code>)도 git 추적을 하기도 한다. 이를 통해 zero-install을 구현할 수 있다. (zip 파일이 작은 용량을 가지기 때문) 그 결과, branch를 바꿨다고 해서 yarn install을 하지 않아도 되며, ci에서 의존성 설치 시간을 줄일 수 있다.</p>\n<h3 id=\"corepack\" style=\"position:relative;\"><a href=\"#corepack\" aria-label=\"corepack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>corepack</h3>\n<p>‘package manager manger’, 말 그대로 패키지 매니저를 관리하는 도구다. (volta, nvm의 패키지 매니저 버전)</p>\n<blockquote>\n<p>LTSv16가 아니라면 <code class=\"language-text\">npm i -g corepack</code> 으로 다운 받고 <code class=\"language-text\">corepack enable</code>을 실행해야 활성화된다.</p>\n</blockquote>\n<p><code class=\"language-text\">package.json</code>의 <code class=\"language-text\">packageManager</code> 필드에서 패키지매니저와 패키지매니저 버젼을 명시해서 강제할 수 있다.</p>\n<p>예로, 폴더 A에서는 pnpm@6, 폴더 B에서는 pnpm@7을 강제하는 상황을 가정해보자. 폴더 A에 접속하면 pnpm은 버젼이 자동으로 6으로 변경되고, 폴더 B에서는 7로 변경된다.</p>\n<p><code class=\"language-text\">corepack prepare pnpm@6.24.2 --activate</code> 을 통해서 유동적으로 버젼을 변경할 수도 있다.</p>\n<h3 id=\"stringprototypereplace의두-번째-인자\" style=\"position:relative;\"><a href=\"#stringprototypereplace%EC%9D%98%EB%91%90-%EB%B2%88%EC%A7%B8-%EC%9D%B8%EC%9E%90\" aria-label=\"stringprototypereplace의두 번째 인자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">String.prototype.replace</code>의 두 번째 인자</h3>\n<p><code class=\"language-text\">String.prototype.replace</code>의 두 번째 인자에는 함수가 올 수도 있다.</p>\n<p>그리고 두번째 인자의 타입이 <code class=\"language-text\">string</code>이라면, 특수한 값이 허용된다.</p>\n<ul>\n<li><code class=\"language-text\">$$</code> : <code class=\"language-text\">$</code> 기호를 삽입</li>\n<li><code class=\"language-text\">$&amp;</code> : 매치된 문자열을 삽입</li>\n<li>`$“ : 매치된 문자열 앞쪽의 문자열 삽입</li>\n<li><code class=\"language-text\">$\\’</code> : 매치된 문자열 이후의 문자열 삽입</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> <span class=\"token string\">\"안녕하세요 저는 지그입니다.\"</span><span class=\"token punctuation\">;</span>\n\nsentence<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"지그\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 안녕하세요 저는 $입니다.</span>\nsentence<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"지그\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$&amp;지그\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 안녕하세요 저는 지그지그입니다.</span>\nsentence<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"지그\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$`\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 안녕하세요 저는 안녕하세요 저는 입니다.</span>\nsentence<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"지그\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 안녕하세요 저는 입니다.입니다.</span></code></pre></div>\n<h3 id=\"svg-fill-알아보기\" style=\"position:relative;\"><a href=\"#svg-fill-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"svg fill 알아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>svg fill 알아보기</h3>\n<p>SVG의 fill 속성은 css로 override가 가능하다.</p>\n<p>다음과 같은 svg 요소가 있을 때,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#fff<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>다음 CSS로 요소의 fill 속성을 override 할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.icon</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">fill</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 그 하위 태그의 fill 속성까지는 override 하지 못한다. 또 fill 속성이 아니라 inline-css로 적용된 fill은 우선순위가 더 높으므로 override 되지 않는다.</p>\n<h3 id=\"storybook의-templatebind\" style=\"position:relative;\"><a href=\"#storybook%EC%9D%98-templatebind\" aria-label=\"storybook의 templatebind permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Storybook의 <code class=\"language-text\">Template.bind()</code></h3>\n<p>Storybook에서 Story를 만들 때 <code class=\"language-text\">bind</code>를 쓰는 이유는 <code class=\"language-text\">Template</code> 함수를 복제해서 사용하기 위해서다. <code class=\"language-text\">Template</code>을 복제하면 각 복제본의 속성을 독립적으로 관리할 수 있다 (또한 속성에 <code class=\"language-text\">args</code>를 추가해 여러 버전을 만들 수 있다).</p>\n<p>Storybook이 이런 추가적인 조치를 하는 것은 <code class=\"language-text\">args</code>를 기반으로 live-edit 기능이 동작하기 때문이다.</p>\n<p>cf) <code class=\"language-text\">Template.bind({})</code>에서 인자 <code class=\"language-text\">{}</code>는 넘겨주지 않아도 된다 (하지만 타입스크립트는 싫어한다.)</p>\n<h3 id=\"시각적-회귀-테스트\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B0%81%EC%A0%81-%ED%9A%8C%EA%B7%80-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"시각적 회귀 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시각적 회귀 테스트</h3>\n<p>시각적 회귀 테스트는 e2e와는 다르다. e2e는 컴포넌트 존재 유무를 판단하지만 시각적 회귀 테스트는 해당 레이아웃이 제대로 보여지는지 혹은 깨졌는지를 파악할 수 있다.</p>\n<p>최근에 캡처한 스크린샷과 현재 스크린샷을 비교해 리포트를 작성하는 방식으로 테스트를 한다. 시각적 회귀 테스트 서비스로는 cypress, LOKI 가 있다.</p>\n<p>회귀 테스트를 이용하지 않는다면 디자인시스템 라이브러리의 버전이 달라질 때마다 계속 확인해줘야 한다.</p>\n<h3 id=\"selection-api\" style=\"position:relative;\"><a href=\"#selection-api\" aria-label=\"selection api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>selection API</h3>\n<p>에디터에서 많이 사용되는 WEB API다. 예를 들어, 에디터에서 “안녕하세요”에서 “안녕”을 마우스로 드래그하고 <code class=\"language-text\">cmd+b</code> 하면 “<strong>안녕</strong>”으로 변경해주는 API다.</p>\n<p><code class=\"language-text\">document.getSelection()</code>을 통해 현재 셀렉션을 알 수 있다. selection은 anchorNode(시작)와 focusNode(끝)로 나눠진다.</p>\n<p>cf) firefox는 멀티 셀렉션이 된다.</p>\n<p>form control에서는 또 다른 형태로 selection API를 제공하며, domElement 자체에서도 메소드를 사용할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">input.selectionStart</code> – input안에 활성화되어있는 selection start 위치</li>\n<li><code class=\"language-text\">input.selectionEnd</code> – input안에 활성화되어있는 selection end위치</li>\n<li><code class=\"language-text\">input.selectionStart === input.selectionEnd</code> - 그곳이 커서의 위치이다.</li>\n</ul>\n<p><code class=\"language-text\">input</code>에 text를 추가하는 예시를 들어보자.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">button<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// setRangeText: election에 포함되어있는 text를 replace하는 메소드</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">setRangeText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span>selectionStart<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span>selectionEnd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"bigint\" style=\"position:relative;\"><a href=\"#bigint\" aria-label=\"bigint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BigInt</h3>\n<ul>\n<li>\n<p>BigInt 값은 TypeScript에서 <code class=\"language-text\">bigint</code> 타입으로 추론된다.</p>\n</li>\n<li>\n<p>숫자 뒤에 <code class=\"language-text\">n</code> 을 붙여 Bigint 리터럴을 사용할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">1n</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"bigint\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"bigint\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n</li>\n<li>\n<p>BigInt는 BigInt끼리의 사칙연산이 가능하다. (<code class=\"language-text\">>>></code>를 제외한 비트연산자나 제곱연산자도 사용이 가능하다)</p>\n<ul>\n<li>단, <code class=\"language-text\">+</code> 단항연산자는 지원하지 않는다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sed-리눅스-쉘-명령어\" style=\"position:relative;\"><a href=\"#sed-%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%89%98-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\"sed 리눅스 쉘 명령어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">sed</code> 리눅스 쉘 명령어</h3>\n<p><code class=\"language-text\">sed</code>는 stream editor의 준말로, input stream (file이나 pipeline을 통한 input)에서 문자 transformation을 수행한다.</p>\n<p>input 파일을 한줄한줄 읽고 명령을 따라서 해당하는 줄(line)을 변경한다. 그리고 그 결과를 standard output으로 반환해준다.</p>\n<ul>\n<li>사용하는 상황\n<ul>\n<li>search &#x26; replace</li>\n<li>text pattern matching</li>\n<li>simple data extraction</li>\n</ul>\n</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># file.txt에 있는 old를 new로 변경</span>\n<span class=\"token comment\"># s: search와 replace를 하겠다는 명령어</span>\n<span class=\"token function\">sed</span> <span class=\"token string\">'s/old/new/g'</span> file.txt</code></pre></div>\n<h3 id=\"file-vs-filelist\" style=\"position:relative;\"><a href=\"#file-vs-filelist\" aria-label=\"file vs filelist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File vs FileList</h3>\n<ul>\n<li>\n<p><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/API/File\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">File</a> 객체</strong></p>\n<ul>\n<li><code class=\"language-text\">Blob</code>의 인터페이스를 확장해서 사용하는 객체이다. <em>(Blob: <strong>B</strong>inary <strong>l</strong>arge <strong>ob</strong>ject)</em>\n<ul>\n<li>따라서 <code class=\"language-text\">Blob</code>을 쓸 수 있다면 <code class=\"language-text\">File</code>도 쓸 수 있다.\n<ul>\n<li>예) <code class=\"language-text\">FileReader</code>, <code class=\"language-text\">URL.createObjectURL()</code> 등</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>lastModified, name, size, type 등의 프로퍼티를 갖는다.</li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://developer.mozilla.org/ko/docs/Web/API/FileList\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FileList</a> 객체</strong></p>\n<ul>\n<li>주로 input type=‘files’나 드래그앤드롭 DataTransfer 객체에서 가져온다.</li>\n<li><code class=\"language-text\">item()</code> 메서드로 인덱스를 넘기면, 위의 <code class=\"language-text\">File</code> 객체를 얻을 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"htmlcollectionitem\" style=\"position:relative;\"><a href=\"#htmlcollectionitem\" aria-label=\"htmlcollectionitem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">HTMLCollection.item</code></h2>\n<p><code class=\"language-text\">[HTMLCollection](https://developer.mozilla.org/ko/docs/Web/API/HTMLCollection)</code> 의 메소드 <code class=\"language-text\">item()</code> 은 컬렉션 안의 특정 인덱스에 위치한 노드를 반환한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLCollection입니다</span>\n<span class=\"token keyword\">var</span> img0 <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이렇게 item() 메소드를 이용할 수 있지만</span>\n<span class=\"token keyword\">var</span> img1 <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이렇게 표기하는게 쉽고 더 보편적입니다</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://developer.mozilla.org/ko/docs/Web/API/HTMLCollection/item\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/API/HTMLCollection/item</a></p>\n<h3 id=\"wai-aria-rolegrid\" style=\"position:relative;\"><a href=\"#wai-aria-rolegrid\" aria-label=\"wai aria rolegrid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WAI-ARIA role=”grid”</h3>\n<p><code class=\"language-text\">role=\"grid\"</code>는 시각적으로는 표 형태이지만, 방향키 등을 통해 탐색하거나 인터랙션이 필요할 때 사용할 수 있는 role이다.</p>\n<p>전체 컨테이너 역할을 하는 <code class=\"language-text\">&lt;table></code> 요소에 <code class=\"language-text\">role=\"grid\"</code>를 삽입하고 각각의 <code class=\"language-text\">&lt;th></code>에<code class=\"language-text\">role=\"columnheader\"</code>, <code class=\"language-text\">&lt;tr></code>에 <code class=\"language-text\">role=\"row\"</code>, <code class=\"language-text\">&lt;td></code>에 <code class=\"language-text\">role=\"gridcell\"</code>을 삽입한다.</p>\n<p>주로 날짜를 선택하는 DatePicker 등에 사용한다.</p>\n<p><strong>Ref</strong> <a href=\"https://aoa.gitbook.io/skymimo/aoa-2018/2018-aria/datepicker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aoa.gitbook.io/skymimo/aoa-2018/2018-aria/datepicker</a></p>\n<h3 id=\"nextjs-프로젝트-세부-경로에서-reload-시-403-에러-나는-이슈\" style=\"position:relative;\"><a href=\"#nextjs-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%B8%EB%B6%80-%EA%B2%BD%EB%A1%9C%EC%97%90%EC%84%9C-reload-%EC%8B%9C-403-%EC%97%90%EB%9F%AC-%EB%82%98%EB%8A%94-%EC%9D%B4%EC%8A%88\" aria-label=\"nextjs 프로젝트 세부 경로에서 reload 시 403 에러 나는 이슈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js 프로젝트 세부 경로에서 reload 시 403 에러 나는 이슈</h3>\n<p>이때는 <code class=\"language-text\">trailingSlash</code>를 붙여줘야 한다.</p>\n<p>기본적으로 브라우저에서는 URL의 주소 끝에 슬래시가 붙어있으면 디렉토리라는 의미고, 없다면 여기가 끝, 즉 파일이라는 것을 의미한다.</p>\n<p>Next.js에서는 기본으로 url 끝에 <code class=\"language-text\">/</code> 가 있다면, 제거해서 페이지를 이동한다. 이를 바꿔주기 위해 next.config.js에서 <code class=\"language-text\">trailingSlash: true</code> 를 명시해줘야 한다.</p>\n<p><strong>Ref</strong> <a href=\"https://nextjs.org/docs/api-reference/next.config.js/trailing-slash\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nextjs.org/docs/api-reference/next.config.js/trailing-slash</a></p>\n<h3 id=\"브라우저-캐시\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%BA%90%EC%8B%9C\" aria-label=\"브라우저 캐시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 캐시</h3>\n<p>브라우저 캐시에는 두 종류가 있다.</p>\n<ul>\n<li><strong>memory cache</strong>\n<ul>\n<li>RAM에 저장한다. (더 빠르다)</li>\n<li>브라우저를 종료하면 휘발된다.</li>\n</ul>\n</li>\n<li><strong>disk cache</strong>\n<ul>\n<li>하드에 저장한다.</li>\n<li>브라우저를 종료해도 유지된다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>SKU - stock keeping unit의 약자로, 재고관리를 위한 최소한의 단위다. 재고관리 시 쓰이는 재고 관리 코드로 주로 사용되며, 각각의 제품을 유닛화해서 상품코드로 지정해서 재고관리가 용이하게 함</li>\n<li><a href=\"https://github.com/semantic-release/semantic-release\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">semantic-release</a> 를 사용해 자동 버저닝 할 때, 기본으로는 <code class=\"language-text\">v1.0.0</code> 부터 버전이 시작한다. 그러나 <code class=\"language-text\">main</code> 브랜치 시작에 <code class=\"language-text\">v0.0.0</code> 버전으로 시작하게 되면 해당 버저닝을 따라간다. (ex. <code class=\"language-text\">v0.1.0-beta.1</code>)</li>\n<li>이미지를 URL 로 바꿀 때, <code class=\"language-text\">window.URL.createObjectURL(file)</code> 을 사용할 수 있다. url을 모두 사용하고 나면 <code class=\"language-text\">window.URL.revokeObjectURL</code> 메소드로 없애줘야 한다. (메모리 관리를 위해서)\nrollup 버전 2까지는 빌드 결과물이 어느 모듈 시스템(esm, cjs)에서 사용되더라도 동작하도록 보조하는 헬퍼를 지원했는데, 버전 3부터는 헬퍼를 디폴트로 제공하지 않는다. 이 때문에 모듈 시스템 관리를 제대로 하지 않으면 에러가 발생할 수도 있다 (rollup 3를 사용하는 vite 4도 마찬가지)</li>\n<li><a href=\"https://pnpm.io/cli/add\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pnpm add</a> vs <a href=\"https://pnpm.io/cli/install\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pnpm install</a>\n<ul>\n<li><code class=\"language-text\">pnpm add</code>: 프로젝트에 새로운 종속성을 추가할 때 사용</li>\n<li><code class=\"language-text\">pnpm install</code>: lockfile이 존재하는 프로젝트에서 lockfile에 존재하는 종속성을 설치할 때 사용</li>\n</ul>\n</li>\n<li>aws의 <code class=\"language-text\">sync</code> 명령어는 없는 데이터에 대해서는 복사를 수행하나, 같은 데이터는 복사하지 않는다. 이때 ‘같은 데이터’의 판단 기준은 수정날짜와 파일 사이즈로 판단한다. (cf. <code class=\"language-text\">-delete</code> 옵션으로 원본에서 삭제된 데이터를 타겟에서도 삭제할 수 있다.)</li>\n<li>React 18에서는 <code class=\"language-text\">React.FC</code> 에 <code class=\"language-text\">children</code>이 없어서, <code class=\"language-text\">PropsWithChildren&lt;Props></code> 으로 prop의 타입을 지정하여 <code class=\"language-text\">children</code> 이 있는 prop을 사용할 수 있다.</li>\n<li>Vite에서 Storybook을 쓰기 위해서는 <code class=\"language-text\">tsconfig-path</code> 설정을 추가해주어야 한다. (<a href=\"https://github.com/storybookjs/storybook/issues/18891\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a> )</li>\n<li>Vite 관련 플러그인들을 모아놓는 <a href=\"https://github.com/vitejs/awesome-vite#plugins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">레포</a> (본인이 플러그인을 만들어 직접 PR할 수도 있다.)</li>\n</ul>\n<hr>\n<h2 id=\"기타공유\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80%EA%B3%B5%EC%9C%A0\" aria-label=\"기타공유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타공유</h2>\n<h3 id=\"grpc란\" style=\"position:relative;\"><a href=\"#grpc%EB%9E%80\" aria-label=\"grpc란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gRPC란?</h3>\n<p>gRPC는 Google에서 개발한 RPC(Remote Procedure Call) 시스템이다. 전송을 위해 TCP/IP 프로토콜과 HTTP 2.0 프로토콜을 사용하고 IDL(Interface Definition language)로 protocol buffer를 사용한다.</p>\n<p>… 🤷‍♀️?</p>\n<p>배경지식부터 짚고 가자.</p>\n<ul>\n<li><strong>RPC(원격 프로시저 호출)</strong> - 한 프로그램이 네트워크의 세부 정보를 이해하지 않고도 네트워크 안의 다른 컴퓨터에 있는 프로그램에서 서비스를 요청하는 프로토콜로, client-server 모델을 사용한다.</li>\n<li><strong>HTTP(Hypertext Transfer Protocol)</strong> - 웹에서 쓰이는 통신 프로토콜로, TCP/IP 프로토콜 위의 레이어(Application layer)에서 동작한다. HTTP 프로토콜은 stateless 프로토콜로, 각각의 데이터 요청이 서로 독립적으로 관리된다. HTTP는 기본적으로 서버-클라이언트 구조를 따른다.\n<ul>\n<li><strong>HTTP 1.1</strong> - 1999년 출시 이후 지금까지 웹에서 가장 많이 사용되고있는 프로토콜로, 기본적으로 연결당 하나의 Request과 Response를 처리하기 때문에 동시전송 문제와 다수의 리소스를 처리하기에 속도 및 성능 이슈를 가지고 있습니다.</li>\n<li><strong>HTTP2.0</strong> - HTTP1.1의 프로토콜을 계승하면서도 성능 향상에 초점을 맞추어, Multiplexed Streams, Stream Prioritization, Header Compression 등의 기능을 제공한다.</li>\n</ul>\n</li>\n<li><strong>IDL(Interface Definition Language)</strong> - 정보를 저장하는 규칙으로, 대표적인 IDL로는 다음 3가지가 있다.\n<ul>\n<li><strong>XML(eXtensible Markup Language)</strong> - 어떠한 데이터를 설명하기 위해 이름을 임의로 지은 태그로 데이터를 감싸며, 태그로 사용자가 직접 데이터 구조를 정의 할 수 있다.</li>\n<li><strong>JSON(JavaScript Object Notation)</strong> - javascript의 부상으로 많이 쓰이고 있는 데이터 구조다. XML이 가진 읽기 불편하고 복잡하고 느린 속도 문제를 해결했으며, 특히나 key-value로 정의된 구조 자체가 굉장히 사람에게 직관적이다.</li>\n<li><strong>Protocol buffers(proto)</strong> - 구조화(structured)된 데이터를 직렬화(serialization)하기 위한 프로토콜로 XML보다 작고 빠르고 간단하다.</li>\n</ul>\n</li>\n</ul>\n<p>그래서 gRPC가 뭐냐면…</p>\n<p>gRPC는 구글에서 만든 RPC 플랫폼이며 protocol buffer와 RPC를 사용한다. 최신 버전의 IDL로 proto3를 사용한다. Java, C ++, Python, Java Lite, Ruby, JavaScript, Objective-C 및 C#에서 사용 가능하다.</p>\n<p>SSL/TLS를 사용하여 서버를 인증하고 클라이언트와 서버간에 교환되는 모든 데이터를 암호화한다. HTTP 2.0을 사용하여 성능이 뛰어나고 확장 가능한 API를 지원한다.</p>\n<p>gRPC에서 클라이언트 응용 프로그램을 서버에서 함수를 바로 호출 할 수 있어 분산 MSA(Micro Service Architecture)를 쉽게 구현 할 수 있다. 서버 측에서는 서버 인터페이스를 구현하고 gRPC 서버를 실행하여 클라이언트 호출을 처리한다.</p>\n<blockquote>\n<p>RPC 플랫폼 + 배경지식에 나온 모든 좋은 기능들을 때려박은 시스템이다!</p>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://chacha95.github.io/2020-06-15-gRPC1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://chacha95.github.io/2020-06-15-gRPC1/</a></p>\n<h3 id=\"you-dont-need-nextjs\" style=\"position:relative;\"><a href=\"#you-dont-need-nextjs\" aria-label=\"you dont need nextjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>You don’t need Next.js</h3>\n<p>SEO가 필요한 사이트가 아니라면, Next.js가 필요없다는 이야기다.</p>\n<ul>\n<li>Next.js의 설계는 굉장히 폐쇄적이다.</li>\n<li>하나의 큰 앱을 (같은 도메인을 유지한 채) 작은 단위의 앱들로 쪼개기 어렵다.</li>\n<li>Next 기반의 앱을 패키징하기가 어렵다.</li>\n<li>서버-클라이언트-빌드 단계가 강결합되어 있다.</li>\n<li>다른 소프트웨어 툴들과 결합하기 어렵다.</li>\n<li>풀스택도 아니고, 프론트엔드 프레임워크도 아니고?</li>\n<li>Next 앱은 <a href=\"https://12factor.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">12-factor 방법론</a>을 따르기가 어렵다.</li>\n<li>Hydration은 투머치하다.</li>\n<li>SSR을 사용하려면 결국 코드를 끼워맞춰야 한다.</li>\n</ul>\n<p>…등등의 수도 없는 악설을 퍼붓고 있다 🤷‍♀️</p>\n<p>그러나 Next.js의 SSG나 ISR을 이용한 렌더링은 꽤나 훌륭한 선택지가 될 수 있으므로, SEO나 OG가 중요한 웹사이트들에서는 사용하는 것을 추천한다고 한다~</p>\n<p><strong>Ref</strong> <a href=\"https://blog.webf.zone/you-dont-need-next-js-and-ssr-7c6bd27e78d8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.webf.zone/you-dont-need-next-js-and-ssr-7c6bd27e78d8</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>민족 대명절 설이다. 🐰 계묘년 새해… 올해는 왠지 설이 너무 빨라서 아쉬워버리기도 하지만 (아직 일도 제대로 안 해서 쉬는 기분이 안 날 줄 알았다.) 막상 또 쉬니까 좋다. 설 연휴 안 끝났으면… 그치만 평상시에 일도 공부도 열심히 해야 또 쉬는 맛이 나는 거겠지 😎</p>\n<p>설 연휴 직전엔 오이도 드라이브 갔다왔다. 찬바람 미쳤다. 조개구이는 아주 맛있게 먹고왔다. 배터져부러</p>","timeToRead":13,"frontmatter":{"title":"1월 3주차 기록","date":"January 20, 2023","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2023-1-week-3/","previous":{"fields":{"slug":"/weekly/2023-1-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 28, 2023","description":"weekly-i-learned","title":"1월 4주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2023-1-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 14, 2023","description":"weekly-i-learned","title":"1월 2주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2023-1-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 28, 2023","description":"weekly-i-learned","title":"1월 4주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2023-1-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 14, 2023","description":"weekly-i-learned","title":"1월 2주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}