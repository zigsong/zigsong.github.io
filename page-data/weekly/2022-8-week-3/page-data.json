{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-8-week-3/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"f61cf404-d9d9-5d8e-a55a-db95297ec31e","excerpt":"우영우가 끝났다 배워가기 Next.js에서 locale 설정 Next.js에서 locale을 설정하는 방법은 2가지가 있다. 첫번째 방법은 아래와 같이 i18n 설정을 next.config.js 파일에 추가하는 방식이다. 그러나 이 방법을 사용하게 되면 url…","html":"<p>우영우가 끝났다</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"nextjs에서-locale-설정\" style=\"position:relative;\"><a href=\"#nextjs%EC%97%90%EC%84%9C-locale-%EC%84%A4%EC%A0%95\" aria-label=\"nextjs에서 locale 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js에서 locale 설정</h3>\n<p>Next.js에서 locale을 설정하는 방법은 2가지가 있다.</p>\n<p>첫번째 방법은 아래와 같이 i18n 설정을 next.config.js 파일에 추가하는 방식이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token literal-property property\">i18n</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">locales</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ko'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">defaultLocale</span><span class=\"token operator\">:</span> <span class=\"token string\">'ko'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>그러나 이 방법을 사용하게 되면 url이 다음과 같이 표시된다.</p>\n<p><code class=\"language-text\">http://localhost:3000/ko/packages</code></p>\n<p><code class=\"language-text\">ko/</code> 라는 locale 정보가 url에 같이 들어가게 되는데, 국제화를 고려중이지 않는다면 다른 방법을 사용하는 것이 좋다.</p>\n<p>그 다른 방법은 아래와 같이 <code class=\"language-text\">custom document</code> 를 이용하는 방식으로, <code class=\"language-text\">_document.tsx</code> 파일에 다음과 같이 작성하는 것이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> NextDocument<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Html<span class=\"token punctuation\">,</span> Head<span class=\"token punctuation\">,</span> Main<span class=\"token punctuation\">,</span> NextScript <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/document\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Document</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">NextDocument<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Html</span></span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ko<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Head</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Main</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NextScript</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Html</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"class-constructor\" style=\"position:relative;\"><a href=\"#class-constructor\" aria-label=\"class constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>class constructor</h3>\n<p><code class=\"language-text\">Class constructor &lt;React Class component> cannot be invoked without 'new'</code> 문제를 어떻게 해결할까?</p>\n<p>React Element는 일반 객체이므로 변수에 저장할 때 <code class=\"language-text\">observable</code>로 바뀌면 안 된다. (Mobx는 기본적으로 클래스 인스턴스를 제외한 모든 데이터 구조를 재귀적으로 <code class=\"language-text\">observable</code>로 만든다.)</p>\n<p><code class=\"language-text\">observable.shallow</code> 는 얕은 복사를 하기 때문에 <code class=\"language-text\">observable</code>과 다르게 객체 내부 값들까지 observable로 변환하지는 않는다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToastStore</span> <span class=\"token punctuation\">{</span>\n  toasts<span class=\"token operator\">:</span> ReactElement<span class=\"token operator\">&lt;</span>Toast<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">makeObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      toasts<span class=\"token operator\">:</span> observable<span class=\"token punctuation\">.</span>shallow<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>즉, mobx 스토어에 <code class=\"language-text\">ReactElement</code>를 저장할 땐 <code class=\"language-text\">observable.shallow</code> 를 써야 한다.</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/mobxjs/mobx/issues/3503\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/mobxjs/mobx/issues/3503</a></p>\n<h3 id=\"match-vs-exec\" style=\"position:relative;\"><a href=\"#match-vs-exec\" aria-label=\"match vs exec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">.match()</code> vs <code class=\"language-text\">.exec()</code></h3>\n<p><code class=\"language-text\">String.prototype.match()</code>와 <code class=\"language-text\">Regex.prototype.exec()</code>은 동일한 메서드다. 문자열이 정규식과 매치되는 부분을 검색한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreg<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 서로 반대</span></code></pre></div>\n<p>다만 <code class=\"language-text\">g</code> 플래그에 따라 조금 다른 결과를 반환한다. 정규식에 <code class=\"language-text\">g</code> 플래그가 포함되어있지 않으면, <code class=\"language-text\">str.match()</code> 는 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RegExp.exec()</a>와 같은 결과를 반환한다. 반환된 배열은 원래 문자열의 값을 가지는 <code class=\"language-text\">input</code> 속성을 포함한다. 그리고 문자열에서 제로 베이스의 인덱스를 나타내는 <code class=\"language-text\">index</code> 속성 또한 포함한다.</p>\n<h3 id=\"ref의-두-가지-패턴\" style=\"position:relative;\"><a href=\"#ref%EC%9D%98-%EB%91%90-%EA%B0%80%EC%A7%80-%ED%8C%A8%ED%84%B4\" aria-label=\"ref의 두 가지 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ref의 두 가지 패턴</h3>\n<p>ref 객체에는 두 가지 패턴이 있다.</p>\n<ul>\n<li>Ref object\n<ul>\n<li><code class=\"language-text\">useRef</code> 또는 클래스 컴포넌트에서 <code class=\"language-text\">createRef</code> 로 생성되는 객체</li>\n<li><code class=\"language-text\">.current</code> 프로퍼티를 가지고 있다.</li>\n</ul>\n</li>\n<li>Ref callback\n<ul>\n<li>어떤 요소에 함수를 넘기고, 그 인스턴스가 생성 또는 파괴될 때 함수가 호출된다. 이때 이 타입은 <code class=\"language-text\">(instance: T) => void</code>이다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://stackoverflow.com/questions/65876809/property-current-does-not-exist-on-type-instance-htmldivelement-null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/65876809/property-current-does-not-exist-on-type-instance-htmldivelement-null</a></p>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>\n<p>emotion에서 아래와 같은 vendor prefix를 자동으로 넣어준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">transition-property</span><span class=\"token punctuation\">:</span> transform<span class=\"token punctuation\">;</span>\n<span class=\"token property\">-webkit-transition-property</span><span class=\"token punctuation\">:</span> -webkit-transform<span class=\"token punctuation\">;</span>\n<span class=\"token property\">transition-timing-function</span><span class=\"token punctuation\">:</span> <span class=\"token function\">cubic-bezier</span><span class=\"token punctuation\">(</span>0.08<span class=\"token punctuation\">,</span> 0.5<span class=\"token punctuation\">,</span> 0.77<span class=\"token punctuation\">,</span> 0.94<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">-webkit-transition-timing-function</span><span class=\"token punctuation\">:</span> <span class=\"token function\">cubic-bezier</span><span class=\"token punctuation\">(</span>0.08<span class=\"token punctuation\">,</span> 0.5<span class=\"token punctuation\">,</span> 0.77<span class=\"token punctuation\">,</span> 0.94<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">transition-property</span><span class=\"token punctuation\">:</span> transform<span class=\"token punctuation\">;</span>\n<span class=\"token property\">transition-timing-function</span><span class=\"token punctuation\">:</span> <span class=\"token function\">cubic-bezier</span><span class=\"token punctuation\">(</span>0.08<span class=\"token punctuation\">,</span> 0.5<span class=\"token punctuation\">,</span> 0.77<span class=\"token punctuation\">,</span> 0.94<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>anchor 태그에는 <code class=\"language-text\">type</code>이라는 attribute가 이미 있다. 링크 URL의 MIME type을 나타낸다. (<a href=\"https://developer.mozilla.org/ko/docs/Web/HTML/Element/a#attr-type\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a>)</p>\n</li>\n<li>\n<p>Gitlab CI/CD pipeline에서  <code class=\"language-text\">include files .gitlab-ci.yml does not have valid YAML syntax!</code> 와 같은 error가 발생한다면 include한, 즉 <code class=\"language-text\">.gitlab-ci.yml</code> 에 명시한 파일들을 모두 불러올 수 있는지 확인해봐야 한다. <code class=\"language-text\">node</code> 를 기준으로 <code class=\"language-text\">yml</code> 파일을 작성했는데 어디서 <code class=\"language-text\">gradle</code>을 사용하고 있다든가 하는 경우에 해당 에러가 발생할 수 있다.</p>\n</li>\n<li>\n<p>regression test - 이미 테스트된 프로그램의 테스팅을 반복하는 것으로, 결함 수정 이후 변경의 결과로 새롭게 만들어 지거나, 이전 결함으로 인해 발견되지 않았던 또 다른 결함을 발견하는 테스트</p>\n</li>\n<li>\n<p>aws cloudfront가 http3를 지원한다. (<a href=\"https://aws.amazon.com/blogs/aws/new-http-3-support-for-amazon-cloudfront/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a>)</p>\n</li>\n<li>\n<p><code class=\"language-text\">overscroll-behavior-y</code>를 사용하면 화면의 터치스크롤 여부를 정할 수 있다. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-y\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a>)</p>\n</li>\n<li>\n<p><code class=\"language-text\">ref</code>에 <code class=\"language-text\">setState</code>를 넣을 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>divElement<span class=\"token punctuation\">,</span> setDivElement<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setDivElement<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">ol</code> 태그에는 <code class=\"language-text\">reversed</code> 등 특화된 attribute를 쓸 수 있다</p>\n</li>\n<li>\n<p><code class=\"language-text\">regex.replace()</code> - <code class=\"language-text\">regex.replace()</code>에서 <code class=\"language-text\">$1</code> 과 같은 비표준 속성을 쓸 수 있다 (<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a>)</p>\n</li>\n<li>\n<p>컴포넌트의 props 타입을 가져올 때 아래와 같이 작성할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> MyComponent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>광복절을 하루 낀 주라 그런지 괜히 여유롭다… 첫 피트스탑이기도 하고, 사장님프론트개발팀 첫 워크샵이기도 하고. 워크샵은 정말 알차고 재밌었당. K-부동산 게임은 예측불허였고, 펭귄 게임을 얻어와서 기쁘다!</p>\n<p>그리고 우영우 마지막화가 끝났다! 계속 마지막화에 머물게 된다 ㅠㅠ 아쉽다. 영우준호 행복해야해…</p>","timeToRead":4,"frontmatter":{"title":"8월 3주차 기록","date":"August 20, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-8-week-3/","previous":{"fields":{"slug":"/weekly/2022-8-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"August 28, 2022","description":"weekly-i-learned","title":"8월 4주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2022-8-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"August 13, 2022","description":"weekly-i-learned","title":"8월 2주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-8-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"August 28, 2022","description":"weekly-i-learned","title":"8월 4주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-8-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"August 13, 2022","description":"weekly-i-learned","title":"8월 2주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}