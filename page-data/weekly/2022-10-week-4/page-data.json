{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-10-week-4/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"d98ca53a-fd05-5d1d-8a07-3568f9f54815","excerpt":"환승연애도 스터디도 끝 배워가기 inaria styled-components에서 영감을 받아 유사한 API를 가진 CSS-in-JS 라이브러리로, zero-runtime이 특징이다. 동적인 스타일링을 CSS variables를 사용하여 해결하며, 주요 렌더링 경로에 사용되는 CSS…","html":"<p>환승연애도 스터디도 끝</p>\n<!-- more -->\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<hr>\n<h3 id=\"inaria\" style=\"position:relative;\"><a href=\"#inaria\" aria-label=\"inaria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inaria</h3>\n<p>styled-components에서 영감을 받아 유사한 API를 가진 CSS-in-JS 라이브러리로, zero-runtime이 특징이다.</p>\n<p>동적인 스타일링을 CSS variables를 사용하여 해결하며, 주요 렌더링 경로에 사용되는 CSS는 스타일 시트로 추출하여 문서 상단에 주입하고 나머지는 <code class=\"language-text\">&lt;link></code> 태그로 로드하여 렌더링을 막지 않고 비동기로 로드함</p>\n<p>장점은 협업 시 이름 짓기에 대한 고민을 없애준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Write your styles in `css` tag</span>\n<span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  text-transform: uppercase;\n  font-family: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fonts<span class=\"token punctuation\">.</span>heading<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  font-size: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">modularScale</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">hiDPI</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> {\n    font-size: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">modularScale</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Then use it as a class name</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>header<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">styled</code> API를 통해 컴포넌트를 쉽게 만들 수 있으며, zero Runtime이기 때문에 자바스크립트 번들에 포함되지 않음는다. 메인 쓰레드를 사용하지 않아서 UI에 대한 체감 속도가 빠르게 느껴질 수 있다.</p>\n<p>또 사용법이 친숙한 styled-component의 API와 유사하며, CSS-in-JS답게 스코프를 특정 컴포넌트로 제한할 수 있다.</p>\n<p>하지만 단점도 있다. 우선 babel을 필수적으로 사용해야 하며, 문서가 빈약하다.</p>\n<p>CSS 프로퍼티에 대한 타입 체킹이 부재하며, 동적 스타일링이 너무 많아질시 HTML 마크업 테러가 우려된다.</p>\n<blockquote>\n<p>👩‍🏫 주의사항\nCSS Variables는 다른 CSS와 다르게 고유의 상속 계층을 갖고있기 때문에 <code class=\"language-text\">inherit</code> 값을 쓸 때 주의해야 한다.</p>\n</blockquote>\n<h3 id=\"usestate의-값을-ref에-사용하기\" style=\"position:relative;\"><a href=\"#usestate%EC%9D%98-%EA%B0%92%EC%9D%84-ref%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"usestate의 값을 ref에 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">useState</code>의 값을 <code class=\"language-text\">ref</code>에 사용하기</h3>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>element<span class=\"token punctuation\">,</span> setElement<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLDivElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ref.current</code> 대신에 <code class=\"language-text\">element</code>를 사용하며, <code class=\"language-text\">ref={ref}</code> 대신에 <code class=\"language-text\">ref={setElement}</code>로 작성하는 방식이다.</p>\n<p>이런 방법을 <strong><a href=\"https://reactjs.org/docs/refs-and-the-dom.html#callback-refs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">callback ref</a></strong> 라고도 부른다.</p>\n<p>일반적으로 사용하는 <code class=\"language-text\">ref</code>는, node가 변화하더라도 업데이트 사항이 바로 반영되지 않는다.</p>\n<p>반면 <code class=\"language-text\">callback ref</code>는 node가 변하면 바로 업데이트 사항이 반영된다.</p>\n<h3 id=\"넷플릭스의-카오스-몽키\" style=\"position:relative;\"><a href=\"#%EB%84%B7%ED%94%8C%EB%A6%AD%EC%8A%A4%EC%9D%98-%EC%B9%B4%EC%98%A4%EC%8A%A4-%EB%AA%BD%ED%82%A4\" aria-label=\"넷플릭스의 카오스 몽키 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>넷플릭스의 ‘카오스 몽키’</h3>\n<p>원숭이가 몽둥이를 들고 데이터센터(클라우드) 에 들어와 난동을 부려(인스턴스 파괴 및 케이블 절단) 서버가 중단 되더라도 서비스는 계속 유지되어야 한다는 개념이다.</p>\n<p>AWS 클러스터를 중단 시켜, 취약한 부분을 파악하고 자동 복구 메커니즘을 구축하여 문제 발생시 자동으로 트리거한다.</p>\n<p>실제로 특정 지역(US-EAST-1) 에서 AWS 서비스 중단 시에 이전에 시행했던 AWS 가용성 영역 중단 시뮬레이션으로 트래픽 FailOver를 원활하게 처리했다.</p>\n<p>2013년 경 아마존의 잘못으로 넷플릭스 서비스 불가 문제를 겪은 후 카오스 몽키 도입했다.</p>\n<h3 id=\"스토리북-no-display-name-\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC%EB%B6%81-no-display-name-\" aria-label=\"스토리북 no display name  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토리북 <code class=\"language-text\">&lt;No Display Name /></code></h3>\n<p>스토리북에서 ‘Show Code’ 버튼을 눌렀을 때 <code class=\"language-text\">&lt;No Display Name /></code> 이 뜨고 코드를 보여주지 않는 경우가 있다.</p>\n<p>이는 스토리에 decorator를 적용했을 때 발생하는 문제로, <code class=\"language-text\">.storybook/main.js</code> 파일에 다음과 같이 작성하여 해결한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token literal-property property\">docs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">transformSource</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"No Display Name\"</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://github.com/storybookjs/storybook/issues/12596\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/storybookjs/storybook/issues/12596</a></li>\n<li><a href=\"https://github.com/storybookjs/storybook/issues/12022\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/storybookjs/storybook/issues/12022</a></li>\n</ul>\n<h3 id=\"classnames-라이브러리\" style=\"position:relative;\"><a href=\"#classnames-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"classnames 라이브러리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">classNames</code> 라이브러리</h3>\n<p>여러 className들을 합쳐서 사용할 수 있게 해준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'foo bar'</span>\n<span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'foo bar'</span>\n<span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"foo-bar\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'foo-bar'</span>\n<span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"foo-bar\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ''</span>\n<span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'foo bar'</span>\n<span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'foo bar'</span></code></pre></div>\n<p>완전 좋은 것 중 하나는, <code class=\"language-text\">[bind](https://github.com/JedWatson/classnames#alternate-bind-version-for-css-modules)</code> 기능이다! <code class=\"language-text\">bind</code>를 쓰면, className을 일반 css 코드와도 합칠 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> classNames <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classnames/bind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">baz</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xyz\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> cx <span class=\"token operator\">=</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> className <span class=\"token operator\">=</span> <span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">baz</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"abc def xyz\"</span></code></pre></div>\n<p>😮😮😮</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/JedWatson/classnames%5D(https://github.com/JedWatson/classnames\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/JedWatson/classnames](https://github.com/JedWatson/classnames</a></p>\n<h3 id=\"user-drag-vs-user-select\" style=\"position:relative;\"><a href=\"#user-drag-vs-user-select\" aria-label=\"user drag vs user select permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">user-drag</code> vs <code class=\"language-text\">user-select</code></h3>\n<p>css의 <code class=\"language-text\">user-select</code>는, 사용자가 텍스트를 선택할 수 있는지 여부를 정할 수 있다. <code class=\"language-text\">user-select: none</code>을 하면, html의 텍스트를 마우스 이벤트 등으로 선택할 수 없다.</p>\n<p>그리고 표준 문법은 아니지만, <code class=\"language-text\">user-drag</code>라는 속성도 있었다. <code class=\"language-text\">user-drag: none</code>으로 설정하면, 이미지 드래그 시 고스트 이미지가 따라오는 현상을 막을 수 있다.</p>\n<p><strong>Ref</strong> <a href=\"https://stackoverflow.com/questions/52369425/difference-between-user-drag-and-user-select-in-css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/52369425/difference-between-user-drag-and-user-select-in-css</a></p>\n<h3 id=\"box-shadow-vs-drop-shadow\" style=\"position:relative;\"><a href=\"#box-shadow-vs-drop-shadow\" aria-label=\"box shadow vs drop shadow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">box-shadow</code> vs <code class=\"language-text\">drop-shadow</code></h3>\n<p>css에서 요소에 그림자를 만드는 두 가지 방법! 차이점을 보면 구분하기 쉽다.</p>\n<ul>\n<li>box-shadow는 css box model을 바탕으로 만들어진다\n<img src=\"01.png\" width=\"480px\" /></li>\n<li>drop-shadow는 의도한 모양 둘레에 만들어진다\n<img src=\"02.png\" width=\"480px\" /></li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://css-tricks.com/breaking-css-box-shadow-vs-drop-shadow/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://css-tricks.com/breaking-css-box-shadow-vs-drop-shadow/</a></p>\n<h3 id=\"react-query의-cachetime-vs-staletime\" style=\"position:relative;\"><a href=\"#react-query%EC%9D%98-cachetime-vs-staletime\" aria-label=\"react query의 cachetime vs staletime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React query의 <code class=\"language-text\">cacheTime</code> vs <code class=\"language-text\">staleTime</code></h3>\n<ul>\n<li>\n<p><code class=\"language-text\">cacheTime</code></p>\n<ul>\n<li>특정 응답이 GC에 의해 제거되기 전, 얼마나 캐시에 남아있을지를 정한다.</li>\n<li>즉 특정 값의 만료 시간과 관련 있다.</li>\n<li>기본값은 5분</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">staleTime</code></p>\n<ul>\n<li>특정 응답이 신선하다고(not stale) 여겨지는 시간이다. (새로운 요청을 보내는지 여부와는 관련 없다.)</li>\n<li>특정 query의 유효성을 만료시키는 값이다.</li>\n<li>기본값은 0초</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">staleTime</code>을 <code class=\"language-text\">Infinity</code>로 두면, 다시 클라이언트로 돌아와도 <code class=\"language-text\">cacheTime</code> 이 남아있으므로 cache에서 데이터를 가져올 수 있다.</p>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://medium.com/doctolib/react-query-cachetime-vs-staletime-ec74defc483e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/doctolib/react-query-cachetime-vs-staletime-ec74defc483e</a></p>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>잘못 올린 git 태그는 <code class=\"language-text\">-d</code> 옵션으로 지울 수 있다. (<code class=\"language-text\">git tag -d 버전</code>)</li>\n<li>서브셋 폰트(subset font)는 폰트 파일에서 불필요한 글자를 제거하고 사용할 글자만 남겨둔 폰트다.</li>\n<li><code class=\"language-text\">div</code>, <code class=\"language-text\">span</code>에서 <code class=\"language-text\">aria-label</code>을 사용하려면 반드시 <code class=\"language-text\">role</code>을 지정해야한다. (아이콘은 <code class=\"language-text\">role='img'</code>로 해두면 된다 - <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/img_role\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li><a href=\"https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-relative-parent-imports.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">no-relative-folder-imports</a> eslint rule은, 폴더를 import할 때 상대 경로로 import할 수 없게 만든다.</li>\n<li>스토리북의 <code class=\"language-text\">ArgsTable</code> (<a href=\"https://storybook.js.org/docs/react/writing-docs/doc-block-argstable\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)\n<ul>\n<li>특정 컴포넌트의 args를 table 형태로 보여준다. (따로 작성하지 않으면, 스토리북에서 알아서 만들어준다.)\n<img src=\"03.png\" width=\"480px\" /></li>\n</ul>\n</li>\n<li>CORS 에러에는 http status code가 없다! (status는 0) <a href=\"https://huns.me/development/2297\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a></li>\n<li>yarn.lock은 패키지에 <code class=\"language-text\">^</code> 이 있어도 업데이트를 하지 않기 때문에, package-lock.json과 달리 리모트 저장소에 올리지 않아도 된다.</li>\n</ul>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<hr>\n<h3 id=\"oh-my-zsh에서-제공하는-git-관련-단축-명령어\" style=\"position:relative;\"><a href=\"#oh-my-zsh%EC%97%90%EC%84%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-git-%EA%B4%80%EB%A0%A8-%EB%8B%A8%EC%B6%95-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\"oh my zsh에서 제공하는 git 관련 단축 명령어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>oh-my-zsh에서 제공하는 git 관련 단축 명령어</h3>\n<p><a href=\"https://kapeli.com/cheat_sheets/Oh-My-Zsh_Git.docset/Contents/Resources/Documents/index\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cheat-sheet</a>에서 확인할 수 있다!! 그동안 알음알음 쓰던 것들만 써왔는데 왜 이런걸 찾아볼 생각을 안했는지 🙄</p>\n<h3 id=\"tsc보다-1000배-빠른-typescript-컴파일러\" style=\"position:relative;\"><a href=\"#tsc%EB%B3%B4%EB%8B%A4-1000%EB%B0%B0-%EB%B9%A0%EB%A5%B8-typescript-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC\" aria-label=\"tsc보다 1000배 빠른 typescript 컴파일러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TSC보다 1000배 빠른 TypeScript 컴파일러</h3>\n<p><a href=\"https://github.com/marcj/TypeRunner\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeRunner</a>는 C++로 만들어진 TSC보다 1000배 빠른 TypeScript 컴파일러로, 아직 개발 단계에 있다. 타입체킹, 트랜스파일링 외에도 다른 언어에서 TS 타입을 사용하는 등 다양한 기능을 제공합니다.</p>\n<p>TypeRunner의 개발자는 단순히 다른 언어로의 포팅(ex. go로 개발한 타입스크립트 컴파일러)은 퍼포먼스 차이가 크지 않으며, TSC가 느린 이유는 설계 자체에서 기인한다고 설명한다.</p>\n<h3 id=\"react의-use-hook\" style=\"position:relative;\"><a href=\"#react%EC%9D%98-use-hook\" aria-label=\"react의 use hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React의 <code class=\"language-text\">use</code> hook</h3>\n<p><code class=\"language-text\">useXXX</code>가 아니라 진짜 그냥 이름이 <code class=\"language-text\">use</code>가 끝이라고 한다. 🙄</p>\n<p>아직 proposal 단계로, <code class=\"language-text\">use</code>를 사용하면 fulfilled된 Promise의 값을 읽을 수 있으며 에러 핸들링과 로딩은 가장 가까운 Suspense에 위임한다.</p>\n<p>이를 통해 컴포넌트들을 context로 그룹핑할 수 있으며, 모든 컴포넌트가 데이터를 로드했을 때 렌더링하게끔 해준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchNote</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchNoteFromBackend</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">useCache</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Note</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchNote</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span><span class=\"token comment\">/* Loading will be displayed until all Note components fetch necessary data */</span><span class=\"token punctuation\">}</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading…</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Note</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Note</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Note</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마치… React-Query나 Recoil 등의 라이브러리를 리액트가 자체 API로 만들고 싶었던 것 같기도?</p>\n<p>데이터의 캐시 처리 등도 해놓은 것을 봐서…</p>\n<p>특징은 React hook 최초로 if문 안에 분기 처리가 가능하다는 점인데, 기존에 분기 처리가 불가능 하다는 hook 규칙을 깸으로써 복잡성 증가를 우려하는 의견들이 많다.</p>\n<img src=\"04.jpeg\" width=\"480px\" />\n<p><strong>Ref</strong> <a href=\"https://vived.io/new-hook-is-coming-to-react-frontend-weekly-vol-109/?utm_source=reddit&#x26;utm_medium=r-reactjs&#x26;utm_campaign=weekly-frontend\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://vived.io/new-hook-is-coming-to-react-frontend-weekly-vol-109/?utm_source=reddit&#x26;utm_medium=r-reactjs&#x26;utm_campaign=weekly-frontend</a></p>\n<h3 id=\"nextjs의-터보팩\" style=\"position:relative;\"><a href=\"#nextjs%EC%9D%98-%ED%84%B0%EB%B3%B4%ED%8C%A9\" aria-label=\"nextjs의 터보팩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js의 터보팩</h3>\n<p>Next.js conf에서 발표된 <strong>터보팩</strong>은 Rust 기반으로 된 webpack의 후속 번들러다.</p>\n<ul>\n<li>Next 13버전부터 사용 가능하다</li>\n<li>webpack보다 700배, vite보다 10배 빠르다</li>\n<li>ServerComponent, TS, JSX, CSS 등을 지원한다</li>\n</ul>\n<p>이렇게 빠른 이유는, 프로그램에서 실행되는 모든 함수의 결과를 캐시함으로써, 프로그램을 재실행 시 동일한 함수를 다시 실행시키지 않기 때문이라고 한다.</p>\n<p><strong>Ref</strong> <a href=\"https://vercel.com/blog/turbopack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://vercel.com/blog/turbopack</a></p>\n<h3 id=\"nodejs-18버전의-공식-release\" style=\"position:relative;\"><a href=\"#nodejs-18%EB%B2%84%EC%A0%84%EC%9D%98-%EA%B3%B5%EC%8B%9D-release\" aria-label=\"nodejs 18버전의 공식 release permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js 18버전의 공식 Release</h3>\n<p>이제 v16의 시대도 갔다…</p>\n<p><strong>Ref</strong> <a href=\"https://nodejs.org/en/blog/release/v18.12.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nodejs.org/en/blog/release/v18.12.0</a></p>\n<h3 id=\"wasmtime-10\" style=\"position:relative;\"><a href=\"#wasmtime-10\" aria-label=\"wasmtime 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wasmtime 1.0</h3>\n<p>Wasmtime WebAssembly 런타임이 이제 1.0이 되었다고 한다!</p>\n<blockquote>\n<p>Wasmtime은 WebAssembly와 WASI 런타임을 최적화하기 위한 도구다.\n(WASI: 브라우저 외부에서 WebAssembly를 사용하기 위한 Mozilla 프로젝트)\nRef <a href=\"https://docs.wasmtime.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.wasmtime.dev/</a></p>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://bytecodealliance.org/articles/wasmtime-1-0-fast-safe-and-production-ready\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://bytecodealliance.org/articles/wasmtime-1-0-fast-safe-and-production-ready</a></p>\n<h3 id=\"typescript-타입-시스템-뜯어보기-타입-호환성\" style=\"position:relative;\"><a href=\"#typescript-%ED%83%80%EC%9E%85-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%9C%AF%EC%96%B4%EB%B3%B4%EA%B8%B0-%ED%83%80%EC%9E%85-%ED%98%B8%ED%99%98%EC%84%B1\" aria-label=\"typescript 타입 시스템 뜯어보기 타입 호환성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript 타입 시스템 뜯어보기: 타입 호환성</h3>\n<p>TypeScript의 타입 호환성은 구조적 서브타이핑(structural subtyping)을 기반으로 한다는 내용으로,\ny가 최소한 x와 동일한 멤버를 가지고 있다면 x와 y는 호환된다는 것이다.</p>\n<p>구조적 서브타이핑과 명목적 서브타이핑의 차이, 그리고 구조적 서브타이핑이 예외적으로 허용되지 않는 경우와 TypeScript 설계상의 이유를 알고싶다면! ⬇️</p>\n<p><strong>Ref</strong> <a href=\"https://toss.tech/article/typescript-type-compatibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://toss.tech/article/typescript-type-compatibility</a></p>\n<h3 id=\"인프라-어디까지-구축해-봤어\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%94%84%EB%9D%BC-%EC%96%B4%EB%94%94%EA%B9%8C%EC%A7%80-%EA%B5%AC%EC%B6%95%ED%95%B4-%EB%B4%A4%EC%96%B4\" aria-label=\"인프라 어디까지 구축해 봤어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인프라, 어디까지 구축해 봤어?</h3>\n<p>좋은 인프라란, 1. 장애에 강건하고, 2. 확장이 쉽고, 3. 관측이 쉽고, 4. 비용이 적게 드는 인프라다.</p>\n<p>기업 특성에 따라 클라우드와 온프레미스 서버 중 선택하기, 모니터링과 용량 문제, 데이터 복제 방안 등을 알아보자. 또 트래픽에 대응하기 위한 오토스케일링, 데이터 분리와 관련된 샤딩 기법도 알기 쉽게 설명하고 있다.</p>\n<p><strong>Ref</strong> <a href=\"https://blog.goorm.io/goormseminar_4th/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.goorm.io/goormseminar_4th/</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>환승연애 끝났다… 현규해은 영원해… 희두 나연한테 잘해라… 나언 태이는 모지…? 🙄\n이제 삶이 재미없어지겠다…</p>\n<p>장장 반년을 해왔던 스터디도 끝났다!! 마지막날은 어쩌다 책 안읽고 다같이 선정릉 산책 ㅋㅋㅋ 두런두런 이야기들 재밌었당. 스콘이랑 커피랑 선물 만들어와주신 분들도 있고. 넘 다들 좋은 사람들</p>\n<p>그리고 이태원에서 최악의 압사 사고가 있었다. 어제까진 이번주 정리에 이런 글을 쓸지 몰랐는데… 나도 처음으로 할로윈을 맞이해보고 싶었는데, 2022년 서울 한복판에서 이런 대참사가 발생하다니. 다 놀기 좋아하는 나같은 20대 청년들이었을 뿐이라 더욱 안타깝다. 뉴스로 참혹했던 순간의 장면들이 잊혀지지 않는다.</p>","timeToRead":10,"frontmatter":{"title":"10월 4주차 기록","date":"October 29, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-10-week-4/","previous":{"fields":{"slug":"/weekly/2022-11-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"November 04, 2022","description":"weekly-i-learned","title":"11월 첫주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2022-10-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 22, 2022","description":"weekly-i-learned","title":"10월 3주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-11-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"November 04, 2022","description":"weekly-i-learned","title":"11월 첫주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-10-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 22, 2022","description":"weekly-i-learned","title":"10월 3주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}