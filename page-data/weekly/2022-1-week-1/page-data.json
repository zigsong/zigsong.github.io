{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-1-week-1/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"5e1fe64f-2a06-5d41-8c93-6249c1ad4f2c","excerpt":"나름 시끌벅적한 새해의 시작 코로나 격리해제됐다. 내 세상이다. 코로나 집콕일기 firebase RealTime database 헤매기 firebase에 firestore 말고 RealTime database가 언제 생겼는지는 모르겠지만, 아무튼 생겼다고 한다. RealTime…","html":"<p>나름 시끌벅적한 새해의 시작</p>\n<!-- more -->\n<hr>\n<p>코로나 격리해제됐다. 내 세상이다.</p>\n<h2 id=\"코로나-집콕일기\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%A1%9C%EB%82%98-%EC%A7%91%EC%BD%95%EC%9D%BC%EA%B8%B0\" aria-label=\"코로나 집콕일기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코로나 집콕일기</h2>\n<h3 id=\"firebase-realtime-database-헤매기\" style=\"position:relative;\"><a href=\"#firebase-realtime-database-%ED%97%A4%EB%A7%A4%EA%B8%B0\" aria-label=\"firebase realtime database 헤매기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>firebase RealTime database 헤매기</h3>\n<p>firebase에 firestore 말고 RealTime database가 언제 생겼는지는 모르겠지만, 아무튼 생겼다고 한다.</p>\n<p>RealTime database는 여러 클라이언트에서 실시간으로 상태를 동기화해야 하는 모바일 앱을 위한 효율적이고 지연 시간이 짧은 솔루션이다. 하지만 경험해보니 그렇게 유용한지는 모르겠다. 사용 방법도 솔직히 불편하다.</p>\n<p><a href=\"https://firebase.google.com/docs/firestore/rtdb-vs-firestore?hl=ko\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기</a>에서 서비스의 특성에 맞게 firestore와 RealTime database 중에서 추천해준다고 하는데, 뭘 하든 그냥 RealTime database를 쓰라는 것 같다 😑</p>\n<img src=\"01.png\" />\n<p>더군다나 react query와 함께 사용하려니 정말 <del>거지같았다!</del></p>\n<p>그래도 여차저차 <a href=\"https://aggelosarvanitakis.medium.com/a-real-time-hook-with-firebase-react-query-f7eb537d5145\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">포스팅</a>을 참고해서 <code class=\"language-text\">realTimeApi</code> 클래스를 만들어보았다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealTimeApi</span> <span class=\"token punctuation\">{</span>\n  #firebase<span class=\"token operator\">:</span> FirebaseApp<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#firebase <span class=\"token operator\">=</span> <span class=\"token function\">initializeApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token generic-function\"><span class=\"token function\">fetch</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> reference <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">onValue</span><span class=\"token punctuation\">(</span>reference<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firebase get error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> valueof<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> <span class=\"token constant\">API_PATH</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> postBody<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> newPostKey <span class=\"token operator\">=</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">child</span><span class=\"token punctuation\">(</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> updates<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        updates<span class=\"token punctuation\">[</span>path <span class=\"token operator\">+</span> newPostKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> newPostKey<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>postBody <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> updates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firebase post error: \"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealTimeApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>react query hook에서 사용은 아래와 같이 하고 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchTalks</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> realTimeApi<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">fetch</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>TalkContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API_PATH</span><span class=\"token punctuation\">.</span>talk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useLoadTalks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> UseQueryOptions<span class=\"token operator\">&lt;</span>TalkContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> AxiosError<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">useQuery</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>TalkContent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> AxiosError<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"confirmedData\"</span><span class=\"token punctuation\">,</span>\n    fetchTalks<span class=\"token punctuation\">,</span>\n    options\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>타이핑이 아직 살짝 부족하다. 그래도 타입스크립트의 매력을 조금씩 더 알아가고 있다.</p>\n<p>어쨌든, ‘이야기’ 탭의 글 작성과 불러오기에 성공했다. <del>어김없이 어거지 코딩이 조금씩 늘어나고 있긴 하지만</del></p>\n<img src=\"02.gif\">\n<p>화면 하단 노란 에러는 흐린눈 할거다.</p>\n<h3 id=\"javascript의-date\" style=\"position:relative;\"><a href=\"#javascript%EC%9D%98-date\" aria-label=\"javascript의 date permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript의 Date</h3>\n<p>아직도 헤매면서 사용하고 있었다니! 정말 바보잖아.</p>\n<p><code class=\"language-text\">Date.now()</code>와 <code class=\"language-text\">new Date()</code> 모두 현재 시점의 DateTime을 제공하지만, <code class=\"language-text\">Date.now()</code>는 <code class=\"language-text\">number</code> 타입의 timestamp를 반환하고, <code class=\"language-text\">new Date()</code>는 <code class=\"language-text\">Date</code> 객체를 반환한다. (엄밀히 말하면 타입은 그냥 ’object’지만, <code class=\"language-text\">Date</code> 객체를 따른다.)</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Sat Jan 08 2022 23:52:00 GMT+0900 (한국 표준시)</span>\nDate<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1641653520000</span></code></pre></div>\n<p><code class=\"language-text\">new Date()</code>로 생성한 <code class=\"language-text\">Date</code> 객체에서 <code class=\"language-text\">getTime()</code> 메서드를 호출하면 <code class=\"language-text\">Date.now()</code>와 같은 <code class=\"language-text\">number</code> 타입의 timestamp를 얻을 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndate<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1641653520000</span></code></pre></div>\n<p><strong>Ref</strong>\n<a href=\"https://ko.javascript.info/date\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.javascript.info/date</a></p>\n<hr>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<h3 id=\"dan-abramov---a-hundred-things-i-learned-working-on-the-react-team\" style=\"position:relative;\"><a href=\"#dan-abramov---a-hundred-things-i-learned-working-on-the-react-team\" aria-label=\"dan abramov   a hundred things i learned working on the react team permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dan abramov - a hundred things i learned working on the react team</h3>\n<ol>\n<li>매년 사용자는 바뀌고, 새로운 사용자는 과거의 문제를 이해하지 못한다. 이전 사용자는 흥미를 잃는다. 새로운 사용자는 다른 시각을 갖고 있다. 그에 맞춰 계획해야 한다.</li>\n<li>문제를 고칠 때 문제를 우선 파악하는 것이 중요하다. 잘못된 문제 해결은 10가지의 새로운 문제를 낳는다.</li>\n<li>대부분의 PR은 해결되기보다 더 많은 일을 낳는다. 코딩 자체보다는 결정을 내리는 데 무수한 시간이 들어가기 때문이다.</li>\n<li>라이브러리의 PR description은 훌륭해야 한다. 몇 년 후 누군가가 버그를 발견하거나 변경을 할 때 매우 고마워할 것이다.</li>\n<li>몇몇 트롤이 전체 토론장을 망칠 수 있다.</li>\n<li>내부 실행 모듈에 유닛 테스트 대신 public API에 대한 테스트를 작성해라. 그러면 테스트를 이용하여 실행 코드를 얼마든지 다시 작성할 수 있다.</li>\n<li>오래가는 브랜치는 썩는다. 죽은 코드를 제거하거나 배포 환경에서 feature flag changes를 배포할 수 있는 좋은 flag 메커니즘을 고안하자.</li>\n<li>측정에 빨간불이 켜졌다면, 느려진 것이다. 그러나 다른 동작을 깨뜨리는 버그를 만들었거나, 측정이 로깅되는 방식이 바뀌었을 수도 있다. 측정은 어렵다.</li>\n<li>사람들은 유명한 프로젝트에 PR을 올려 github을 꾸미고 싶어한다. 누군가는 이를 convert하고, 또 다른 누군가는 다시 convert한다. 스타일에서의 단순한 실수를 발견할 때까지는 merge되지 않을 것이다.</li>\n<li>뭔가 고쳤다면, 실패하는 테스트를 만들어라. 그렇게 하지 않으면 누군가는 이를 다시 망가뜨려놓을 것이다.</li>\n</ol>\n<p>…제목의 ‘a hundred’를 주의했어야 했다. 진짜 백 개라니. 포기 🤮</p>\n<p><strong>Ref</strong> <a href=\"https://threadreaderapp.com/thread/1470613731071696896.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://threadreaderapp.com/thread/1470613731071696896.html</a></p>\n<h3 id=\"하버드-cs50-새로운-버전\" style=\"position:relative;\"><a href=\"#%ED%95%98%EB%B2%84%EB%93%9C-cs50-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B2%84%EC%A0%84\" aria-label=\"하버드 cs50 새로운 버전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하버드 CS50 새로운 버전</h3>\n<p><strong>Ref</strong> <a href=\"https://www.youtube.com/playlist?list=PLhQjrBD2T383f9scHRNYJkior2VvYjpSL\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/playlist?list=PLhQjrBD2T383f9scHRNYJkior2VvYjpSL</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>코로나 격리해제됐다. 나름 잘 놀고 오고, 빡빡하게 친구들도 많이 만났다.\n그리고 내일모레면 이제 다시 수술실과 입원실로(…) 들어간다. 이건 예상에 있던 거니까 딱히 우울하진 않다. 입원하는 동안 조용히 할 것들이 많아서 설레기까지 한다(?)</p>\n<p>우테코에서 우형으로 크루들 중 절반 정도가 이번주에 입사했다. 톡방이 매일같이 시끌시끌하더니, 금요일 저녁부터 조용해졌다. 벌써 지친게야 🤦‍♀️ 조잘조잘 말하는 내용들을 조금씩 주워담으며 입사 마음가짐을 해본다.</p>\n<p><del>졸업한 주제에</del> 학교 포털에서 여전히 SNUON 강의를 들을 수 있어서, 작년 1월에 절반쯤 듣다 우테코가 너무 빡세 포기했던 컴퓨터구조 강의를 다시 듣고 있다. CS에서 네트워크가 제일 중요하다고는 들었는데, 살짝 찍먹했던 컴퓨터구조 수업도 나름 흥미로웠다. 이때 아니면 언제 공부해보겠어.</p>\n<p>아이패드 에어를 구매했다. 신학기 프로모션 열린 당일에 후닥 구매해서 애플스토어까지 가서 직접 픽업했다. 케이스는 맘에 드는 게 하나도 없지만 그래도 적당히 괜찮다 ㅎㅎ 열심히 공부해야지. 좋은 인연이었던 아이디어스에서 드로잉 클래스 수강권도 구매했다!</p>","timeToRead":4,"frontmatter":{"title":"1월 첫주차 기록","date":"January 08, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-1-week-1/","previous":{"fields":{"slug":"/effective-typescript/effective-typescript-7/","langKey":"en","directoryName":"effective-typescript"},"frontmatter":{"date":"January 15, 2022","description":null,"title":"이펙티브 타입스크립트 7장","tags":["effective-typescript"]}},"next":{"fields":{"slug":"/effective-typescript/effective-typescript-6/","langKey":"en","directoryName":"effective-typescript"},"frontmatter":{"date":"January 06, 2022","description":null,"title":"이펙티브 타입스크립트 6장","tags":["effective-typescript"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2022-1-week-2-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 20, 2022","description":"weekly-i-learned","title":"1월 2~3주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2021-12-week-4-5/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"December 30, 2021","description":"weekly-i-learned","title":"12월 4~5주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}