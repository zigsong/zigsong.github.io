{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2023-2-week-3/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"3a8d8700-5c05-5dfb-9531-6749a77aa32c","excerpt":"수요일 꿀휴가 배워가기 IP 주소로 aws 리소스 찾는법 AWS 콘솔에 접속한다. EC2 콘솔에 접속한다. Network Interfaces(네트워크 인터페이스) 탭으로 접속한다. 검색상자에서 Primary private IPv4 address(기본 프라이빗 IPv…","html":"<p>수요일 꿀휴가</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"ip-주소로-aws-리소스-찾는법\" style=\"position:relative;\"><a href=\"#ip-%EC%A3%BC%EC%86%8C%EB%A1%9C-aws-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%B0%BE%EB%8A%94%EB%B2%95\" aria-label=\"ip 주소로 aws 리소스 찾는법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IP 주소로 aws 리소스 찾는법</h3>\n<ol>\n<li>AWS 콘솔에 접속한다.</li>\n<li>EC2 콘솔에 접속한다.</li>\n<li>Network Interfaces(네트워크 인터페이스) 탭으로 접속한다.</li>\n<li>검색상자에서 Primary private IPv4 address(기본 프라이빗 IPv4 주소)를 선택(찾으려는 IP 주소에 따라 public을 검색해도 된다.)</li>\n<li>검색상자에서 IP 주소를 입력해서 찾자.</li>\n</ol>\n<h3 id=\"viteraw\" style=\"position:relative;\"><a href=\"#viteraw\" aria-label=\"viteraw permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vite <code class=\"language-text\">?raw</code></h3>\n<p>vite에서 이미지, 미디어, 폰트 파일 타입 이외의 asset을 import하려면 <code class=\"language-text\">[assetsInclude](https://vitejs-kr.github.io/config/shared-options.html#assetsinclude)</code> 설정이 필요하다.</p>\n<p><code class=\"language-text\">assetsInclude</code> 없어도 가능한 방법이 있는데, 바로 접미사를 이용해 URL로 에셋을 가져오는 것이다.</p>\n<p><code class=\"language-text\">?raw</code> 도 그중 하나의 접미사인데, 이 접미사로 import하는 애셋은 문자열로 취급한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> shaderString <span class=\"token keyword\">from</span> <span class=\"token string\">\"./shader.glsl?raw\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"타입스크립트-satisfy-operator\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-satisfy-operator\" aria-label=\"타입스크립트 satisfy operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 satisfy operator</h3>\n<p>기존에는, 표현식이 특정 타입과 매칭되는지 체크하는 것과 표현식의 추론 타입에서 가장 구체적인 타입을 정상적으로 추론하는 것이 상충됐다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Colors</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"green\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">RGB</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>red<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> green<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> blue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> palette<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span>Colors<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token constant\">RGB</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  red<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  green<span class=\"token operator\">:</span> <span class=\"token string\">\"#00ff00\"</span><span class=\"token punctuation\">,</span>\n  bleu<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ✅ 'blue'를 'bleu'라고 잘못 적은 typo는 잡힌다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 🚨 Property 'at' does not exist on type 'string | RGB'.</span>\n<span class=\"token keyword\">const</span> redComponent <span class=\"token operator\">=</span> palette<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>객체의 키를 <code class=\"language-text\">Colors</code> 타입으로 한정했기 때문에, <code class=\"language-text\">palette</code> 객체에 잘못 작성한 <code class=\"language-text\">'blue'</code> typo의 오타는 잡힌다.</p>\n<p>그러나 <code class=\"language-text\">palette.red</code>의 타입이 <code class=\"language-text\">number[]</code>가 아닌 <code class=\"language-text\">string</code>이 될 수 있어서, <code class=\"language-text\">at()</code> 메서드에서 타입 에러가 난다.</p>\n<p>타입스크립트 4.9에 추가된 <code class=\"language-text\">satisfies</code> 연산자는 표현식의 결과 타입을 바꾸지 않으면서, 표현식의 타입이 특정한 타입과 매칭되는지 검증한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Colors</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"green\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">RGB</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>red<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> green<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> blue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> palette <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  red<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  green<span class=\"token operator\">:</span> <span class=\"token string\">\"#00ff00\"</span><span class=\"token punctuation\">,</span>\n  bleu<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ✅ 'blue'를 'bleu'라고 잘못 적은 typo는 잡힌다.</span>\n<span class=\"token punctuation\">}</span> satisfies Record<span class=\"token operator\">&lt;</span>Colors<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token constant\">RGB</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ✅ 이제 에러가 나지 않는다!</span>\n<span class=\"token keyword\">const</span> redComponent <span class=\"token operator\">=</span> palette<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> greenNormalized <span class=\"token operator\">=</span> palette<span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">satisfies</code> 연산자를 통해 <code class=\"language-text\">palette</code>의 모든 프로퍼티가 <code class=\"language-text\">string | number[]</code>와 호환될 수 있음을 보장한다.</p>\n<p><strong>Ref</strong> <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-9.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-9.html</a></p>\n<h2 id=\"vanilla-extract의-sprinkles\" style=\"position:relative;\"><a href=\"#vanilla-extract%EC%9D%98-sprinkles\" aria-label=\"vanilla extract의 sprinkles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vanilla-extract의 Sprinkles</h2>\n<p>vanilla-extract는 ‘바닐라 추출액’으로 식재료를 가리키긴 하는데… 😖 자바스크립트 세계에서는 <a href=\"https://vanilla-extract.style/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vanilla-extract</a>라는, 타입스크립트로 작성된 제로-런타임 스타일시트를 가리킨다.</p>\n<p>vanilla-extract의 Sprinkles는 제로-런타임 아토믹 CSS 프레임워크로, 커스텀 유틸리티 클래스들을 만들고 빌드타임이나 런타임에 이들을 조합해서 사용할 수 있다.</p>\n<p><code class=\"language-text\">sprinkles.css.ts</code> 파일을 만들고, <code class=\"language-text\">sprinkles</code> 함수를 설정하고 export한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// sprinkles.css.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineProperties<span class=\"token punctuation\">,</span> createSprinkles <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vanilla-extract/sprinkles\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> responsiveProperties <span class=\"token operator\">=</span> <span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  conditions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    mobile<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    tablet<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"@media\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"screen and (min-width: 768px)\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    desktop<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"@media\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"screen and (min-width: 1024px)\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  defaultCondition<span class=\"token operator\">:</span> <span class=\"token string\">\"mobile\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"blue-50\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#eff6ff\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"blue-100\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#dbeafe\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"blue-200\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#bfdbfe\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> colorProperties <span class=\"token operator\">=</span> <span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  conditions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    lightMode<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    darkMode<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"@media\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(prefers-color-scheme: dark)\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  defaultCondition<span class=\"token operator\">:</span> <span class=\"token string\">\"lightMode\"</span><span class=\"token punctuation\">,</span>\n  properties<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">:</span> colors<span class=\"token punctuation\">,</span>\n    background<span class=\"token operator\">:</span> colors<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// etc.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> sprinkles <span class=\"token operator\">=</span> <span class=\"token function\">createSprinkles</span><span class=\"token punctuation\">(</span>responsiveProperties<span class=\"token punctuation\">,</span> colorProperties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://vanilla-extract.style/documentation/sprinkles-api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://vanilla-extract.style/documentation/sprinkles-api/</a></p>\n<h3 id=\"reactsuspense의-비밀\" style=\"position:relative;\"><a href=\"#reactsuspense%EC%9D%98-%EB%B9%84%EB%B0%80\" aria-label=\"reactsuspense의 비밀 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React.suspense의 비밀</h3>\n<p>React.suspense는 Promise가 발생하면 자식의 스타일을 <code class=\"language-text\">display: none</code>으로 바꾼다. Promise가 resolve 되면 <code class=\"language-text\">display: none</code> 속성은 삭제된다.</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/facebook/react/issues/14536\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/facebook/react/issues/14536</a></p>\n<h3 id=\"useeffect의-clean-up\" style=\"position:relative;\"><a href=\"#useeffect%EC%9D%98-clean-up\" aria-label=\"useeffect의 clean up permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useEffect의 clean up</h3>\n<p>React useEffect의 clean up 함수는 useEffect가 실행되고, 다음 실행되기 전에 다시 실행된다.</p>\n<ul>\n<li>의존 배열이 없을땐 마운트 해제될 때 실행된다.</li>\n<li>의존 배열이 있다면 의존 배열이 변경될 때 실행된다.</li>\n</ul>\n<h3 id=\"react-hook-form\" style=\"position:relative;\"><a href=\"#react-hook-form\" aria-label=\"react hook form permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-hook-form</h3>\n<ul>\n<li>dynamic field를 만들 때에는 <code class=\"language-text\">useFieldArray</code>를 쓸 수 있다.</li>\n<li>fieldArray는 객체의 배열 형태로 된 필드만 만들 수 있다.\n<ul>\n<li><code class=\"language-text\">string[]</code>은 안 되고, <code class=\"language-text\">{ id: string }[]</code>은 가능하다. 말 그대로 필드의 배열이기 때문에 각각이 필드여야 한다.</li>\n</ul>\n</li>\n<li>fieldArray와 controller를 함께 사용할 때는 fieldArray의 대상이 되는 필드, 몇 번째 input인지를 나타내는 index, 내부 속성까지 prop의 name으로 전달해야 제대로 값을 컨트롤할 수 있다.\n<ul>\n<li>위 케이스의 경우 <code class=\"language-text\">~field.${index}.id</code>를 <code class=\"language-text\">useController</code> hook의 name prop으로 전달한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"module-federation에서-chunk-파일\" style=\"position:relative;\"><a href=\"#module-federation%EC%97%90%EC%84%9C-chunk-%ED%8C%8C%EC%9D%BC\" aria-label=\"module federation에서 chunk 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>module federation에서 chunk 파일</h3>\n<p>module federation을 사용해서 여러 remote app을 불러올 때, 각 자바스크립트 chunk 파일의 이름은 다를 수 있지만, id는 동일할 수 있다.</p>\n<p>만약 동일한 id의 chunk를 호출하면 위에서 chunkId를 불러온 기록이 남겨져서 호출에 실패할수도 있다. 따라서 chunk 파일의 이름이 다르다고 안심하지 말고 id가 같다면 optimize 내용을 바꿔 빌드하거나, chunkId 길이를 바꿔서 id를 서로 다르게 해줘야 한다.</p>\n<h3 id=\"onblur--onclick\" style=\"position:relative;\"><a href=\"#onblur--onclick\" aria-label=\"onblur  onclick permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">onBlur</code> → <code class=\"language-text\">onClick</code></h3>\n<ul>\n<li><code class=\"language-text\">onBlur</code> 이벤트가 <code class=\"language-text\">onClick</code>보다 이벤트 우선순위가 높다</li>\n<li><code class=\"language-text\">onMouseDown</code> 이벤트는 <code class=\"language-text\">onBlur</code> 이벤트보다 이벤트 우선순위가 높다</li>\n</ul>\n<p>따라서 <code class=\"language-text\">onClick</code> 핸들러를 <code class=\"language-text\">onBlur</code> 보다 먼저 사용하고 싶다면, <code class=\"language-text\">onMouseDown</code>을 사용한다.</p>\n<p>자바스크립트 모든 이벤트의 순서를 알고 싶었는데, 못 찾겠다 😵‍💫</p>\n<p><strong>Ref</strong> <a href=\"https://velog.io/@broccoliindb/onBlur-on-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@broccoliindb/onBlur-on-react</a></p>\n<h3 id=\"new-axios-vs-axioscreate\" style=\"position:relative;\"><a href=\"#new-axios-vs-axioscreate\" aria-label=\"new axios vs axioscreate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">new Axios()</code> vs <code class=\"language-text\">axios.create()</code></h3>\n<p><code class=\"language-text\">new Axios()</code> 로 axios 인스턴스를 생성하면, 배열이나 객체 등의 데이터가 <code class=\"language-text\">JSON.stringify()</code> 된 형식의 string으로 내려오는 경우가 있다. 🥲</p>\n<p>대신 <code class=\"language-text\">axios.create()</code> 로 axios 인스턴스를 생성하면 똑바로 내려온다.</p>\n<p>이유는… <a href=\"https://github.com/axios/axios/blob/v1.x/lib/defaults/index.js#L106\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axios 깃헙 코드</a>에서 찾을 수 있다.</p>\n<p><code class=\"language-text\">new Axios()</code>를 호출하면 <code class=\"language-text\">transformResponse()</code>의 설정 기본값이 없기 때문에 문자열 응답을 그냥 내려준다.\n하지만 <code class=\"language-text\">axios.create()</code>는 내부적으로 <a href=\"https://github.com/axios/axios/blob/v1.x/lib/axios.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axios.createInstance()</a> 함수를 호출하여 기본 설정을 넣어주기 때문에 응답이 정상적으로 JSON 형태로 반환된다.</p>\n<h3 id=\"react-query의-suspense-옵션\" style=\"position:relative;\"><a href=\"#react-query%EC%9D%98-suspense-%EC%98%B5%EC%85%98\" aria-label=\"react query의 suspense 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query의 <code class=\"language-text\">suspense</code> 옵션</h3>\n<p>을 true로 켜두니 리액트 컴포넌트의 state를 deps로 받는 dependent query를 실행할 때 자꾸 이전 state 값으로 쿼리를 보내는 문제가 발생했다.</p>\n<p>suspense를 켜놓기만 하고 fallback을 제공하는 <code class=\"language-text\">&lt;Suspense /></code> 컴포넌트로 감싸지 않아서 버그가 난 듯… 싶었지만?</p>\n<p>리액트 컴포넌트의 setState가 바라보고 있는 state는 최초 mount된 컴포넌트의 state이고, 우리가 변경하고자 하는 state는 API call이 성공한 후 다시 re-mount된 컴포넌트의 state이기 때문에, 이전 state의 값으로 api call을 하고 있었기 때문이다.</p>\n<p>suspense를 유지하면서 이 문제를 해결하려면 어떻게 해야할까? 다음 링크로 알아보자 🤗</p>\n<p><strong>Ref</strong> <a href=\"https://sangminnn.tistory.com/76\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sangminnn.tistory.com/76</a></p>\n<h3 id=\"nextjs에서-router-query-id가-처음에-undefined인-이유\" style=\"position:relative;\"><a href=\"#nextjs%EC%97%90%EC%84%9C-router-query-id%EA%B0%80-%EC%B2%98%EC%9D%8C%EC%97%90-undefined%EC%9D%B8-%EC%9D%B4%EC%9C%A0\" aria-label=\"nextjs에서 router query id가 처음에 undefined인 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js에서 router query id가 처음에 undefined인 이유</h3>\n<p>정적 파일 최적화(Automatic Static Optimization)에 의해 정적으로 최적화된 페이지는 루트 매개 변수가 제공되지 않아서, query가 빈 객체가 된다</p>\n<p>Next ver.10부터는 <code class=\"language-text\">router.isReady</code> 를 사용해서 router 필드가 클라이언트 측에서 업데이트되고 사용할 준비가 되었는지 여부를 체크할 수 있다.</p>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>Web Proxy 툴 <a href=\"https://www.charlesproxy.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Charles</a>와 <a href=\"https://proxyman.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Proxyman</a> 이라는 Web Proxy 툴이 있다.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">isFinite()</a> - parameter로 전달받은 값이 유한한 숫자인지를 판별헤주는 내장 메서드</li>\n<li><a href=\"https://astro.build/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">astro</a>에서는 vue,svelte,react 모두 사용가능하다.</li>\n<li>typescript website는 <a href=\"https://www.typescriptlang.org/dev/twoslash/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TwoSlash</a>를 사용해서 코드예시에서 타입을 나타내준다.</li>\n<li>CSS에서 <code class=\"language-text\">:root</code> 의사 클래스를 사용해서 전역 root tag를 명시적으로 선택할 수 있다. (html의 <code class=\"language-text\">{}</code>과 기능적으로 동일하다.)</li>\n<li><a href=\"https://storybook.js.org/blog/improved-type-safety-in-storybook-7/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Storybook7</a>은 전반적으로 타입 안정성이 개선되었다. 특히 <code class=\"language-text\">satisfies</code> 를 사용하면 required prop이 빠졌을 때 에러를 표시해주는 것은 유용해 보인다.</li>\n<li>bash shell <code class=\"language-text\">-</code>\n<ul>\n<li>쉘에서 커맨드 라인이 종료되고 이 다음부턴 인수가 나오는 걸 명시할 때 사용한다.</li>\n<li>ex) <code class=\"language-text\">npm run swizzle @docusaurus/theme-classic Footer -- --eject</code></li>\n</ul>\n</li>\n<li>vite에서는 <code class=\"language-text\">import.meta.env</code> 로 환경변수에 접근할 수 있다.</li>\n<li>vscode files association - 다음과 같이 vscode의 settings.json 에서 설정하면 myformat 확장자를 json처럼 인식한다.\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"files.associations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.myformat\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">.d.ts</code> 파일에서 import나 export를 하면 다른 파일에서  <code class=\"language-text\">.d.ts</code> 파일에서 선언된 전역 타입에 자동으로 접근할 수 없게 된다.</li>\n<li><code class=\"language-text\">.md</code>에 <code class=\"language-text\">[[_TOC_]]</code> 를 쓰면 목차가 튀어나온다. Gitlab 전용 문법이고, 일부 목차를 제외하는 기능은 아직 없다. 누군가 깃랩에 <a href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/22161\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">건의</a>했으나 4년째 묵혀있다.</li>\n<li>vite가 dev모드로 실행중일 때 vite는 서버 역할을 하고 <code class=\"language-text\">index.html</code> 파일은 application의 entry point가 된다.</li>\n<li>webpack은 자바스크립트의 파일 내용들을 module로 분해해서 관련 있는 module끼리 모아 chunk로 분리한다. 이때 module은 moduleId로, chunk는 chunkId로 구분하며, 이는 각 3~5자리의 숫자이다. (ex. 70518)</li>\n<li>chunkId는 한번 불러오고나면 전역에 불러왔다고 기록을 남겨서 여러번 불러오는 경우를 막는다. 불러오지 않았다면 script tag로 해당 chunk js 파일을 불러온다.</li>\n<li><code class=\"language-text\">width: fit-content</code> 속성으로 flex component의 자식의 크기를 딱 맞게 지정할 수 있다.</li>\n<li>elastic search - 분산 검색 엔진으로, 확장성과 유연성이 뛰어나다. (<a href=\"https://d2.naver.com/helloworld/273788\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>querySelector는 live한 DOM을 잡아주지만, querySelectorAll은 static DOM을 잡는다. 여러 개의 live한 DOM을 잡으려면 <code class=\"language-text\">getElementsByTagName</code> 을 사용한다. 왜 이렇게 헷갈리게 뒤죽박죽 해놨어! 🤯 (<a href=\"https://stackoverflow.com/questions/51302039/queryselector-return-static-node-list-or-live-node-list\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>Sentry N+1 Calls - 동시적으로 같은 URL에 네트워크 요청을 많이 보낼 때 발생하는 성능상의 문제로, 하나의 요청을 list item 모두에 대해서 보낼 때 발생한다. (<a href=\"https://docs.sentry.io/product/issues/issue-details/performance-issues/n-one-api-calls/?utm_campaign=home_page_link&#x26;utm_source=stanislavstankov.com&#x26;utm_medium=website&#x26;utm_id=ss_home_page_link\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>typeorm <code class=\"language-text\">upsert()</code> - <code class=\"language-text\">ON CONFLICT DO UPDATE</code> 쿼리를 대신하는 함수로, 이미 존재하지 ‘않는’ 경우에만 새 엔티티를 삽입해준다. 짱! 👍</li>\n</ul>\n<hr>\n<h2 id=\"기타공유\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80%EA%B3%B5%EC%9C%A0\" aria-label=\"기타공유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타공유</h2>\n<h3 id=\"노션-ai\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EC%85%98-ai\" aria-label=\"노션 ai permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>노션 AI</h3>\n<p>구글의 ChatGPT, MS의 Bing을 잇는 AI의 붐… 노션AI가 발빠르게 탄생해버렸다.</p>\n<p>원하는 주제로 입력하면, 글을 대신 써준다. 아이디어 브레인스토밍도 같이 해주고, 메일도 대신 써준다. 꽤나 재밌어 보인다. 알파 버전을 사용해보기 위해 웨이팅리스트에 넣고 기다려야 한다.</p>\n<p>근데 이렇게 기계가 글 다 써주면 인간은 이제 모하나 🤷‍♀️</p>\n<p><strong>Ref</strong> <a href=\"https://www.notion.so/product/ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/product/ai</a></p>\n<h3 id=\"core-js-개발자의-이야기\" style=\"position:relative;\"><a href=\"#core-js-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%9D%B4%EC%95%BC%EA%B8%B0\" aria-label=\"core js 개발자의 이야기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>core-js 개발자의 이야기…</h3>\n<p>전 세계 많은 웹사이트들에서, 그리고 나도 사용하는 core-js가 한 사람에 의해 시작된 오픈소스 라이브러리였다니 믿기지 않는다. 그리고 이 메인테이너가 큰 사고를 당하며 잠시 사라졌던 이야기, 돈이 되지 않는 오픈소스를 붙들고 온갖 미친 사람들한테 욕을 먹어가며 금전적으로 어려움을 겪어왔던 이야기들을 읽으며 충격을 받았다.</p>\n<p>그의 말대로, 요즘 인터넷 세상을 장악한 온갖 대단한 사이트들이 core-js에 지탱하고 있는데, 아직도 고쳐야 할 코드들이 산더미인데 아무런 펀딩 없이 이렇게 진행되어왔다니 놀랍고 안타까울 따름이다… ‘익숙함에 속아 소중함을 잃지 말자’라는 말이 떠오른다. core-js가 무너지지 않았으면, 그리고 그가 그의 가족을 지킬 수 있었으면 좋겠다.</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/zloirock/core-js/blob/master/docs/2023-02-14-so-whats-next.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/zloirock/core-js/blob/master/docs/2023-02-14-so-whats-next.md</a></p>\n<h3 id=\"구글에서-만든-wireit\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EA%B8%80%EC%97%90%EC%84%9C-%EB%A7%8C%EB%93%A0-wireit\" aria-label=\"구글에서 만든 wireit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구글에서 만든 wireit</h3>\n<p>어떻게 읽는..? 처음에 ‘와이렛’ -> ‘와이래’ -> ‘와이라노…’라고 생각했다.</p>\n<p>npm 스크립트를 더 똑똑하고 효율적으로 업그레이드 시켜주는 툴이라고 한다.</p>\n<p>머하는 앤진 잘 모르겠다.</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/google/wireit?fbclid=IwAR030-MC7NYE5oS6MuNxX412aGbJztWMG_96LtY0b4ifHUpj0Byt_Dcdts4&#x26;mibextid=S66gvF\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/google/wireit?fbclid=IwAR030-MC7NYE5oS6MuNxX412aGbJztWMG_96LtY0b4ifHUpj0Byt_Dcdts4&#x26;mibextid=S66gvF</a></p>\n<h3 id=\"webcontainers\" style=\"position:relative;\"><a href=\"#webcontainers\" aria-label=\"webcontainers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webcontainers</h3>\n<p>Node.js를 브라우저에서 실행하게 해주는 런타임이다. 익숙한 단어들의 조합이지만 오… 좀 혁신적인 것 같다.</p>\n<p>사용자 코드를 실행하기 위해 가상머신(VM)을 사용했던 앱들은 이제 WebContainer를 사용해서 클라이언트에서 돌릴 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> WebContainer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@webcontainer/api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Call only once</span>\n<span class=\"token keyword\">const</span> webcontainerInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> WebContainer<span class=\"token punctuation\">.</span><span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>요렇게… 인스턴스를 만들어서 실행시키나 보다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">webcontainerInstance<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server-ready\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">port<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>iframeEl<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>😲😲😲</p>\n<p><strong>Ref</strong> <a href=\"https://webcontainers.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://webcontainers.io/</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>수요일에 휴가를 써서 그런가, 일주일이 더 빨리 사라졌다. 평일 동안에 잠을 많이 잔 건지, 주말에 뻗어서 꿀낮잠을 오래오래 자버리고 말았다. 그래도 늦은 밤 잠이 또 온다 🥱</p>\n<p>시간은 잘만 흐르고, 호주 갈 날이 점점 다가오고 있다… 기대 반 걱정 반 🙃</p>","timeToRead":11,"frontmatter":{"title":"2월 3주차 기록","date":"February 18, 2023","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2023-2-week-3/","previous":{"fields":{"slug":"/etc/chrome-extension/","langKey":"en","directoryName":"etc"},"frontmatter":{"date":"February 20, 2023","description":null,"title":"크롬 익스텐션 개발기","tags":["extension"]}},"next":{"fields":{"slug":"/weekly/2023-2-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"February 11, 2023","description":"weekly-i-learned","title":"2월 2주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2023-2-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"February 24, 2023","description":"weekly-i-learned","title":"2월 4주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2023-2-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"February 11, 2023","description":"weekly-i-learned","title":"2월 2주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}