{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2024-5-week-1/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"b5cc1cd7-62bb-519a-a139-fc271f609725","excerpt":"배워가기 package.json의  패키지가 특정 패키지 매니저를 사용해야 할 경우 특정 패키지와 버전을 지정할 수 있는 필드로, 아래와 같이 작성한다. Ref https://beomy.github.io/tech/etc/package-json/#packagemanager-node…","html":"<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<hr>\n<h3 id=\"packagejson의-packagemanager\" style=\"position:relative;\"><a href=\"#packagejson%EC%9D%98-packagemanager\" aria-label=\"packagejson의 packagemanager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json의 <code class=\"language-text\">packageManager</code></h3>\n<p>패키지가 특정 패키지 매니저를 사용해야 할 경우 특정 패키지와 버전을 지정할 수 있는 필드로, 아래와 같이 작성한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"packageManager\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn@3.2.4\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://beomy.github.io/tech/etc/package-json/#packagemanager-node\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://beomy.github.io/tech/etc/package-json/#packagemanager-node</a></p>\n<h3 id=\"mobx-state-tree\" style=\"position:relative;\"><a href=\"#mobx-state-tree\" aria-label=\"mobx state tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MobX-State-Tree</h3>\n<p>MobX boilerplate 없이 반응형 상태 관리를 제공한다.</p>\n<p>MobX는 상태 관리 ‘엔진’으로 사용되고, MobX-State-Tree는 거기에 더해 앱에 필요한 설계와 도구들을 제공한다. 작은 앱의 사이즈에서 빠른 속도로 확장할 때 유용하다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> types<span class=\"token punctuation\">,</span> onSnapshot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-state-tree\"</span>\n\n<span class=\"token keyword\">const</span> Tweet <span class=\"token operator\">=</span> types\n  <span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tweet\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    body<span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    read<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">actions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tweet<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      tweet<span class=\"token punctuation\">.</span>read <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>tweet<span class=\"token punctuation\">.</span>read\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> TwitterStore <span class=\"token operator\">=</span> types<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TwitterStore\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  tweets<span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span>Tweet<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> twitterStore <span class=\"token operator\">=</span> TwitterStore<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tweets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      body<span class=\"token operator\">:</span> <span class=\"token string\">\"Anyone tried MST?\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">onSnapshot</span><span class=\"token punctuation\">(</span>twitterStore<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ntwitterStore<span class=\"token punctuation\">.</span>tweets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>모양새를 보니 recoil 같은 느낌도 들고(안 써봄 ㅎㅎ), reactive한 상태관리를 제공한다니 신기하다!</p>\n<p><strong>Ref</strong> <a href=\"https://mobx-state-tree.js.org/intro/welcome\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mobx-state-tree.js.org/intro/welcome</a></p>\n<h3 id=\"자바스크립트-regexp\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-regexp\" aria-label=\"자바스크립트 regexp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 RegExp</h3>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mom'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dad'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">RegExp</code> 생성자에 객체를 넘겨주면 정규 표현식 <code class=\"language-text\">/[object Object]/</code>이 생성된다.\n그렇기 때문에 <code class=\"language-text\">new RegExp({}).test(str)</code>은 <code class=\"language-text\">/[object Object]/.test(str)</code>로 평가된다.\n따라서 <code class=\"language-text\">test('mom')</code>은 true를, <code class=\"language-text\">test('dad')</code> 는 false를 반환한다.</p>\n<p>(<code class=\"language-text\">object</code>와 <code class=\"language-text\">mom</code>의 스펠링이 겹쳐서 true가 나온다는 뜻이었다…)</p>\n<h3 id=\"ffmpeg\" style=\"position:relative;\"><a href=\"#ffmpeg\" aria-label=\"ffmpeg permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ffmpeg</h3>\n<p>ffmpeg는 널리 사용되는 미디어 포맷 변환 도구 중 하나다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> ffmpeg</code></pre></div>\n<p>예를 들어 jfif 이미지를 jpg로 변환한다면, <code class=\"language-text\">ffmpeg -i input.jfif output.jpg</code> 와 실행할 수 있다.</p>\n<h3 id=\"rhf의-get\" style=\"position:relative;\"><a href=\"#rhf%EC%9D%98-get\" aria-label=\"rhf의 get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RHF의 <code class=\"language-text\">get</code></h3>\n<p>react-hook-form에는 공식문서에는 없는 get 이라는 함수가 있다.\n이는 RHF key를 기반으로 에러 객체를 찾아내는대 용이하다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useForm<span class=\"token punctuation\">,</span> get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-hook-form'</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> formState <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> nestedError <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>formState<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> <span class=\"token string\">'nested.name'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>하지만, 공식적으로 지원하는 함수는 아니어서 필요하다면 lodash의 get을 사용하는것을 권장한다고..</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/react-hook-form/react-hook-form/issues/3422\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/react-hook-form/react-hook-form/issues/3422</a></p>\n<h3 id=\"css-flex-요리조리\" style=\"position:relative;\"><a href=\"#css-flex-%EC%9A%94%EB%A6%AC%EC%A1%B0%EB%A6%AC\" aria-label=\"css flex 요리조리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS flex 요리조리</h3>\n<p>CSS flex 속성에 값을 하나만 넣어서 적용하면 다음과 같은 특징이 있다.</p>\n<ul>\n<li><code class=\"language-text\">flex: 1</code> => 일반 숫자를 넣으면 <code class=\"language-text\">flex-grow</code>로 적용</li>\n<li><code class=\"language-text\">flex: 100px</code> => 숫자에 단위를 붙이면 <code class=\"language-text\">flex-basis</code>로 적용 (vh, vw 등의 값도 가능하다)</li>\n<li><code class=\"language-text\">flex</code>에 일반 숫자가 적용될 경우 <code class=\"language-text\">flex-basis</code>는 0이 된다 (default 값은 auto)</li>\n</ul>\n<h3 id=\"overflow-scroll-잘-쓰기\" style=\"position:relative;\"><a href=\"#overflow-scroll-%EC%9E%98-%EC%93%B0%EA%B8%B0\" aria-label=\"overflow scroll 잘 쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">overflow: scroll</code> 잘 쓰기</h3>\n<ul>\n<li><code class=\"language-text\">overflow: scroll</code>을 설정하고 마우스를 연결하면 항상 스크롤바가 보인다.</li>\n<li><code class=\"language-text\">scrollbarWidth: 'thin'</code>을 적용하면 조금 더 얇은 스크롤바를 사용할 수 있다.</li>\n<li>media 쿼리를 이용해서 pc일때만 적용해주면 더 좋다.</li>\n</ul>\n<h3 id=\"css-order-속성\" style=\"position:relative;\"><a href=\"#css-order-%EC%86%8D%EC%84%B1\" aria-label=\"css order 속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS order 속성</h3>\n<p>flex 혹은 grid의 하위 요소를 수동으로 정렬할 때 사용하는 속성이다. 마치 z-index 같은 느낌이다.</p>\n<p>브라우저 호환성은 상당히 좋은 편이다.</p>\n<p>order 속성은 시각적인 배치에만 영향을 주기 때문에 접근성을 고려해야 하는 상황에는 사용을 주의해야 한다. 예를 들어, 스크린 리더를 이용할 경우에는 order의 영향을 받지 않기 때문에, 시각적으로 보았을 때와 비시각적으로 보았을 때의 순서가 다르게 보일 수 있다.</p>\n<h3 id=\"msw-20에서의-bypass와-passthrough\" style=\"position:relative;\"><a href=\"#msw-20%EC%97%90%EC%84%9C%EC%9D%98-bypass%EC%99%80-passthrough\" aria-label=\"msw 20에서의 bypass와 passthrough permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MSW 2.0에서의 <code class=\"language-text\">bypass</code>와 <code class=\"language-text\">passthrough</code></h3>\n<ul>\n<li>passthrough는 모킹 동작을 수행하지 않고, 실제 API 서버로 요청하도록 할 수 있다.</li>\n<li>bypass는 실제 API 서버로 요청하고, 응답 값을 가로채올 수 있다.</li>\n</ul>\n<p>둘의 차이는?</p>\n<ul>\n<li>bypass와 passthrough는 실제 API 서버로 요청할 수 있도록 하는 것은 동일하다.</li>\n<li>bypass는 API 서버 요청을 조작 및 응답 값을 가로채는 등 전/후처리를 추가할 수 있다.\n<ul>\n<li>조금 추한점은 bypass를 사용할 시, 네트워크 요청을 2번 발생시킨다.</li>\n<li>서비스워커로 1번, API 서버로 1번 => 네트워크 추적 도구에 두번 찍혀서 조금 불편하다.</li>\n</ul>\n</li>\n<li>네트워크 요청 헤더에 x-msw-intention: bypass라고 붙어있는 것으로 구분하면 된다.</li>\n</ul>\n<h3 id=\"과거의-유산들\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EA%B1%B0%EC%9D%98-%EC%9C%A0%EC%82%B0%EB%93%A4\" aria-label=\"과거의 유산들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과거의 유산들</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">window.history.replaceState</code>와 <code class=\"language-text\">pushState</code>의 두번째 인자는 <code class=\"language-text\">title</code>인데, 현재 대부분의 브라우저에서는 더 이상 이를 처리하지 않는다. 하지만, 기존에 작성된 코드와의 호환성 문제 때문에 해당 파라미터는 여전히 존재하며 보통 빈 string을 넘긴다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">document.all</code>은 HTML 문서의 모든 요소에 대한 참조를 배열 형태로 반환한다. 그러나 더 이상 사용되지 않으며, 특이한 점은 객체를 반환하는데도 불구하고 자바스크립트에서 <code class=\"language-text\">document.all</code>은 특별하게 falsy로 처리된다. 이는 과거 코드 패턴 때문이라고 하는데, <code class=\"language-text\">document.all</code>은 IE에서만 지원했고 넷스케이프에선 <code class=\"language-text\">document.getElementById</code>를 지원했었다. 이 차이를 처리하기 위해 아래와 같은 코드패턴을 많이 사용했었다. 그러나 웹이 발전하면서 <code class=\"language-text\">document.all</code>은 구식이 되었고 이에 대한 지원을 갑자기 끊는 대신 제공은 하되, ToBoolean에서는 falsy로 처리하면서 자연스럽게 현대 버전의 코드를 사용하도록 유도하는 것이라고 한다.</p>\n</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code that uses `document.all`</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>getElementById<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code that uses `document.getElementById`</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://stackoverflow.com/questions/10350142/why-is-document-all-falsy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/10350142/why-is-document-all-falsy</a></p>\n<h3 id=\"input-type-checkbox의-이벤트\" style=\"position:relative;\"><a href=\"#input-type-checkbox%EC%9D%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"input type checkbox의 이벤트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>input type checkbox의 이벤트</h3>\n<p><code class=\"language-text\">&lt;input type='checkbox' /></code>에서 <code class=\"language-text\">value</code>가 지정되지 않을 때 이벤트가 발생하면 <code class=\"language-text\">value</code> 값은 <code class=\"language-text\">'on'</code>으로 전달된다.</p>\n<p><code class=\"language-text\">click</code>, <code class=\"language-text\">change</code> 등의 이벤트에서는 checked 값에 관계없이 항상 같은 값을 전달하며,</p>\n<p>form의 서버 전송 또는 form 요소로 formData 생성 시 checked 값에 따라 전달 여부가 나뉜다.</p>\n<h3 id=\"html과-css-이모저모\" style=\"position:relative;\"><a href=\"#html%EA%B3%BC-css-%EC%9D%B4%EB%AA%A8%EC%A0%80%EB%AA%A8\" aria-label=\"html과 css 이모저모 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML과 CSS 이모저모</h3>\n<p>HTML과 CSS는 보통 웹 브라우저에서 사용되지만, 웹 브라우저 이외의 경우에도 사용될 때가 있다. 예를 들어, Spring Boot 환경에서 Thymeleaf 템플릿 엔진을 이용하여 PDF를 생성할 때 HTML과 CSS를 사용한다. 하지만 모든 CSS 문법을 지원하지 않기 때문에, 퍼블리싱할 때 지원되지 않는 CSS를 사용하지 않도록 주의가 필요하다.</p>\n<p>팁이 있다면 비교적 최신 문법이 아니라 예전에 많이 사용되던 문법을 사용하여 퍼블리싱하는 것이 시행착오를 줄일 수 있는 방법이 될 것이다. 예를 들어, 좌우로 요소를 배치하고자 할 때, flexbox의 <code class=\"language-text\">space-between</code> 이 아니라 <code class=\"language-text\">float: left</code> 나 <code class=\"language-text\">float: right</code> 를 이용하는 것이다.</p>\n<h3 id=\"nodejs-v22의-esm-동기-불러오기\" style=\"position:relative;\"><a href=\"#nodejs-v22%EC%9D%98-esm-%EB%8F%99%EA%B8%B0-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\" aria-label=\"nodejs v22의 esm 동기 불러오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js v22의 ESM 동기 불러오기</h3>\n<p>Node.js 22버전부터 <code class=\"language-text\">require</code>로 ESM을 동기식으로 가져오는 실험적인 기능이 추가되었다.</p>\n<p><code class=\"language-text\">--experimental-require-module</code> 플래그를 사용해서 접근할 수 있다. 하지만 아래 조건이 충족되어야 한다.</p>\n<ol>\n<li>package.json에 <code class=\"language-text\">\"type\": \"module\"</code> 추가</li>\n<li>모듈이 완전히 동기적이어야 한다. (top-level await 사용 X)</li>\n</ol>\n<h3 id=\"vite의-native-esm-구멍\" style=\"position:relative;\"><a href=\"#vite%EC%9D%98-native-esm-%EA%B5%AC%EB%A9%8D\" aria-label=\"vite의 native esm 구멍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vite의 Native ESM 구멍</h3>\n<p><code class=\"language-text\">&lt;script type=\"module\"></code> (Native ESM)을 사용할 수 있는 버전은 크롬 61이상, Safari 11 이상이지만,\n<code class=\"language-text\">import.meta.env</code>, async generator function, dynamic import를 사용할 수 있는 버전은 크롬 64이상, Safari 12이상이다.</p>\n<p>따라서, Vite Legacy 플러그인을 사용할 때 크롬 61<del>64 버전과 Safari 11</del>12 사이에 구멍이 생긴다. (ESM을 불러올 순 있지만, 모듈에서 에러가 발생할 수 있다).</p>\n<p>Legacy 플러그인은 이를 감지해서 레거시 번들을 불러오도록 fallback 처리를 하고 있다.</p>\n<h3 id=\"indexhtml에-환경변수-주입하기\" style=\"position:relative;\"><a href=\"#indexhtml%EC%97%90-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%A3%BC%EC%9E%85%ED%95%98%EA%B8%B0\" aria-label=\"indexhtml에 환경변수 주입하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.html에 환경변수 주입하기</h3>\n<p>리액트 앱에서 public 디렉토리의 있는 index.html에서도 환경변수를 쓸 수 있다.</p>\n<p><code class=\"language-text\">%REACT_APP_환경변수_이름%</code> 형식으로 사용하며, 빌드타임에 주입된다.</p>\n<p><strong>Ref</strong> <a href=\"https://create-react-app.dev/docs/adding-custom-environment-variables/#referencing-environment-variables-in-the-html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://create-react-app.dev/docs/adding-custom-environment-variables/#referencing-environment-variables-in-the-html</a></p>\n<h3 id=\"rtl로-hook-테스트하기\" style=\"position:relative;\"><a href=\"#rtl%EB%A1%9C-hook-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"rtl로 hook 테스트하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RTL로 hook 테스트하기</h3>\n<p>React-Testing-Library를 사용하여 커스텀 훅을 테스트하기 위해서는 <code class=\"language-text\">act</code> 함수를 알아야 한다.</p>\n<p>렌더링과 같은 작업, 유저 이벤트, 데이터 가져오기와 같은 동작을 유저 인터페이스와의 상호작용하는 “단위”로 간주한다.</p>\n<blockquote>\n<p>rerender 함수와 다른 점</p>\n<ul>\n<li><code class=\"language-text\">rerender</code> - 렌더링 촉발 원인이 “부모”에 있음</li>\n<li><code class=\"language-text\">act</code> - 렌더링 촉발 원인이 “자신”에게 있음</li>\n</ul>\n</blockquote>\n<h3 id=\"vitest의-environment-옵션\" style=\"position:relative;\"><a href=\"#vitest%EC%9D%98-environment-%EC%98%B5%EC%85%98\" aria-label=\"vitest의 environment 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vitest의 <code class=\"language-text\">environment</code> 옵션</h3>\n<p>테스트에 사용할 다른 환경을 지정하는 옵션으로, 다음 옵션을 사용할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">node: default</code> 옵션</li>\n<li><code class=\"language-text\">jsdom</code>: 브라우저를 유사하게 구현</li>\n<li><code class=\"language-text\">happy-dom</code>: jsdom와 비슷, jsdom보다 빠르지만 몇가지 부족한 API</li>\n<li><code class=\"language-text\">edge-runtime</code>: vercel의 edge-runtime을 유사하게 구현</li>\n</ul>\n<h3 id=\"app-scheme-이모저모\" style=\"position:relative;\"><a href=\"#app-scheme-%EC%9D%B4%EB%AA%A8%EC%A0%80%EB%AA%A8\" aria-label=\"app scheme 이모저모 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>App Scheme 이모저모</h3>\n<ul>\n<li><code class=\"language-text\">shouldKeepPresentedView</code> - 현재 웹뷰를 닫지 않고 다음 웹뷰를 여는 것에 관한 파라미터</li>\n<li><code class=\"language-text\">webview_navButtonType=back</code>을 하면 현재 웹뷰 이후의 웹뷰부터 히스토리가 차곡차곡 쌓여서 들르는 페이지마다 뒤로가기를 할 수 있다.</li>\n</ul>\n<h3 id=\"ky\" style=\"position:relative;\"><a href=\"#ky\" aria-label=\"ky permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ky</h3>\n<p>fetch API 기반으로 동작하는 HTTP 요청 라이브러리. fetch API를 좀 더 편하게 사용할 수 있도록 래핑한 모던 브라우저향 라이브러리다.</p>\n<p>axios에 비해서 기능은 적지만 실사용에는 문제 없을 정도로 충분한 기능을 제공한다. axios보다 용량도 훨씬 가볍다는 것도 장점.\nretry, timeout handling와 같이 axios에는 없는 기능도 있다. 다만 React 환경에서 보통 같이 사용되는 tanstack query도 retry 기능을 가지고 있기 때문에, 두 기능이 충돌하지 않도록 기능을 잘 꺼두는 것이 좋다. 그렇지 않으면 중첩 retry 지옥을 맛볼 수 있다. 😈</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/sindresorhus/ky\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/sindresorhus/ky</a></p>\n<h3 id=\"삭제한-원격-브랜치-복구하기\" style=\"position:relative;\"><a href=\"#%EC%82%AD%EC%A0%9C%ED%95%9C-%EC%9B%90%EA%B2%A9-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B3%B5%EA%B5%AC%ED%95%98%EA%B8%B0\" aria-label=\"삭제한 원격 브랜치 복구하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삭제한 원격 브랜치 복구하기</h3>\n<p>삭제한 원격 브랜치에 커밋을 한 이력이 있어야만 복구가 가능하다(git reflog에 남아 있어야만 복구 가능)</p>\n<ul>\n<li><code class=\"language-text\">git reflog</code>를 통해 삭제한 브랜치의 마지막 커밋 해시값을 알아온다.</li>\n<li><code class=\"language-text\">git checkout -b 브랜치명 {commit hash}</code> 를 통해 삭제한 브랜치를 복구/이동한다</li>\n</ul>\n<h3 id=\"react-19의-remove-layout-effect-warning-during-ssr\" style=\"position:relative;\"><a href=\"#react-19%EC%9D%98-remove-layout-effect-warning-during-ssr\" aria-label=\"react 19의 remove layout effect warning during ssr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 19의 Remove layout effect warning during SSR</h3>\n<p>SSR 환경에서 <code class=\"language-text\">useLayoutEffect</code>를 사용할 때 발생할 수 있는 잠재 이슈를 알리기 위한 경고 로그였지만 대부분의 사용처는 아래와 같은 분기 처리로 우회하고 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> useIsomorphicLayoutEffect <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">?</span> useEffect <span class=\"token operator\">:</span> useLayoutEffect</code></pre></div>\n<p>이제는 이렇게 하지 않아도 되도록 경고를 제거했다.</p>\n<h3 id=\"ecma-2024의-새-문법-이모저모\" style=\"position:relative;\"><a href=\"#ecma-2024%EC%9D%98-%EC%83%88-%EB%AC%B8%EB%B2%95-%EC%9D%B4%EB%AA%A8%EC%A0%80%EB%AA%A8\" aria-label=\"ecma 2024의 새 문법 이모저모 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECMA 2024의 새 문법 이모저모</h3>\n<p><strong>Pipeline Operator</strong></p>\n<p>무분별한 함수 감싸기를 조금은 편하게 볼 수 있을까?</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Without pipeline operator</span>\n<span class=\"token keyword\">const</span> calculatedValue <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// With pipeline operator</span>\n<span class=\"token keyword\">const</span> calculatedValue <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Replacing Math.max</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Replacing Math.pow</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> Math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Using Math.ceil</span></code></pre></div>\n<p><strong>Records and Tuples</strong></p>\n<p>데이터를 일부만 수정해서 새로운 배열을 빠르게 만들어 낼 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Creating an immutable record</span>\n<span class=\"token keyword\">const</span> userProfile <span class=\"token operator\">=</span> #<span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">\"IgorKomolov\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Creating an immutable tuple</span>\n<span class=\"token keyword\">const</span> numberSequence <span class=\"token operator\">=</span> #<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Updating these structures creates new instances</span>\n<span class=\"token keyword\">const</span> updatedProfile <span class=\"token operator\">=</span> userProfile<span class=\"token punctuation\">.</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> age<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>updatedProfile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// #{ username: \"IgorKomolov\", age: 40 }</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userProfile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// #{ username: \"IgorKomolov\", age: 39 } (remains the same)</span>\n\n<span class=\"token keyword\">const</span> newNumberSequence <span class=\"token operator\">=</span> numberSequence<span class=\"token punctuation\">.</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newNumberSequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// #[10, 25, 30]</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numberSequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// #[10, 20, 30] (remains the same)</span></code></pre></div>\n<p><strong>Object.groupBy()</strong></p>\n<p>enum별로 분류해서 써야하는 상황에서 유용할 것 같다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> inventory <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"asparagus\"</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"vegetables\"</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"bananas\"</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"fruit\"</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"goat\"</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"meat\"</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">:</span> <span class=\"token number\">23</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"cherries\"</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"fruit\"</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"fish\"</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"meat\"</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">:</span> <span class=\"token number\">22</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Result is:\n{\n  vegetables: [\n    { name: 'asparagus', type: 'vegetables', quantity: 5 },\n  ],\n  fruit: [\n    { name: \"bananas\", type: \"fruit\", quantity: 0 },\n    { name: \"cherries\", type: \"fruit\", quantity: 5 }\n  ],\n  meat: [\n    { name: \"goat\", type: \"meat\", quantity: 23 },\n    { name: \"fish\", type: \"meat\", quantity: 22 }\n  ]\n}\n*/</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://github.com/tc39/proposal-pipeline-operator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/tc39/proposal-pipeline-operator</a></p>\n<h2 id=\"이것저것-모음집\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83-%EB%AA%A8%EC%9D%8C%EC%A7%91\" aria-label=\"이것저것 모음집 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것 모음집</h2>\n<hr>\n<ul>\n<li>syncpack - 큰 자바스크립트 모노레포 프로젝트에서 디펜던시의 버전을 관리해준다. (<a href=\"https://github.com/JamieMason/syncpack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>iOS 13 이상부터는 <code class=\"language-text\">navigator.userAgent</code> 값이 <code class=\"language-text\">iPad</code>가 아닌 <code class=\"language-text\">Macintosh</code>로 내려올 수 있다. 아이패드의 사파리 디폴트 값이 데스크톱 모드로 변경되어 그렇다고 한다.</li>\n<li>HTML Popover가 베이스라인이 됐다. (<a href=\"https://web.dev/blog/popover-api?hl=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>자바스크립트에서 집합 요소의 unique함을 보장하기 위해 <code class=\"language-text\">Set</code> 자료구조를 제공하는데, <code class=\"language-text\">Set</code>으로 선언한 집합을 다시 배열로 변환 시 insertion order를 보장해준다.</li>\n<li><a href=\"https://github.com/Schniz/fnm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fnm</a>을 사용하면 워크스페이스 단위로 엄청 편하게 node version을 바꿀 수 있다. (.zshrc에 <code class=\"language-text\">eval \"$(fnm env --use-on-cd)\"</code>만 추가하면 된다.) vscode를 켜면 자동으로 <code class=\"language-text\">.node-version</code>에 맞게 버전이 변경된다.</li>\n<li>VSCode 기능 중 devcontainer라는 것이 있다. 컨테이너에 개발 환경을 구성할 수 있다 (cf. 범용으로 런타임 버전을 관리해주는 도구도 있다 (<a href=\"https://asdf-vm.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">asdf-vm</a>))</li>\n<li>styled-components에 전달하는 prop에 <code class=\"language-text\">$</code>를 프리픽스로 붙이면 transient props가 되고 실제 리액트 컴포넌트나 돔 요소까지 해당 prop이 전달되는 것을 방지할 수 있다.</li>\n<li>redux-persist를 사용하면 redux-toolkit으로 전역 관리하는 상태들을 로컬스토리지에 저장하면서 새로고침을 해도 전역 상태를 관리할 수 있다.</li>\n<li>vite의 설정파일에서는 기본적으로 .env파일을 로드하지 않는다. 그래서 만약 환경변수 접근이 필요하면 loadEnv 헬퍼를 사용하여 env 파일에 접근할 수 있다. (<a href=\"https://ko.vitejs.dev/config/#using-environment-variables-in-config\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n<li>Node.js v16.13 버전부터 Corepack 을 따로 설치하지 않아도 지원한다.</li>\n</ul>\n<h2 id=\"기타공유\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80%EA%B3%B5%EC%9C%A0\" aria-label=\"기타공유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타공유</h2>\n<hr>\n<h3 id=\"테스트-피라미드\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%BC%EB%9D%BC%EB%AF%B8%EB%93%9C\" aria-label=\"테스트 피라미드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 피라미드</h3>\n<p>좋은 테스트 코드를 작성하기 위한 가이드라인</p>\n<p><strong>Ref</strong> <a href=\"https://www.integer.blog/practical-test-pyramid/?ref=linkedin.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.integer.blog/practical-test-pyramid/?ref=linkedin.com</a></p>\n<h3 id=\"asdf\" style=\"position:relative;\"><a href=\"#asdf\" aria-label=\"asdf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>asdf</h3>\n<p>nvm, node, 등 여러 툴, 환경의 버전을 모두 매니지먼트 할 수 있는 시스템</p>\n<p><strong>Ref</strong> <a href=\"https://github.com/asdf-vm/asdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/asdf-vm/asdf</a></p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<hr>\n<p>사흘 반 동안 연휴였는데, 농땡이 부리다가 부랴부랴 마지막 날 잠들기 전 쓰는 블로그.</p>\n<p>사내 TIL 챌린지가 있었어서 갑자기 양이 확 늘었다 🫠</p>\n<p>내~내 비만 쏟아지던 연휴도 이제 끝 ☔️</p>","timeToRead":12,"frontmatter":{"title":"5월 첫주차 기록","date":"May 06, 2024","description":"5월 연휴 순삭","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2024-5-week-1/","previous":{"fields":{"slug":"/weekly/2024-5-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"May 11, 2024","description":"따사롭고 한가한","title":"5월 2주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2024-4-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"April 27, 2024","description":"약속 없는 한 주","title":"4월 4주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2024-5-week-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"May 11, 2024","description":"따사롭고 한가한","title":"5월 2주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2024-4-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"April 27, 2024","description":"약속 없는 한 주","title":"4월 4주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}