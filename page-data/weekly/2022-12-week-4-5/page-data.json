{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2022-12-week-4-5/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"e7d5bc6c-cd04-5dce-9cdd-40a50512407b","excerpt":"마지막은 또 다른 시작 배워가기 tailwind 관련 Tailwind ClassName을 자동으로 sort해주는 headwind라는 익스텐션이 있다. (prettier-plugin-tailwindcss 와 같은 역할) Tailwind를 다른 스타일 라이브러리(styled…","html":"<p>마지막은 또 다른 시작</p>\n<!-- more -->\n<hr>\n<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<h3 id=\"tailwind-관련\" style=\"position:relative;\"><a href=\"#tailwind-%EA%B4%80%EB%A0%A8\" aria-label=\"tailwind 관련 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tailwind 관련</h3>\n<ul>\n<li>\n<p>Tailwind ClassName을 자동으로 sort해주는 <a href=\"https://marketplace.visualstudio.com/items?itemName=heybourn.headwind\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">headwind</a>라는 익스텐션이 있다. (<a href=\"https://github.com/tailwindlabs/prettier-plugin-tailwindcss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prettier-plugin-tailwindcss</a> 와 같은 역할)</p>\n</li>\n<li>\n<p>Tailwind를 다른 스타일 라이브러리(styled-components, emotion) 등과 함께 사용한다면 CSS Cascading 순위에서 밀려 스타일이 원하는데로 적용되지 않을 수 있다.</p>\n<ul>\n<li>이 때 <a href=\"https://github.com/ben-rogerson/twin.macro\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">twin.macro</a> 같은 라이브러리를 사용하거나</li>\n<li>tailwind config파일에서 <code class=\"language-text\">important</code> 옵션으로 우선순위를 조정할 수 있다.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// tailwind.config.js</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"cidr\" style=\"position:relative;\"><a href=\"#cidr\" aria-label=\"cidr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CIDR</h3>\n<p><strong>CIDR(Classless Inter-Domain Routing)</strong> 은 직역하면 ‘클래스 없는 도메인 간 라우팅 기법’이란 뜻으로, IPv4 대역을 효율적으로 사용하기 위해 네트워크를 class로 구분하지 않고 접두어를 통해서 구분하는 방법이다.</p>\n<p>서브넷은 CIDR로 인해서 <strong>부분적으로 나눈 부분 네트워크</strong>를 가리킨다. 예를 들어, IP주소가 <code class=\"language-text\">192.168.10.0/24</code>일 때, 서브넷 마스크가 <code class=\"language-text\">/24</code>이므로 앞에서부터 오는 24비트 이후에 오는 4번째 옥텟을 전부 사용할 수 있다. 하나의 옥텟은 8비트기 때문에 2^8 - 2(예약된 ip 주소: 처음과 마지막), 즉 254개의 호스트에 IP를 할당할 수 있다는 뜻이다.</p>\n<p><strong>Ref</strong> <a href=\"https://kim-dragon.tistory.com/9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kim-dragon.tistory.com/9</a></p>\n<h3 id=\"playwright\" style=\"position:relative;\"><a href=\"#playwright\" aria-label=\"playwright permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>playwright</h3>\n<p><a href=\"https://playwright.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">playwright</a>dms e2e 테스트를 위한 도구로, 하나의 API로 모든 최신 브라우저(크로미움, 파이어폭스, 웹킷)에서 빠르고, 안정적인 자동화를 지원하는 MS에서 만든 자동화 도구다. 여러 페이지에 걸친 시나리오를 테스트할 수 있다.</p>\n<p>playwright에서는 새로운 페이지가 열릴 때 순차적으로 테스트를 진행하도록 코드를 작성해야 한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 새로운 페이지를 열어서 해당 페이지에서 테스트를 진행하는 코드</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newPage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">waitForEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1</span>\n  page<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[target=_blank]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://ui.toast.com/posts/ko_20210818\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ui.toast.com/posts/ko_20210818</a></p>\n<h3 id=\"git-rebase-팁\" style=\"position:relative;\"><a href=\"#git-rebase-%ED%8C%81\" aria-label=\"git rebase 팁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git rebase 팁</h3>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase <span class=\"token parameter variable\">-i</span> HEAD~<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span></code></pre></div>\n<p>명령어로 ㄴHEAD를 포함해서 <code class=\"language-text\">number</code>의 커밋만큼 커밋을 수정할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- `r`: 커밋 이름 변경\n- `p`: 커밋 그대로\n- `s`, `f`: 해당 커밋을 이전 커밋과 합치는 명령어\n\t\t- `s` - 커밋 메시지를 모두 합쳐서 새로운 메시지 생성\n\t\t- `f` - 이전 커밋 메시지만 남김</code></pre></div>\n<h3 id=\"라이브러리-배포-전략---module-federation\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EB%B0%B0%ED%8F%AC-%EC%A0%84%EB%9E%B5---module-federation\" aria-label=\"라이브러리 배포 전략   module federation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라이브러리 배포 전략 - Module Federation </h3>\n<p>Module Federation은 리모트 앱이 노출(Expose)한 원격 모듈을, 호스트 앱에서 런타임에 비동기 로딩하여 사용할 수 있는 도구다.</p>\n<p>Nexus와 Module Federation을 사용하여 배포할 경우 장단점을 알아보자.</p>\n<ul>\n<li><strong>Nexus</strong>\n<ul>\n<li>장점\n<ul>\n<li>구성과 활용이 간단함.</li>\n<li>제공처에선 JS로 빌드만 해주면 되고, 사용처에선 그저 쓰기만 하면 된다.</li>\n<li>경우에 따라 커스텀도 가능할 수 있음.</li>\n<li>완전한 하나의 앱으로 동작할 수 있음.</li>\n<li>노출/로딩 제어 등의 별도 처리에 비교적 자유로움.</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>사용처의 일관된 사용을 관리할 수 없음.</li>\n<li>의존성을 극히 제한적으로 관리해야 함.</li>\n<li>라이브러리 제공처에서 에러/로그 수집이 불가능함.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Module Federation</strong>\n<ul>\n<li>장점\n<ul>\n<li>사용처의 일관된 사용을 엄격히 제한할 수 있음.</li>\n<li>사용처가 모듈의 업데이트를 수동으로 할 필요 없음.</li>\n<li>API 인터페이스 변경 등의 상황에서, 제공처의 수정만으로 전체 반영이 가능.</li>\n<li>제공처에서 에러/로그의 독자적인 수집이 가능하며, 사용처로 에러를 전달할 수도 있음.</li>\n<li>모듈 내 의존성 선택이 자유로움.</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>사용처에서 Module Federation을 위한 특수한 처리가 필요하다.</li>\n<li>특히 CRA는 eject 해야하거나, craco 사용 등이 필수임.</li>\n<li>CRA에서 Module Federation을 지원하기 위한 논의가 진행중에 있으나, 근시일은 아닌 듯하다. <a href=\"https://github.com/facebook/create-react-app/pull/12284\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a></li>\n<li>각기 다른 버전의 모듈을 활용할 수 없음.</li>\n<li>모듈 코드와 별개로 URI와 배포 인프라를 관리해야 함.</li>\n<li>복수의 endpoint에서 병렬적으로 사용될 수 있으니, 경우에 따라 가용성 확보를 위한 방안을 지금과는 다른 수준으로 마련해야 할 가능성이 있음.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>🤔 <strong>Module Federation이 번들러들에 의해 충분히 지원되고 있는지?</strong></p>\n<ul>\n<li>Webpack v5, rollup, vite, bit 등 적용 완료</li>\n<li>parcel은 아직 안됨.</li>\n<li>esbuild는 계획조차 안하고 있음을 공지함.</li>\n</ul>\n</blockquote>\n<h3 id=\"이미지-리사이징\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95\" aria-label=\"이미지 리사이징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미지 리사이징</h3>\n<ol>\n<li>input을 통해 받은 File(Blob)을 <code class=\"language-text\">FileReader</code> 객체를 통해 base64로 인코딩 한다.</li>\n</ol>\n<ul>\n<li>base64란, Binary Data를 Text로 바꾸는 인코딩(Base64는 64진법 이라는 뜻으로 ASCII 문자들로 표시할 수 있는 가장 큰 진법) 기법이다.</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p><code class=\"language-text\">new Image()</code> 생성자 함수로 <code class=\"language-text\">HTMLImageElement</code> 인스턴스를 생성한다 (<code class=\"language-text\">Image</code>의 <code class=\"language-text\">src</code>에 <code class=\"language-text\">base64src</code>를 할당한다.)</p>\n</li>\n<li>\n<p><code class=\"language-text\">Canvas</code> 엘리먼트를 생성하고, <code class=\"language-text\">getContext('2d')</code>로 drawing 할 2d 컨텍스트를 가져와서, <code class=\"language-text\">drawImage</code> 메서드의 매개변수에 base64 이미지와 리사이징할 사이즈를 입력해서 새로운 이미지를 그려준다.</p>\n</li>\n<li>\n<p>Base64이미지를 다시 File로 변환하려면 중간에 <code class=\"language-text\">Uint8Array</code> 생성자를 이용해서 <code class=\"language-text\">ArrayBuffer</code>로 변환한 다음, <code class=\"language-text\">new File()</code> 생성자의 매개변수로 넣어주어 변환해준다.</p>\n</li>\n</ol>\n<ul>\n<li>이때, 두번째 인자로 <code class=\"language-text\">name</code> 을 넣어주는데, .jpg 같은 확장자가 없으면 서버에서는 <code class=\"language-text\">content-type</code>을 모든 바이너리 타입을 포함하는 타입인 octet-stream 으로 받아서 이미지가 아니다고 판단해서 튕겨 내는 이슈가 생길수 있기 때문이다.</li>\n</ul>\n<h3 id=\"turborepo\" style=\"position:relative;\"><a href=\"#turborepo\" aria-label=\"turborepo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TurboRepo</h3>\n<p>모노레포에서 프로젝트가 커질수록 테스트, 빌드, 린트등의 작업들이 많아진다. 이때 turborepo를 통해 작업(린트, 빌드 테스트)의 결과를 캐시에 저장해서 다음 작업 때 중복되는 작업은 스킵할 수 있다.</p>\n<p>turborepo가 중복 작업을 구별하는 방법은 다음과 같다.</p>\n<ul>\n<li>소스파일을 보고 해시코드를 생성한다.</li>\n<li>로컬 파일 시스템에서 해시코드와 똑같은 이름을 가진 폴더를 찾는다. (e.g.<code class=\"language-text\">./node_modules/.cache/turbo/78awdk123</code>)</li>\n<li>있으면 작업을 생략한다.</li>\n</ul>\n<p>또한 remote caching(vercel 제공)을 통해 로컬 파일시스템 캐싱을 벗어나 원격으로 캐시를 제공하여 ci 혹은 팀원의 로컬 빌드 때 빌드 속도를 향상시킬 수 있다.</p>\n<h3 id=\"웹뷰와-앱-통신\" style=\"position:relative;\"><a href=\"#%EC%9B%B9%EB%B7%B0%EC%99%80-%EC%95%B1-%ED%86%B5%EC%8B%A0\" aria-label=\"웹뷰와 앱 통신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹뷰와 앱 통신</h3>\n<p>자바스크립트 웹뷰에서 native 코드를 호출할 때,</p>\n<ul>\n<li>ios: <code class=\"language-text\">window. webkit</code> 객체로 호출해야 한다. (<code class=\"language-text\">webkit.messageHandlers[MESSAGE_HANDLER_NAME].postMessage(message)</code>)</li>\n<li>android: 안드로이드 전역객체 property로 주입시켜준다. 이때 지정해준 이름으로 메서드를 호출한다.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// window.injectedObject</span>\nwebView<span class=\"token punctuation\">.</span><span class=\"token function\">addJavascriptInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JsObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"injectedObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwebView<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwebView<span class=\"token punctuation\">.</span><span class=\"token function\">loadUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javascript:alert(injectedObject.toString())\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"유니버셜-앱에서-클라이언트-코드와-서버-코드-구분하기\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%8B%88%EB%B2%84%EC%85%9C-%EC%95%B1%EC%97%90%EC%84%9C-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%BD%94%EB%93%9C%EC%99%80-%EC%84%9C%EB%B2%84-%EC%BD%94%EB%93%9C-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0\" aria-label=\"유니버셜 앱에서 클라이언트 코드와 서버 코드 구분하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유니버셜 앱에서 클라이언트 코드와 서버 코드 구분하기</h3>\n<p>Next.js와 같은 같은 유니버셜 앱에서 SSR이 진행되는 프로세스는</p>\n<ol>\n<li>서버에서 최초 렌더링</li>\n<li>클라이언트에서 하이드레이션 + 이후 렌더링</li>\n</ol>\n<p>의 순서로 이루어진다.</p>\n<p>서버의 렌더링(Node.js에서 html 코드를 만드는 것)과 클라이언트의 렌더링(브라우저에서 자바스크립트로 DOM을 만드는 것) 모두를 진행해야 하기 때문에, 코드가 Node.js와 브라우저에서 모두 평가되어야함</p>\n<p>Next.js에서는 <code class=\"language-text\">_app.tsx</code>에 서버/클라이언트 공통의 코드를 작성할 수 있는데, 여기서 클라이언트에만 유효한 코드를 작성하면 에러를 던진다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// _app.tsx</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Node.js 환경에서는 브라우저 환경에 있는 <code class=\"language-text\">Event</code>가 없기 때문에 에러를 던짐</p>\n<p>따라서 이런 경우에는 분기처리가 필요하다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> MaybeEventOrNot <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"번들-관련\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EB%93%A4-%EA%B4%80%EB%A0%A8\" aria-label=\"번들 관련 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>번들 관련</h3>\n<p>패키지 번들과 사용자에게 전달되는 번들 파일은 구분해야 한다.</p>\n<p>웹애플리케이션에서 lottie 파일을 불러온다고 가정하자.</p>\n<p>정적 import로 lottie 파일을 가져오면 사용하지 않아도 lottie 파일이 번들에 포함된다.\n반면 동적 import를 사용하면 사용하는 시점에 lottie 파일을 불러온다.</p>\n<p>이는 빌드 설정에 따라 다를 수 있다. (서드파티 라이브러리를 다시 번들링하거나 dynamic import를 별도 청크로 분리하지 않는 등의 차이)</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">../../../assets/lottie/checkbox/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.json</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> lottieData <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setAnimationData</span><span class=\"token punctuation\">(</span>lottieData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"nestjs-관련\" style=\"position:relative;\"><a href=\"#nestjs-%EA%B4%80%EB%A0%A8\" aria-label=\"nestjs 관련 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nest.js 관련</h3>\n<ul>\n<li>\n<p>Nest.js의 정적 모듈(기본)에서는 환경변수를 사용할 수 없다. <code class=\"language-text\">process.env</code>에 정의된 환경 변수들을 정적으로 불러올 수 없기 때문이다. 이때는 <code class=\"language-text\">DynamicModule</code>을 사용한다.</p>\n</li>\n<li>\n<p>Nest.js의 <code class=\"language-text\">ConfigModule</code>은 앱이 동작하는 여러 환경에서 필요한 서로 다른 환경변수를 정의하기 위해 사용한다. 한 곳에 config variables를 모아두는 셈이다. <code class=\"language-text\">ConfigModule</code>은 <code class=\"language-text\">ConfigService</code>를 노출하여 실행환경마다 적합한 <code class=\"language-text\">.env</code> 파일을 만들어낸다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">registerAs</code> 를 사용하여 configuration 모듈을 namespace화할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// config/database.config.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">registerAs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"database\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  host<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_HOST</span><span class=\"token punctuation\">,</span>\n  port<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">5432</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">registerAs</code>로 선언한 configuration을 <code class=\"language-text\">load</code>로 불러온 후,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> databaseConfig <span class=\"token keyword\">from</span> <span class=\"token string\">\"./config/database.config\"</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    ConfigModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      load<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>databaseConfig<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>dot notation(점 표기법)으로 값을 불러올 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> dbHost <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configService<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"database.host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"nestjs-monorepo의-타입-구분\" style=\"position:relative;\"><a href=\"#nestjs-monorepo%EC%9D%98-%ED%83%80%EC%9E%85-%EA%B5%AC%EB%B6%84\" aria-label=\"nestjs monorepo의 타입 구분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nest.js monorepo의 타입 구분</h3>\n<p>Nest.js를 monorepo로 구성했다면, nest-cli.json에 하위 프로젝트들의 설정을 명시할 수 있다.</p>\n<p>이때 workspace project의 타입은 2가지로 설정할 수 있다.</p>\n<ul>\n<li>application - main.ts를 포함하는 nest 앱. 표준 구조에서의 앱과 동일하다.</li>\n<li>library - 여러 프로젝트에서 공통으로 사용할 목적으로 패키징한 앱. 단일로 실행될 수 없으며, main.ts가 없다.</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://docs.nestjs.com/cli/monorepo#workspace-projects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.nestjs.com/cli/monorepo#workspace-projects</a></p>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://velog.io/@kakasoo/Nest%EC%97%90%EC%84%9C-ConfigModule-TypeORM-%EC%93%B0%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@kakasoo/Nest에서-ConfigModule-TypeORM-쓰기</a></li>\n<li><a href=\"https://docs.nestjs.com/techniques/configuration\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.nestjs.com/techniques/configuration</a></li>\n<li><a href=\"https://overcome-the-limits.tistory.com/610\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://overcome-the-limits.tistory.com/610</a></li>\n<li><a href=\"https://docs.nestjs.com/techniques/configuration#configuration-namespaces\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.nestjs.com/techniques/configuration#configuration-namespaces</a></li>\n</ul>\n<hr>\n<h2 id=\"이것저것\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83\" aria-label=\"이것저것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것</h2>\n<ul>\n<li>\n<p>17버전 이전의 React는 native(브라우저)에서 bubble되지 않는 이벤트(ex. <code class=\"language-text\">blur</code>, <code class=\"language-text\">scroll</code>)들도 모두 <code class=\"language-text\">SyntheticEvent</code>로 감싸서 전파시키고 있었는데, 이로 인해 여러 이슈들이 많이 발생해서 17버전부터는 <code class=\"language-text\">scroll</code> 이벤트를 부모 element로 전파시키지 않는다. (<a href=\"https://github.com/facebook/react/pull/19464\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</p>\n</li>\n<li>\n<p>SQL로 Pagination을 구현할 때 offset 방식에서는 많은 행을 읽어들여오고, 이후에 삭제하는 과정을 거치기 때문에 성능상 이슈가 발생할 수 있다.</p>\n<ul>\n<li>no-offset 방식으로 구현할 경우 이런 이슈를 해소할 수 있지만 현재 페이지에서 앞으로 가기, 뒤로 가기만 구현 가능하고, ‘특정 페이지로 이동’같은 구현은 불가능하다. <a href=\"https://use-the-index-luke.com/no-offset\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a></li>\n</ul>\n</li>\n<li>\n<p>‘pre-major’ 버전 - major 버전의 정식 출시 전, 즉 <code class=\"language-text\">1.0.0</code> 버전 미만을 일컫는다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">React.memo()</code> 는 기본적으로 넘겨받은 props에 대한 얕은 비교만 수행한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>ResultPanel<span class=\"token punctuation\">,</span> fastDeepEqual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>이때 두번째 인자로 비교에 사용할 함수를 넣을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>mac os에서 <code class=\"language-text\">etc/hosts</code>와 그 사용 예시</p>\n<ul>\n<li>hosts 파일은 도메인의 IP를 찾을 때 컴퓨터가 맨 처음 조사하는 파일(DNS파일)이다.</li>\n</ul>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">127.0</span>.0.1       localhost MytoryMP.local\n<span class=\"token number\">255.255</span>.255.255 broadcasthost\n::1             localhost\n<span class=\"token number\">127.0</span>.0.1       localhost</code></pre></div>\n</li>\n</ul>\n<hr>\n<h2 id=\"기타\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80\" aria-label=\"기타 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타</h2>\n<h3 id=\"swr-20-릴리즈\" style=\"position:relative;\"><a href=\"#swr-20-%EB%A6%B4%EB%A6%AC%EC%A6%88\" aria-label=\"swr 20 릴리즈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>swr 2.0 릴리즈</h3>\n<p>새로운 mutation API와 개선된 낙관적 UI 기능, 새로운 devTools, 그리고 concurrent 렌더링에 대한 더 나은 지원을 들고 왔다!</p>\n<p><strong>Ref</strong> <a href=\"https://swr.vercel.app/blog/swr-v2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://swr.vercel.app/blog/swr-v2</a></p>\n<h3 id=\"nextjs-131\" style=\"position:relative;\"><a href=\"#nextjs-131\" aria-label=\"nextjs 131 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js 13.1</h3>\n<p>사내 구성원 분들 사이에서 제일 핫한 주제는 middleware 관련인 것 같다.</p>\n<p>Next.js 13.1부터는 미들웨어에서 응답을 리턴받을 수 있으며, 요청에 헤더를 추가할 수 있다고 한다.</p>\n<p>원래 됐다가 안됐다가 다시 되는 것으로 돌아왔나보다. 👀</p>\n<p><strong>Ref</strong> <a href=\"https://nextjs.org/blog/next-13-1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nextjs.org/blog/next-13-1</a></p>\n<h3 id=\"cypress-studio\" style=\"position:relative;\"><a href=\"#cypress-studio\" aria-label=\"cypress studio permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cypress-studio</h3>\n<p>cypress 테스트 코드를 자동으로 만들어준다! 😲 (아직 Experimental 단계)</p>\n<p>RWA(Real World App)에서의 테스트코드를 일부 작성하고, 브라우저 환경에서 테스트하고자 하는 시나리오를 추가적으로 실행하면 이 Command들을 기억하여 유저 액션 기반 테스트 코드를 작성해주는 것 같다.</p>\n<p>playwright과 비슷한 기능을 제공하는 것 같은데, 복잡한 환경에서 사람의 손 없이 제대로 동작할지는 모르겠다 🤷‍♀️</p>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://docs.cypress.io/guides/references/cypress-studio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.cypress.io/guides/references/cypress-studio</a></li>\n<li><a href=\"https://fe-developers.kakaoent.com/2022/221222-cypress-studio-test-automation-low-code/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fe-developers.kakaoent.com/2022/221222-cypress-studio-test-automation-low-code/</a></li>\n</ul>\n<h3 id=\"프론트엔드-엔지니어-커리어-로드맵\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4-%EC%BB%A4%EB%A6%AC%EC%96%B4-%EB%A1%9C%EB%93%9C%EB%A7%B5\" aria-label=\"프론트엔드 엔지니어 커리어 로드맵 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프론트엔드 엔지니어 커리어 로드맵</h3>\n<p>‘탁월한’ 시니어 개발자가 되기 위해</p>\n<ul>\n<li>어디서 어떤 문제가 생길지 생각하는 능력</li>\n<li>데이터에 기반하여 의사결정하는 능력</li>\n<li>동료의 효과적 의사결정을 돕는 능력</li>\n</ul>\n<p>을 추가적으로 계발해야겠다!</p>\n<p>그리고 ‘웹 특화 프론트엔드 엔지니어’의 역량에 더해, ‘제품 특화 프론트엔드 엔지니어’의 역량도 쌓아 프로덕트의 UI/UX에도 관심을 갖고 고객만족을 위해 일해야겠다는 생각을 한다.</p>\n<blockquote>\n<p>엔지니어링 레벨을 빡빡하게 평가하는 걸로 유명한 구글에서는, ‘상위 레벨의 역할을 잘 할 것 같은 사람’을 승진시키는 게 아니라 ‘이미 상위 레벨의 역할을 일정 기간 이상 충분히 수행하고 있었던 사람’의 노고를 인정해주는 차원에서 승진시킨다고 한다</p>\n</blockquote>\n<p><strong>Ref</strong> <a href=\"https://steady-study.super.site/frontend-engineer-career-roadmap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://steady-study.super.site/frontend-engineer-career-roadmap</a></p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>작년에도 12월 마지막 두 주는 한번에 묶었는데, 올해도 그렇게 되어버렸넹. 여행을 다녀와서 한주씩 쓸 내용이 없었다.</p>\n<p>이렇게 또 올 한 해가 끝났다! 알차고 후회없는 2022년이었다. 다가올 2023년도 블로그 화이팅 🤗</p>","timeToRead":11,"frontmatter":{"title":"12월 4-5주차 기록","date":"December 30, 2022","description":"weekly-i-learned","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2022-12-week-4-5/","previous":{"fields":{"slug":"/weekly/2023-1-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 07, 2023","description":"weekly-i-learned","title":"1월 1주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/retrospective/retrospective-2022/","langKey":"en","directoryName":"retrospective"},"frontmatter":{"date":"December 30, 2022","description":null,"title":"2022년 회고","tags":["retrospective"]}},"previousInSameTag":{"fields":{"slug":"/weekly/2023-1-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 07, 2023","description":"weekly-i-learned","title":"1월 1주차 기록","tags":["weekly"]}},"nextInSameTag":{"fields":{"slug":"/weekly/2022-12-week-3/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"December 17, 2022","description":"weekly-i-learned","title":"12월 3주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}