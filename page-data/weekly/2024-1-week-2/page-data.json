{"componentChunkName":"component---src-templates-blog-post-js","path":"/weekly/2024-1-week-2/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"3fb5afd5-e213-50a4-acf4-bd0a5d6f02c4","excerpt":"배워가기 jest에서 강제로 테스트 실패하게 하는 법  함수를 호출하면 된다! Fetch API의  객체의 필드  - 응답에서 body가 사용되었는지 여부.  (또는 , ) 를 호출하면 비로소 값이 true로 변경된다.  - 응답이 redirect의 응답인지 여부  - 응답의 타입(ex…","html":"<h2 id=\"배워가기\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%8C%EA%B0%80%EA%B8%B0\" aria-label=\"배워가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배워가기</h2>\n<hr>\n<h3 id=\"jest에서-강제로-테스트-실패하게-하는-법\" style=\"position:relative;\"><a href=\"#jest%EC%97%90%EC%84%9C-%EA%B0%95%EC%A0%9C%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%A4%ED%8C%A8%ED%95%98%EA%B2%8C-%ED%95%98%EB%8A%94-%EB%B2%95\" aria-label=\"jest에서 강제로 테스트 실패하게 하는 법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jest에서 강제로 테스트 실패하게 하는 법</h3>\n<p><code class=\"language-text\">fail()</code> 함수를 호출하면 된다!</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'챗봇 정상 응답 시 도움이 되었는지 물어보는 응답을 반환한다,'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">customRender</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatContent</span></span> <span class=\"token attr-name\">onShowNewMessage</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onFocusChatInput</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'정산/부가세'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> categoryFaqList <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>categoryFaqList<span class=\"token punctuation\">)</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"fetch-api의-response-객체의-필드\" style=\"position:relative;\"><a href=\"#fetch-api%EC%9D%98-response-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%95%84%EB%93%9C\" aria-label=\"fetch api의 response 객체의 필드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetch API의 <code class=\"language-text\">Response</code> 객체의 필드</h3>\n<ul>\n<li><code class=\"language-text\">bodyUsed</code> - 응답에서 body가 사용되었는지 여부. <code class=\"language-text\">response.json()</code> (또는 <code class=\"language-text\">.text()</code>, <code class=\"language-text\">.blob()</code>) 를 호출하면 비로소 값이 true로 변경된다.</li>\n<li><code class=\"language-text\">redirected</code> - 응답이 redirect의 응답인지 여부</li>\n<li><code class=\"language-text\">type</code> - 응답의 타입(ex. <code class=\"language-text\">basic</code>, <code class=\"language-text\">cors</code>)</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/en-US/docs/Web/API/Response</a></p>\n<h3 id=\"axios-vs-fetch-api\" style=\"position:relative;\"><a href=\"#axios-vs-fetch-api\" aria-label=\"axios vs fetch api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>axios vs fetch API</h3>\n<ul>\n<li>axios는 프라미스를 한번만 이행하면 응답 데이터를 모두 얻을 수 있다\n<ul>\n<li>상태: response.status</li>\n<li>헤더: response.headers</li>\n<li>본문: response.body</li>\n</ul>\n</li>\n<li>fetch는 두 개 프라미스가 이행되어야 객체를 모두 얻을 수 있다\n<ul>\n<li>헤더를 모두 받으면 response 객체를 만든다\n<ul>\n<li>fetch() 함수가 반환한 Promise가 이행될 때</li>\n</ul>\n</li>\n<li>브라우저가 바디를 모두 받으면 데이터를 만든다\n<ul>\n<li>본문 조회 메소드가 반환한 Promise가 이행될 때</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Fetch API의 <code class=\"language-text\">.json()</code> 함수가 Promise를 반환하는 이유</p>\n<ul>\n<li>메인쓰레드를 블락하지 않기 위해서</li>\n</ul>\n</blockquote>\n<h3 id=\"구현-세부사항을-테스트하는-것은-리팩토링에-취약하다\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EC%84%B8%EB%B6%80%EC%82%AC%ED%95%AD%EC%9D%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%80-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81%EC%97%90-%EC%B7%A8%EC%95%BD%ED%95%98%EB%8B%A4\" aria-label=\"구현 세부사항을 테스트하는 것은 리팩토링에 취약하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 세부사항을 테스트하는 것은 리팩토링에 취약하다</h3>\n<ul>\n<li><strong>거짓 음성, 거짓 양성</strong>\n<ul>\n<li>거짓 음성(False Negative) - 실패해야 하는 상황에서 성공하면 잘못된 코드를 발견하지 못하고 나중에 버그로 발견됨</li>\n<li>거짓 양성(False Positive) - 운영 코드가 변경되었을 때 테스트가 실패하지 앟는 경우</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://kentcdodds.com/blog/testing-implementation-details\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kent C Dodds.의 포스팅</a></p>\n<h3 id=\"qs-vs-urlsearchparams\" style=\"position:relative;\"><a href=\"#qs-vs-urlsearchparams\" aria-label=\"qs vs urlsearchparams permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>qs vs URLSearchParams</h3>\n<p><strong>qs</strong></p>\n<p>자바스크립트로 URL의 query string을 파싱하기 위해 사용한다.</p>\n<p>문자열 형태의 쿼리 스트링을 객체의 형태로 변환할 때, qs의 <code class=\"language-text\">parse()</code> 함수를 사용한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode=dark&amp;active=true&amp;nums=1&amp;nums=2&amp;nums=3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   mode: \"dark\",</span>\n<span class=\"token comment\">//   active: \"true\",</span>\n<span class=\"token comment\">//   nums: [\"1\", \"2\", \"3\"],</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<p>반대로 자바스크립트 객체 형태의 쿼리 스트링을 문자열로 변환하고 싶을 때는 <code class=\"language-text\">stringify()</code> 함수를 사용한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">active</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">nums</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"mode=dark&amp;active=true&amp;nums%5B0%5D=1&amp;nums%5B1%5D=2&amp;nums%5B2%5D=3\"</span></code></pre></div>\n<blockquote>\n<p>👩‍🏫 <code class=\"language-text\">qs</code> 라이브러리는 기본적으로 배열 값을 <code class=\"language-text\">파라미터명[인덱스]=값</code>의 형태로 변환한다.</p>\n</blockquote>\n<p>웹 표준 방식으로 동일한 파라미터명이 반복되게 하고 싶다면, 두 번째 인자로 arrayFormat 옵션의 값을 “repeat”로 주면 된다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">active</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">nums</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">arrayFormat</span><span class=\"token operator\">:</span> <span class=\"token string\">\"repeat\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"mode=dark&amp;active=true&amp;nums=1&amp;nums=2&amp;nums=3\"</span></code></pre></div>\n<blockquote>\n<p>qs의 `stringify()“ 함수는 복잡한 형태의 객체를 다룰 수 있다.</p>\n</blockquote>\n<p><strong>URLSearchParams</strong></p>\n<p>웹 표준 API에서 제공하는 <code class=\"language-text\">URLSearchParams</code>를 사용하여 좀 더 안전하게 쿼리 스트링을 다룰 수 있게 되었다.</p>\n<p><code class=\"language-text\">URLSearchParams</code> 객체의 생성자는 여러 형태의 값을 인자로 받을 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"draft\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>쿼리 스트링을 문자열의 형태로 넘길 수도 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?mode=dark&amp;page=1&amp;draft=false&amp;sort=email&amp;sort=date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">size</code> 속성으로 쿼리 스트링에 얼마나 많은 매개변수가 들어있는지 알 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode=dark&amp;page=1&amp;draft=false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>쿼리 객체들을 문자열로 변환할 때는 <code class=\"language-text\">toString()</code>을 사용한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"draft\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'mode=dark&amp;page=1&amp;draft=false'</span></code></pre></div>\n<p><code class=\"language-text\">append()</code> 메서드를 이용하여 쿼리 스트링의 파라미터를 하나씩 추가할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'mode=dark&amp;page=1'</span></code></pre></div>\n<p>객체에 저장되어 있는 값을 읽을 때는 <code class=\"language-text\">get()</code>과 <code class=\"language-text\">getAll()</code> 메서드를 사용한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'dark</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'dark' ]</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ '1' ]</span></code></pre></div>\n<p><code class=\"language-text\">URLSearchParams</code> 객체에 저장되어 있는 파라미터는 <code class=\"language-text\">for...of</code> 문법을 사용하여 쉽게 순회할 수 있습니다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> searchParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>URL 객체의 search 속성에는 쿼리 스트링이 문자열로 저장되어 있고, searchParams 속성에는 쿼리 스트링이 URLSearchParams 객체로 저장되어 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.org:8080/foo/bar?q=baz#bang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">;</span> <span class=\"token comment\">// '?q=baz'</span>\n\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">;</span> <span class=\"token comment\">// URLSearchParams {size: 1}</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'baz'</span>\n\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nurl<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/foo/bar?q=updated&amp;r=2&amp;r=false#bang'</span></code></pre></div>\n<p>함께 사용하면 유용하다! 😉</p>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://www.daleseo.com/qs-vs-query-string/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.daleseo.com/qs-vs-query-string/</a></li>\n<li><a href=\"https://www.daleseo.com/js-url-search-params/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.daleseo.com/js-url-search-params/</a></li>\n</ul>\n<h3 id=\"react-component를-조건부로-wrapping하여-렌더링하는-방법\" style=\"position:relative;\"><a href=\"#react-component%EB%A5%BC-%EC%A1%B0%EA%B1%B4%EB%B6%80%EB%A1%9C-wrapping%ED%95%98%EC%97%AC-%EB%A0%8C%EB%8D%94%EB%A7%81%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"react component를 조건부로 wrapping하여 렌더링하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react component를 조건부로 wrapping하여 렌더링하는 방법</h3>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ConditionalWrapper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> condition<span class=\"token punctuation\">,</span> wrapper<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  condition <span class=\"token operator\">?</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> children<span class=\"token punctuation\">;</span></code></pre></div>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ServiceCard</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConditionalWrapper</span></span>\n        <span class=\"token attr-name\">condition</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">wrapper</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">children</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>image<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ConditionalWrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://dev.to/dailydevtips1/conditional-wrapping-in-react-46o5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dev.to/dailydevtips1/conditional-wrapping-in-react-46o5</a></p>\n<h3 id=\"changeset-패키지의-pre-release-기능\" style=\"position:relative;\"><a href=\"#changeset-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%9D%98-pre-release-%EA%B8%B0%EB%8A%A5\" aria-label=\"changeset 패키지의 pre release 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>changeset 패키지의 pre-release 기능</h3>\n<ul>\n<li>pre 모드 시작\n<ul>\n<li><code class=\"language-text\">pnpm changeset pre enter {tag}</code></li>\n</ul>\n</li>\n<li>pre 모드 종료\n<ul>\n<li><code class=\"language-text\">pnpm changeset pre exit</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"quality-values\" style=\"position:relative;\"><a href=\"#quality-values\" aria-label=\"quality values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quality values</h3>\n<p>쉼표로 구분된 목록에서 값의 우선순위를 표현하는 방법 (일부 HTTP 헤더 및 HTML에서 사용)</p>\n<p>활용 예시</p>\n<ul>\n<li><code class=\"language-text\">Accept-Language: fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5</code></li>\n</ul>\n<p>부연설명</p>\n<ul>\n<li>접미사 <code class=\"language-text\">';q='</code> 바로 뒤에 0에서 1사이의 값</li>\n<li>최대 3자리의 소수점 숫자</li>\n<li>가장 높은 값이 제일 높은 우선순위\n<ul>\n<li>존재하지 않는 경우, 기본값은 1</li>\n</ul>\n</li>\n<li>‘q-values’ 또는 ‘q-factors’라고도 부른다</li>\n</ul>\n<h3 id=\"safe-area\" style=\"position:relative;\"><a href=\"#safe-area\" aria-label=\"safe area permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Safe Area</h3>\n<p>Safe Area란, (모바일 기기에서) 화면 구성요소를 표현하기에 안전한 영역을 의미한다.\nex. 상태바, 노치영역, (아이폰의) 하단 내비게이션 바 영역 등등</p>\n<p><strong>안드로이드</strong></p>\n<p>특별히 설정을 하지 않으면 대부분의 화면이 상태바 하단으로 잡히기 때문에 크게 신경쓸 일이 없다. 내비게이션 바는 애초에 화면 표시영역이 아니다.</p>\n<p><strong>아이폰</strong></p>\n<ul>\n<li>상/하단 모두 신경써야하는 경우가 있다.</li>\n<li>경우에 따라 iOS를 위한 (네이티브) UI 라이브러리는 표시영역과 상관없이 화면 구성요소 위치를 잡을 때 이를 고려해서 잡아주는 경우도 있다 (대표적으로, 네이버 지도 SDK에서 네이버 로고 아이콘 위치를 결정하는 로직)</li>\n<li>노치 디스플레이 여부를 파악하는 법 = 모델명으로 필터링한다\n<ul>\n<li>노치 디스플레이(혹은 다이나믹 아일랜드)가 있는 아이폰은 무조건 홈버튼이 없어서, 이 여부로 하단 패딩을 줘도 된다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Safe Area 영역을 파악하는 파악하는 법 (웹에서)</strong></p>\n<ul>\n<li>CSS의 <code class=\"language-text\">env(safe-area-inset-*)</code>으로 수치를 알 수 있다.\n<ul>\n<li>fallback 값을 함께 설정할 수도 있다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>아이폰 safe area inset의 대략적인 수치</strong></p>\n<ul>\n<li>\n<p>상단</p>\n<ul>\n<li>사각사각 디스플레이: 20 (상태바 영역정도)</li>\n<li>노치가 있는 경우: 44</li>\n<li>다이나믹 아일랜드: 59</li>\n</ul>\n</li>\n<li>\n<p>하단</p>\n<ul>\n<li>사각사각 디스플레이: 0</li>\n<li>나머지: 34</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"이것저것-모음집\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%83%EC%A0%80%EA%B2%83-%EB%AA%A8%EC%9D%8C%EC%A7%91\" aria-label=\"이것저것 모음집 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이것저것 모음집</h2>\n<hr>\n<ul>\n<li><code class=\"language-text\">keydown</code> 이벤트는 마우스클릭 뿐 아니라 tab할 때에도 트리거되기 때문에 조심해야 한다!</li>\n<li>IME(Input Method Editor): 키보드 자판의 글쇠(키 하나하나)보다 더 많은 조합이 필요한 언어(ex 한글, 한자)의 경우 문자를 계산, 조합해서 입력해주는 시스템 소프트웨어 - ㅌ, ㅗ, ㅣ, ㄱ, ㅡ, ㄴ -> 퇴근 으로 만들어주는 역할을 한다.</li>\n<li>storybook에 바로 vitest를 integrate 할 수 있는 addon(<a href=\"https://storybook.js.org/addons/storybook_vitest_addon/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ref</a>)</li>\n</ul>\n<h2 id=\"기타공유\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80%EA%B3%B5%EC%9C%A0\" aria-label=\"기타공유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타공유</h2>\n<hr>\n<h3 id=\"react-fiber\" style=\"position:relative;\"><a href=\"#react-fiber\" aria-label=\"react fiber permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Fiber</h3>\n<p>React Fiber는 React 코어 알고리즘의 진행중인 작업이다. React Fiber의 목표는 애니메이션, 레이아웃, 제스처 등에서 사용성을 높이는 것이다. 그 주요 기능은 <strong>점진적 렌더링</strong>인데, 이는 렌더링 작업을 청크로 나누고 여러 프레임에 걸쳐 실행하는 것이다. 다른 주요 기능은 새로운 업데이트가 발생했을 때 작업을 일시중지, 중단 또는 재사용할 수 있게 하는 것이며, 서로 다른 타입의 업데이트 항목들에 대해 우선순위를 부여하고 새로운 동시성 모드를 지원하는 것이다.</p>\n<blockquote>\n<p>더 이상 ‘virtual DOM’이라는 표현은 쓰지 않는다. 근본적인 컨셉은 비슷하지만, 이를 구현하는 React의 기술 코어가 지난 3년 사이에 조금 바뀐 것 같다!</p>\n</blockquote>\n<p>Fiber는 컴포넌트의 입/출력 정보들을 가지고 있는 자바스크립트 객체다. 하나의 fiber는 스택 프레임에 해당하며, 동시에 Component의 인스턴스에 해당되기도 한다.</p>\n<p><strong>Fiber에 해당하는 중요한 항목들</strong></p>\n<ul>\n<li><code class=\"language-text\">type</code>과 <code class=\"language-text\">key</code> - Fiber의 type과 key는 React 요소에 있어 그것과 같은 목적을 갖는다. (실제로 React 요소로부터 fiber가 생성될 때, 이 두 필드는 복사되어 전달된다). Fiber의 type은 그것이 상응하는 컴포넌트를 가리킨다. type과 함께, key는 fiber가 재사용될 수 있는지를 판별하기 위해 재조정 중에 사용된다.</li>\n<li><code class=\"language-text\">child</code>와 <code class=\"language-text\">sibling</code> - 이 필드들은 다른 fiber를 대상으로 하며, fiber의 재귀적 트리 구조를 가리킨다. 자식 fiber(a child fiber)는 컴포넌트의 render 함수가 반환하는 값에 해당한다. Sibling field는 render 함수가 여러개의 자식을 반환할 때 설명된다</li>\n<li><code class=\"language-text\">return</code> - return fiber는 현재 항목을 수행한 후 프로그램이 반환해야 하는 정보를 담고 있는 fiber다.</li>\n<li><code class=\"language-text\">pendingProps</code>와 <code class=\"language-text\">memoizedProps</code> - Fiber의 pendingProps는 함수의 실행 처음에 설정되고, memoizedProps는 실행 마지막에 설정된다. 들어오는 pendingProps가 memoizedProps와 같으면, 이걸 통해 fiber에게 이전 출력물이 재사용될 수 있음을 알리고, 불필요한 작업을 방지할 수 있다.</li>\n<li><code class=\"language-text\">pendingWorkPriority</code> - Fiber 작업의 우선 순위를 나타내는 숫자. ReactPriorityLevel (관련 설명 현재 삭제됨) 모듈은 다른 우선 순위 수준과 각각의 의미를 나열한다.</li>\n<li><code class=\"language-text\">alternate</code>\n<ul>\n<li>flush - fiber를 flush하는 것은 그 결과를 화면에 나타내는 것이다.</li>\n<li>work-in-progress - 아직 완료되지 않은 fiber. 개념상으로 아직 반환되지 않은 스택 프레임을 의미한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">output</code>\n<ul>\n<li>host component - React 애플리케이션의 리프 노드. 렌더링 환경에 특정지어진다.</li>\n<li>모든 fiber는 결국 출력값을 갖지만 출력값은 host component를 통해 리프 노드에서만 생성된다.</li>\n<li>출력값은 rendering 환경에서 변경사항들을 flush 할 수 있게 렌더러에 전달되는 것이다. 출력물이 어떻게 생성되고 업데이트될지 결정하는 것은 렌더러의 역할이다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/acdlite/react-fiber-architecture</a></li>\n<li>(번역) <a href=\"https://immigration9.github.io/react/2021/05/29/react-fiber-architecture.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://immigration9.github.io/react/2021/05/29/react-fiber-architecture.html</a></li>\n<li><a href=\"https://d2.naver.com/helloworld/2690975\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://d2.naver.com/helloworld/2690975</a></li>\n</ul>\n<h3 id=\"특정-브라우저에-필요한-polyfill을-찾아주는-서비스\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A0%95-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-polyfill%EC%9D%84-%EC%B0%BE%EC%95%84%EC%A3%BC%EB%8A%94-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-label=\"특정 브라우저에 필요한 polyfill을 찾아주는 서비스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특정 브라우저에 필요한 polyfill을 찾아주는 서비스</h3>\n<p><strong>Ref</strong> <a href=\"https://polyfill.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://polyfill.io/</a></p>\n<h3 id=\"타입스크립트를-지원하는-tanstack-router\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-tanstack-router\" aria-label=\"타입스크립트를 지원하는 tanstack router permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트를 지원하는 Tanstack Router</h3>\n<p>react-router와 크게 다르지 않은 인터페이스를 제공하면서, 타입스크립트를 기본 지원하여 라우팅에도 타입 안정성을 제공한다.</p>\n<ul>\n<li><code class=\"language-text\">RootRoute</code> - root route를 생성한다.</li>\n<li><code class=\"language-text\">Outlet</code> - 잠재적으로 매칭될 자식 route들을 렌더하기 위해 사용된다. (현재 URL과 매칭될 경우)</li>\n<li><code class=\"language-text\">Route</code> - 자식 route들은 <code class=\"language-text\">getParentRoute</code> 메서드로 부모로부터 타입 정보와 런타임 정보를 받는다. 이를 통해 route 정의부의 타입 안정성을 보장하고, 순환 참조나 인스턴스화되지 않은 변수 등의 문제를 예방할 수 있다.\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> rootRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RootRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> indexRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">getParentRoute</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> rootRoute<span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> blogRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">getParentRoute</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> rootRoute<span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'blog'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> postRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">getParentRoute</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> blogRoute<span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'$slug'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>모든 route들이 생성되면, <code class=\"language-text\">rootRoute.addChildren([...])</code>과 <code class=\"language-text\">route.addChildren([...])</code>으로 route tree를 생성할 수 있다.</li>\n<li>Router Type 등록 - 타입스크립트의 선언 병합을 사용하여 router의 타입을 재정의할 수 있다.\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'@tanstack/react-router'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Register</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This infers the type of our router and registers it across your entire project</span>\n    router<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> router\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>완성된 모습!</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RootRoute<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Router <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-router'</span>\n\n<span class=\"token keyword\">let</span> rootRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RootRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> indexRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">getParentRoute</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> rootRoute<span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> blogRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">getParentRoute</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> rootRoute<span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'blog'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> postRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">getParentRoute</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> blogRoute<span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'$slug'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> routeTree <span class=\"token operator\">=</span> rootRoute<span class=\"token punctuation\">.</span><span class=\"token function\">addChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  indexRoute<span class=\"token punctuation\">,</span>\n  blogRoute<span class=\"token punctuation\">.</span><span class=\"token function\">addChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>postRoute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> routeTree <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'@tanstack/react-router'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Register</span> <span class=\"token punctuation\">{</span>\n    router<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> router\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Ref</strong> <a href=\"https://tanstack.com/router/v1/docs/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tanstack.com/router/v1/docs/overview</a></p>\n<h3 id=\"2023-javascript-rising-stars\" style=\"position:relative;\"><a href=\"#2023-javascript-rising-stars\" aria-label=\"2023 javascript rising stars permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2023 JavaScript Rising Stars</h3>\n<ul>\n<li>Bun이 정말 인기와 관심이 많구나!</li>\n<li>Excalidraw, tldraw 등을 잘 활용하여 코드 아키텍처를 설명해보고 싶다.</li>\n<li>Supabase 이름도 맘에 든다. 수년 전 잘 사용했던 Firebase만큼 기대된다.</li>\n<li>Drizzle ORM도 이름 맘에 든다. Edge Runtime에서도 사용할 수 있다고?</li>\n<li>HTMX은 문법 신기하면서도 호기심이 생긴다.</li>\n</ul>\n<p><strong>Ref</strong> <a href=\"https://www.frontoverflow.com/magazine/3/2023%20JavaScript%20Rising%20Stars\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.frontoverflow.com/magazine/3/2023%20JavaScript%20Rising%20Stars</a></p>\n<h3 id=\"gcp-타-플랫폼-마이그레이션-비용-제거\" style=\"position:relative;\"><a href=\"#gcp-%ED%83%80-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%EB%B9%84%EC%9A%A9-%EC%A0%9C%EA%B1%B0\" aria-label=\"gcp 타 플랫폼 마이그레이션 비용 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GCP, 타 플랫폼 마이그레이션 비용 제거</h3>\n<p>타 플랫폼에도 압력이 될 수도 있다고(?)</p>\n<p><strong>Ref</strong> <a href=\"https://cloud.google.com/blog/products/networking/eliminating-data-transfer-fees-when-migrating-off-google-cloud?hl=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cloud.google.com/blog/products/networking/eliminating-data-transfer-fees-when-migrating-off-google-cloud?hl=en</a></p>\n<h3 id=\"中-50년-작동하는-동전-크기-원자력-전지\" style=\"position:relative;\"><a href=\"#%E4%B8%AD-50%EB%85%84-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94-%EB%8F%99%EC%A0%84-%ED%81%AC%EA%B8%B0-%EC%9B%90%EC%9E%90%EB%A0%A5-%EC%A0%84%EC%A7%80\" aria-label=\"中 50년 작동하는 동전 크기 원자력 전지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>中 50년 작동하는 동전 크기 원자력 전지</h3>\n<p>중국 한 기업에서, 100mW 출력의 수명 50년짜리 원자력 전지를 동전보다 작은 크기로 소형화 및 모듈화 하는 데에 성공했다고 주장 및 특허 출원 신청 중.\n(주장이 사실이라면 기존의 어지간한 모바일 기기는 거뜬하고, 현대 인공위성이나 가전 등에도 무리없이 사용 가능)</p>\n<p>이르면 25년 제품화가 가능할 것이라고 주장.</p>\n<p>세기의 도박이라던 전지 혁명은 어떻게 될 것인가…</p>\n<p><strong>Ref</strong> <a href=\"https://techrecipe.co.kr/posts/61854\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://techrecipe.co.kr/posts/61854</a></p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<hr>\n<p>12월 모든 약속이 1월로 밀려 완전 정신없는 한 주였다 🫠</p>\n<p>주말엔 찜질방 가서 힐링도 하고, 입주 두 달 차 대청소도 하고</p>\n<p>알차게 보내고 있는 1월이다</p>","timeToRead":13,"frontmatter":{"title":"1월 2주차 기록","date":"January 13, 2024","description":"불꽃같이 달리기 시작 🔥","tags":["weekly"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/weekly/2024-1-week-2/","previous":null,"next":{"fields":{"slug":"/weekly/2024-1-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 06, 2024","description":"아직 조금 낯선 새해 첫 주","title":"1월 첫주차 기록","tags":["weekly"]}},"previousInSameTag":null,"nextInSameTag":{"fields":{"slug":"/weekly/2024-1-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 06, 2024","description":"아직 조금 낯선 새해 첫 주","title":"1월 첫주차 기록","tags":["weekly"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}