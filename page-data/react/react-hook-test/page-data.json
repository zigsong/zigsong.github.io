{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/react-hook-test/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"9b7b1c14-72d0-5aa3-ae5e-52a554c6e5f6","excerpt":"react hook test custom hook으로 작성한 react query의 동작을 테스트하기 위해 react-hooks-testing-library를 사용했다. 기본적으로 이라는 메서드를 제공하여, hook 테스트를 위해 별도의 컴포넌트를 작성하여 hook…","html":"<p>react hook test</p>\n<!-- more -->\n<hr>\n<p>custom hook으로 작성한 react query의 동작을 테스트하기 위해 <strong>react-hooks-testing-library</strong>를 사용했다. 기본적으로 <code class=\"language-text\">renderHook</code>이라는 메서드를 제공하여, hook 테스트를 위해 별도의 컴포넌트를 작성하여 hook을 호출할 필요가 없다. 내부적으로 HTTP request를 사용하는 hook이나, 복잡한 컴포넌트 로직 내에서 동작하는 hook의 경우에 <strong>react-hooks-testing-library</strong>를 사용하여 간단하게 테스트를 진행해볼 수 있다.</p>\n<p><code class=\"language-text\">renderHook</code>에 테스트하고자 하는 hook 함수를 넘겨주고, 반환값인 <code class=\"language-text\">result</code>를 이용하여 hook 호출의 성공 여부(<code class=\"language-text\">isSuccess</code>)와 반환된 데이터(<code class=\"language-text\">data</code>)를 검사한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderHook <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react-hooks\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useRecentFeeds 테스트\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"최신 피드를 불러올 수 있다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> result<span class=\"token punctuation\">,</span> waitFor <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">renderHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">useRecentFeeds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filter<span class=\"token operator\">:</span> FilterType<span class=\"token punctuation\">.</span><span class=\"token constant\">PROGRESS</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> result<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>isSuccess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>mockFeeds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>hook 실행 후 일정 시간이 지나야 통과되는 비동기적인 실행이라면, <code class=\"language-text\">renderHook</code>에서 반환되는 <code class=\"language-text\">waitForNextUpdate</code> 함수를 통해 hook 내부 로직에서 변화가 발생하는 시점까지 기다린 후 <code class=\"language-text\">expect</code>문을 실행할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderHook <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react-hooks\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"useOAuthLogin 테스트\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"github으로부터 액세스 토큰을 받아올 수 있다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> waitForNextUpdate <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">renderHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useOAuthLogin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"github\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">waitForNextUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"google로부터 액세스 토큰을 받아올 수 있다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> waitForNextUpdate <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">renderHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useOAuthLogin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"google\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">waitForNextUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트에 사용된 hook들은 모두 서버 데이터를 가져오는 react query 코드였는데, 이때 <a href=\"https://mswjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">msw(mock-service-worker)</a>를 이용하여 실제 서버로 가는 요청을 가로채 지정한 응답을 반환해줬다. 실제 서버는 언제든지 터지거나 사이드 이펙트가 발생할 수 있기 때문에, 서버를 mocking하여 기대하는 결과값이 나오는지 검사해준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">rest<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">.</span>production<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/login/oauth/:type/token</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      accessToken<span class=\"token operator\">:</span> <span class=\"token string\">'mock-access-token-abc-123'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>이밖에도 <code class=\"language-text\">act</code> 함수를 통해 hook 내부에 정의한 함수를 실행시켜줄 수도 있으며, <code class=\"language-text\">renderHook</code>에 전달되는 hook에 인자를 넘겨줄 수도 있다. 여러모로 유용하게 hook test를 작성할 수 있다!</p>\n<hr>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://react-query.tanstack.com/guides/testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://react-query.tanstack.com/guides/testing</a></li>\n<li><a href=\"https://react-hooks-testing-library.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://react-hooks-testing-library.com/</a></li>\n<li><a href=\"https://kentcdodds.com/blog/how-to-test-custom-react-hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kentcdodds.com/blog/how-to-test-custom-react-hooks</a></li>\n<li><a href=\"https://testing-library.com/docs/react-testing-library/example-intro/#mock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://testing-library.com/docs/react-testing-library/example-intro/#mock</a></li>\n<li><a href=\"https://mswjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mswjs.io/</a></li>\n</ul>","timeToRead":2,"frontmatter":{"title":"리액트 훅 테스트","date":"August 01, 2021","description":null,"tags":["frontend"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/react/react-hook-test/","previous":{"fields":{"slug":"/typescript/typescript-type-guard/","langKey":"en","directoryName":"typescript"},"frontmatter":{"date":"August 01, 2021","description":null,"title":"타입스크립트 타입 가드","tags":["typescript"]}},"next":{"fields":{"slug":"/wtc/wtc-week-25/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"July 25, 2021","description":null,"title":"우테코 25주차 기록","tags":["woowacourse"]}},"previousInSameTag":{"fields":{"slug":"/frontend/fe-performance-measurement/","langKey":"en","directoryName":"frontend"},"frontmatter":{"date":"August 14, 2021","description":null,"title":"프론트엔드 성능 분석 & 기본 성능 개선","tags":["frontend"]}},"nextInSameTag":{"fields":{"slug":"/react/react-query-debounce/","langKey":"en","directoryName":"react"},"frontmatter":{"date":"July 24, 2021","description":null,"title":"react query에서 debounce 쓰기","tags":["frontend"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}