{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/swr-vs-react-query/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"22110a15-513e-5ac7-aafc-c1f666fe2f0c","excerpt":"…","html":"<h2 id=\"리액트에서-서버-상태-관리\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EC%84%9C%EB%B2%84-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"리액트에서 서버 상태 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트에서 서버 상태 관리</h2>\n<hr>\n<p>전설적으로 리액트에서 서버 상태 관리는 어렵다.</p>\n<p>당연하다. 프론트엔드 라이브러리에서 어떻게 서버 상태 관리까지 하란 말이냐?</p>\n<p>하지만 서버 데이터 없는 프론트엔드는 그냥 팥 없는 붕어빵…</p>\n<p>어쩔 수 없이 프론트엔드 개발자가 고생해서 서버 데이터를 잘 받아와서 관리해야 한다.</p>\n<h2 id=\"swr-인트로\" style=\"position:relative;\"><a href=\"#swr-%EC%9D%B8%ED%8A%B8%EB%A1%9C\" aria-label=\"swr 인트로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SWR 인트로</h2>\n<hr>\n<p>Stale-While-Revalidate라는 뜻으로, 서치가 조금 까다롭다;;</p>\n<p>역시 책이든 아이돌 이름이든 라이브러리든 뭐든 이름으로 어그로를 끌어야 하는데.</p>\n<p>발음도 안 감기고 그닥인 것 같다.</p>\n<p>Next.js에서 만들었다.</p>\n<p>swr은 <strong>먼저 캐시에서 데이터를 반환한 다음, 서버에 데이터를 가져오는 요청을 보내고, 마지막으로 최신 데이터를 제공하는 전략</strong>을 사용한다.</p>\n<p>그리고, 데이터를 전역 상태로 관리한다는 특징이 있다.</p>\n<h2 id=\"react-query-인트로\" style=\"position:relative;\"><a href=\"#react-query-%EC%9D%B8%ED%8A%B8%EB%A1%9C\" aria-label=\"react query 인트로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query 인트로</h2>\n<hr>\n<p>나 취준할 때까지만 해도 그냥 <code class=\"language-text\">react-query</code>였는데… tanstack 아저씨가 유명해지고 싶었나. 언젠가부터 <code class=\"language-text\">@tanstack/react-query</code>로 이름이 바뀜.</p>\n<p>당연히 별로다. 이름이 좀 간지났으면 몰라도. 그런데 어쩌겠냐.</p>\n<p>유명해져라! 그러면 똥을 싸도 박수를 쳐줄 것이다…</p>\n<p>react-query는 <strong>서버 상태를 가져오고, 캐싱하고, 동기화하고, 업데이트</strong>하는 순서대로 서버 상태를 관리한다.</p>\n<p>swr과는 달리 애플리케이션 루트에서 <code class=\"language-text\">Provider</code>로 감싸 조금 더 디테일한, 커스텀한 캐싱 전략을 제공한다.</p>\n<blockquote>\n<p>→ React Query는 보다 전반적인 서버 상태 관리에 중점을 두고 있고, SWR은 사용자 경험을 위해 빠르고 최신 상태의 데이터를 제공하는 데 중점을 둔다.</p>\n</blockquote>\n<p>이제… <del>(내가 궁금했던 것들 위주로)</del> 구체적으로 알아보자.</p>\n<h2 id=\"캐시를-관리하는-방법\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9C%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"캐시를 관리하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐시를 관리하는 방법</h2>\n<hr>\n<p>swr은 전역 캐시를 자동으로 관리하며, 별도의 <code class=\"language-text\">Provider</code> 없이도 캐시를 전역적으로 사용할 수 있도록 설계되다. swr의 캐시는 <strong>전역적인 컨텍스트</strong>에 저장되며, 사용자가 별도로 설정할 필요가 없다. swr 훅을 사용하는 컴포넌트들끼리는 내부적으로 동일한 키를 공유하는 경우 동일한 데이터를 캐시에서 자동으로 가져온다.</p>\n<p>반면에 react-query는 더 복잡한 캐시 관리 기능을 제공한다. react-query에서는 캐시의 범위나 캐시 제공자 등을 더 세밀하게 제어할 수 있게 하기 위해 <code class=\"language-text\">QueryClient</code>와 같은 설정을 <code class=\"language-text\">Provider</code>로 전달할 수 있는 구조를 사용한다. 다양한 상황에서 전역 상태를 제어하거나, 서로 다른 <code class=\"language-text\">QueryClient</code>를 사용해야 하는 경우 유용하다.</p>\n<blockquote>\n<p>⚠️ 그러나 실제로 여러 개의 서로 다른 <code class=\"language-text\">QueryClient</code>를 사용하는 방식은 권장되지 않는다. ^^</p>\n</blockquote>\n<p>두 라이브러리는 서버 데이터를 바라보는 시각이 조금 다른데,</p>\n<p>react-query는 상태를 서버 상태와 클라이언트 상태로 구분한다. 반면 swr은 서버에서 데이터를 받아와 데이터를 클라이언트에서 전역 상태로 업데이트하는 것으로 본다.</p>\n<h2 id=\"데이터-로딩-상태\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%A1%9C%EB%94%A9-%EC%83%81%ED%83%9C\" aria-label=\"데이터 로딩 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 로딩 상태</h2>\n<p>react-query와 swr이 상태를 바라보는 시각이 조금 다르듯, 상태를 관리하는 법도 조금씩 다르다.</p>\n<p>react-query는 <code class=\"language-text\">isLoading</code>, <code class=\"language-text\">isFetching</code>을 통해 데이터의 상태를 보여준다.</p>\n<p>두 가지는 비슷해 보이는데, <code class=\"language-text\">isLoading</code>은 <strong>캐시된 데이터조차 없이, 처음 실행된 쿼리</strong> 일 때 데이터 로딩 여부를 보여준다는 점이 <code class=\"language-text\">isFetching</code>과 다르다.</p>\n<p>swr에도 <code class=\"language-text\">isLoading</code>과 비슷한 듯 다른 <code class=\"language-text\">isValidating</code> 값을 제공한다.</p>\n<p>swr의 <code class=\"language-text\">isLoading</code>은 데이터가 로드되지 않은 상태에서 현재 진행중인 요청이 있는지를 나타내는, 반면 <code class=\"language-text\">isValidating</code>은 데이터의 로드 여부 상관없이 현재 진행중인 요청이 있는지를 나타낸다.</p>\n<p>개인적으로 <code class=\"language-text\">isValidating</code>이라는 이름에서 드러나듯, swr은 <strong>stale한 데이터의 갱신</strong> 여부에 조금 더 초점이 맞춰져 있는 것 같다.</p>\n<h2 id=\"mutation\" style=\"position:relative;\"><a href=\"#mutation\" aria-label=\"mutation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mutation</h2>\n<hr>\n<p>흔히들 react-query에서 mutation은 서버 데이터를 업데이트하는 요청으로 알고 있다.</p>\n<p>예를 들면 <code class=\"language-text\">POST</code>나 <code class=\"language-text\">DELETE</code> 같은 요청들…</p>\n<p>기본 query와는 달리 서버 데이터에 변경이 있기 때문에 <code class=\"language-text\">useQuery</code>와는 조금 다른 기능들을 제공하는 <code class=\"language-text\">useMutation</code>을 통해 작성한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useMutation<span class=\"token punctuation\">,</span> useQueryClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">newProfile</span> <span class=\"token operator\">=></span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user/update'</span><span class=\"token punctuation\">,</span> newProfile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 요청 성공 시 캐시 무효화</span>\n        queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Profile</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'New Name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Update Profile\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>완전 깔끔&#x26;쌈뽕… <code class=\"language-text\">onSuccess</code>, <code class=\"language-text\">onSettled</code> 등의 옵션도 제공하여 손쉽게 서버의 최신 데이터로 캐시를 업데이트까지 할 수 있다.</p>\n<p>그러다가 swr을 보면서 알게 된 충격적인 사실. <strong>swr은 mutation을 제공하지 않는다?</strong></p>\n<p>swr은 기본적으로 <code class=\"language-text\">GET</code> 요청을 처리하는 데 최적화되어 있으며, mutation을 위한 별도의 훅이 제공되지 않(았었)다. 이 이유는 앞서 언급한 것과 같이, 데이터를 ‘받아오는 것’에 중점을 두고 있기 때문이기도 하다.</p>\n<p>따라서 데이터를 변경하는 작업(앞서 언급한 <code class=\"language-text\">POST</code>, <code class=\"language-text\">DELETE</code> 등)은 수동으로 처리해야 하며, 그 후 변경된 데이터를 다시 페칭하거나 캐시를 업데이트해야 했다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> useSWR <span class=\"token keyword\">from</span> <span class=\"token string\">'swr'</span>\n \n<span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> mutate <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSWR</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user'</span><span class=\"token punctuation\">,</span> fetcher<span class=\"token punctuation\">)</span>\n \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">My name is </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newName <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">requestUpdateUsername</span><span class=\"token punctuation\">(</span>newName<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 👇 직접 서버 데이터 업데이트</span>\n        <span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>data<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> newName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Uppercase my name!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">mutate</code>의 정확한 동작은, 서버 상태를 업데이트시키는 것이 아니라, <strong>해당 key를 사용하는 <code class=\"language-text\">useSWR</code>의 캐시를 업데이트</strong> 시켜주는 것이다. 그래서 <code class=\"language-text\">mutate</code>로 캐시를 최신화했다 할지라도, 서버의 데이터를 최신화시키지 않았다면 여전히 캐시에는 업데이트 이전 데이터가 남아있을 수 있다. ;;</p>\n<p>전역으로 mutator를 사용하려면 <code class=\"language-text\">useSWRConfig</code>를 사용하는 방법도 있었다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSWRConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"swr\"</span>\n \n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mutate <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSWRConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러나 이와 같은 코드 작성 방식에 수많은 개발자들의 봉기가 있었던 탓인지 <code class=\"language-text\">useSWRMutation</code>이라는 훅을 내놓긴 했다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> useSWRMutation <span class=\"token keyword\">from</span> <span class=\"token string\">'swr/mutation'</span>\n \n<span class=\"token keyword\">function</span> <span class=\"token function\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSWR</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user'</span><span class=\"token punctuation\">,</span> fetcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// useSWRMutation 훅으로 mutation 처리</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> trigger<span class=\"token punctuation\">,</span> isMutating <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSWRMutation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user/update'</span><span class=\"token punctuation\">,</span> updateProfile<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 성공 시 데이터 갱신</span>\n      <span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> \n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'New Name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> \n        <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isMutating<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>isMutating <span class=\"token operator\">?</span> <span class=\"token string\">'Updating...'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Update Profile'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">isMutating</code>과 같은 상태값 및 <code class=\"language-text\">onSuccess</code>등의 후속 조치를 위한 옵션이 추가된 것 같다.\n암튼 열심히 react-query의 <code class=\"language-text\">useMutation</code>을 따라한 것 같아… 왠지 짜쳐.</p>\n<h2 id=\"성능-최적화\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"성능 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능 최적화</h2>\n<hr>\n<p>swr은 내장 캐싱과 중복 제거 기능을 사용하여 불필요한 네트워크 요청을 생략한다.</p>\n<p>동일한 swr key를 가지는 컴포넌트가 여러번 렌더링된다면 단 한 번의 네트워크 요청만 발생한다.</p>\n<p>또 데이터의 깊은 비교를 통해 <code class=\"language-text\">data</code>가 변경되지 않았다면 리렌더링을 하지 않는다. (<code class=\"language-text\">compare</code> 옵션으로 커스터마이징할 수도 있다.)</p>\n<p>react-query 역시 기본적으로 swr과 같은 렌더링 최적화 방식을 내장하고 있다. 그리고 실제로 <code class=\"language-text\">useQuery</code>의 반환값이 사용되었을 때만 컴포넌트를 리렌더링한다는 점에서 조금 더 섬세한 최적화를 수행한다.</p>\n<p>여기에 추가적으로 react-query는 <code class=\"language-text\">notifyOnChangeProps</code>와 <code class=\"language-text\">'tracked'</code> 옵션 등을 통해 조금 더 섬세하게 데이터의 변경에 따른 리렌더링 여부를 커스텀할 수 있다.</p>\n<p>오랜 시간을 거쳐 진화하더니 좀… 변태스러워졌다 😨</p>\n<p>두 라이브러리 중 어떤 것이 월등히 성능 최적화가 더 낫다고 하긴 어렵지만,</p>\n<p>기본적인 렌더링 최적화 등은 두 라이브러리에서 모두 지원하므로 조금 더 디테일한 렌더링 시점을 조절하고 싶다면, 커스터마이징이 더 다양한 react-query를 쓰는 것도 좋을 듯 하다.</p>\n<h2 id=\"그래서-뭘-써야-하는가\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%AD%98-%EC%8D%A8%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"그래서 뭘 써야 하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 뭘 써야 하는가?</h2>\n<hr>\n<p>와 같은 질문은 나에게 너무 어려워…</p>\n<p>모든 기술 블로거들과 챗GPT가 말하듯,</p>\n<blockquote>\n<ul>\n<li>단순한 데이터 페칭 및 캐싱이 필요한 프로젝트 -> swr</li>\n<li>복잡한 비동기 상태 관리나 더 많은 최적화 기능이 필요하다면 -> react-query</li>\n</ul>\n</blockquote>\n<p>가 맞는 것 같다.</p>\n<p>하지만 또 다른 많은 기술 블로거들과 기업들에서 그러듯…</p>\n<p>swr을 선택하더라도 결국 시간이 지나 react-query로 넘어가게 되는 것 같다. 😇</p>\n<h2 id=\"refs\" style=\"position:relative;\"><a href=\"#refs\" aria-label=\"refs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refs</h2>\n<hr>\n<ul>\n<li><a href=\"https://swr.vercel.app/ko\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://swr.vercel.app/ko</a></li>\n<li><a href=\"https://tanstack.com/query/v5/docs/framework/react/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tanstack.com/query/v5/docs/framework/react/overview</a></li>\n<li><a href=\"https://tkdodo.eu/blog/react-query-render-optimizations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tkdodo.eu/blog/react-query-render-optimizations</a></li>\n<li><a href=\"https://yoonhaemin.com/tag/technical-thinking/react-query-vs-swr/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://yoonhaemin.com/tag/technical-thinking/react-query-vs-swr/</a></li>\n</ul>","timeToRead":6,"frontmatter":{"title":"swr vs react-query","date":"October 11, 2024","description":"swr과 react-query 내가 궁금한 것만 비교 분석하기","tags":["react","main"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/react/swr-vs-react-query/","previous":{"fields":{"slug":"/weekly/2024-10-week-1-2/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 13, 2024","description":"이제 연휴 끝...","title":"10월 1-2주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2024-9-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"September 27, 2024","description":"순삭된 9월","title":"9월 4주차 기록","tags":["weekly"]}},"previousInSameTag":null,"nextInSameTag":{"fields":{"slug":"/react/same-setstate/","langKey":"en","directoryName":"react"},"frontmatter":{"date":"August 04, 2024","description":"React state를 같은 값으로 업데이트했을 때","title":"React 리렌더링 삐그덕 삐그덕","tags":["react","main"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}