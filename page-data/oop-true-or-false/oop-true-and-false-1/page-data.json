{"componentChunkName":"component---src-templates-blog-post-js","path":"/oop-true-or-false/oop-true-and-false-1/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"bf7e39e9-0b12-5cb4-95da-d06c50ca0906","excerpt":"…","html":"<p>협력하는 객체들의 공동체</p>\n<!-- more -->\n<hr>\n<p>객체지향의 목표는 실세계를 모방하는 것이 아니라 새로운 세계를 창조하는 것이다. 단순히 실세계를 소프트웨어 안으로 옮겨 담는 것이 아니라 고객과 사용자를 만족시킬 수 있는 신세계를 창조하는 것이다</p>\n<hr>\n<h2 id=\"협력하는-사람들\" style=\"position:relative;\"><a href=\"#%ED%98%91%EB%A0%A5%ED%95%98%EB%8A%94-%EC%82%AC%EB%9E%8C%EB%93%A4\" aria-label=\"협력하는 사람들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>협력하는 사람들</h2>\n<ul>\n<li>커피 공화국의 아침\n<ul>\n<li>카페테리어에서 커피를 주문하고 받는 과정에는 손님, 캐시어, 바리스타 사이의 암묵적인 <strong>협력</strong> 관계가 존재한다</li>\n<li>커피 주문이라는 협력에 참여하는 모든 사람들은 각자 맡은 바 <strong>역할</strong>과 <strong>책임</strong>을 다하고 있다</li>\n</ul>\n</li>\n<li>요청과 응답으로 구성된 협력\n<ul>\n<li>사람들은 문제 해결에 필요한 지식을 알고 있거나 서비스를 제공해줄 수 있는 사람에게 도움을 <strong>요청</strong>한다</li>\n<li>요청은 연쇄적으로 발생한다</li>\n<li>요청을 받은 사람은 주어진 책임을 다하면서 필요한 지식이나 서비스를 제공, 즉 요청에 <strong>응답</strong>한다</li>\n<li>우리는 <strong>요청</strong>과 <strong>응답</strong>을 통해 다른 사람과 <strong>협력</strong>하여 문제를 해결한다</li>\n</ul>\n</li>\n<li>역할과 책임\n<ul>\n<li><strong>역할</strong>은 협력 안에서 차지하는 책임이나 임무를 의미한다</li>\n<li>특정한 역할은 특정한 <strong>책임</strong>을 암시한다</li>\n<li>사람들은 협력을 위해 특정한 역할을 맡고 역할에 적합한 책임을 수행한다\n<ul>\n<li>여러 사람이 동일한 역할을 수행할 수 있다</li>\n<li>역할은 대체 가능성을 의미한다</li>\n<li>책임을 수행하는 방법은 자율적으로 선택할 수 있다 (<strong>다형성</strong>)</li>\n<li>한 사람이 동시에 여러 역할을 수행할 수 있다</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"역할-책임-협력\" style=\"position:relative;\"><a href=\"#%EC%97%AD%ED%95%A0-%EC%B1%85%EC%9E%84-%ED%98%91%EB%A0%A5\" aria-label=\"역할 책임 협력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>역할, 책임, 협력</h2>\n<ul>\n<li>기능을 구현하기 위해 협력하는 객체들\n<ul>\n<li>사람 - <strong>객체</strong></li>\n<li>에이전트의 요청 - <strong>메시지</strong></li>\n<li>에이전트가 요청을 처리하는 방법 - <strong>메서드</strong></li>\n</ul>\n</li>\n<li>역할과 책임을 수행하며 협력하는 객체들\n<ul>\n<li>협력에 참여하는 각 개인은 책임을 수행하기 위해 다른 사람에게 도움을 요청하기도 하며, 이를 통해 연쇄적인 요청과 응답으로 구성되는 협력 관계가 완성된다</li>\n<li>애플리케이션의 기능은 더 작은 책임으로 분할되고 책임은 적절한 역할을 수행할 수 있는 객체에 의해 수행된다\n<ul>\n<li><strong>적절한 객체에게 적절한 책임을 할당해야 한다</strong></li>\n</ul>\n</li>\n<li><strong>역할</strong>은 관련성 높은 책임의 집합이다</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"협력-속에-사는-객체\" style=\"position:relative;\"><a href=\"#%ED%98%91%EB%A0%A5-%EC%86%8D%EC%97%90-%EC%82%AC%EB%8A%94-%EA%B0%9D%EC%B2%B4\" aria-label=\"협력 속에 사는 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>협력 속에 사는 객체</strong></h2>\n<ul>\n<li>\n<p>협력 공동체의 일원으로서 객체는 다음 두 가지 덕목을 갖춰야 한다</p>\n<ol>\n<li><strong>객체는 충분히 ‘협력적’이어야 한다</strong></li>\n</ol>\n<ul>\n<li>객체는 다른 객체의 명령에 복종하는 것이 아니라 요청에 응답할 뿐이며, 어떤 방식으로 응답할지는 객체 스스로 판단하고 결정한다</li>\n</ul>\n<ol start=\"2\">\n<li><strong>객체는 충분히 ‘자율적’이어야 한다</strong></li>\n</ol>\n<ul>\n<li>객체들은 공동의 목표를 달성하기 위해 협력에 참여하지만 자신의 행동을 스스로 결정하고 책임진다</li>\n</ul>\n</li>\n<li>\n<p>상태와 행동을 함께 지닌 자율적인 객체</p>\n<ul>\n<li>객체는 협력에 참여하기 위해 어떤 <strong>행동</strong>을 해야 하고, 그 행동을 하는 데 필요한 <strong>상태</strong>도 함께 지니고 있다.</li>\n<li>객체는 객체의 내부와 외부를 명확하게 구분하여 <strong>자율성</strong>을 갖춘다.</li>\n<li>객체지향 개발에서는 <strong>데이터</strong>와 <strong>프로세스</strong>를 객체라는 하나의 틀 안에 함께 묶어 놓음으로써 객체의 자율성을 보장한다</li>\n</ul>\n</li>\n<li>\n<p>협력과 메시지</p>\n<ul>\n<li>객체지향의 세계에서는 오직 한 가지 의사소통 수단인 **‘메시지’**를 이용한다</li>\n<li>객체는 협력을 위해 다른 객체에게 메시지를 전송하고 다른 객체로부터 메시지를 수시한다</li>\n</ul>\n</li>\n<li>\n<p>메서드와 자율성</p>\n<ul>\n<li>\n<p>메서드</p>\n<p>- 객체가 수신된 메시지를 처리하는 방법</p>\n<ul>\n<li>어떤 객체에게 메시지를 전송하면 결과적으로 메시지에 대응되는 특정 메서드가 실행된다</li>\n<li>메시지와 메서드의 분리는 객체들 간의 자율성을 증진시킨다 (객체는 메시지에 응답하기 위해 자신만의 자율적인 방법을 택할 수 있다)</li>\n<li>cf) <strong>캡슐화</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"객체지향의-본질\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EB%B3%B8%EC%A7%88\" aria-label=\"객체지향의 본질 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향의 본질</h2>\n<ul>\n<li>\n<p>객체를 지향하라</p>\n<ul>\n<li><strong>클래스</strong>는 객체지향의 핵심을 이루는 중심 개념은 아니다</li>\n<li>지나치게 클래스를 강조하는 관점은 객체의 캡슐화를 저해하고 클래스를 서로 강하게 결합시키는 문제가 있다</li>\n<li>객체지향 설계를 위해서는 <strong>메시지를 주고받는 객체의 관점</strong>으로 사고의 중심을 전환해야 한다</li>\n</ul>\n<p><strong>→ 객체의 역할, 책임, 협력에 집중하라!</strong></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"-discussion\" style=\"position:relative;\"><a href=\"#-discussion\" aria-label=\" discussion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤓 DISCUSSION</h2>\n<ul>\n<li>리액트에서는?\n<ul>\n<li>컴포넌트도 객체라고 할 수 있다.</li>\n</ul>\n</li>\n<li>인터페이스\n<ul>\n<li>특정한 객체를 다른 컴포넌트에 전달하는, <code class=\"language-text\">props</code>같은 경우도 객체지향에서의 ‘메시지’</li>\n<li>메시지를 주고 받는 방식이 인터페이스로 정의되어 있다.</li>\n<li>객체지향에서 인터페이스는 클래스가 구현해야 할 내용을 추상 메서드로 미리 정의해놓은 것과 유사하다.</li>\n<li>인터페이스로 메서드 이름을 지정해놓고, 그 인터페이스를 확장해서 인터페이스에 지정된 메서드를 오버라이드 해서 쓰는 방식도 사용할 수 있다.</li>\n</ul>\n</li>\n<li>컴포넌트, element도 결국 하나의 객체다</li>\n</ul>\n<hr>\n<h2 id=\"-생각해보기\" style=\"position:relative;\"><a href=\"#-%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\" 생각해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 생각해보기</h2>\n<p>책에서 지적하고 있는대로, ‘객체지향’이라는 것을 단순히 클래스가 찍어내는 인스턴스들의 느낌으로만 이해하고 있었던 것 같다. 유명한 ‘붕어빵 틀’에 사로잡힌 코린이중 하나…</p>\n<p>아직 <strong>메시지</strong>와 <strong>메서드</strong>가 어떤 차이가 있는 것인지, ‘인터페이스’가 어떻게 메시지와 메서드를 정의하는 것인지 확실하게 와닿지는 않는다. 인터페이스를 단지 컴포넌트에 넘겨주는 <code class=\"language-text\">props</code>를 사용자에게 알려주기 위해, ‘타입’의 관점에서 사용했던 느낌이 큰 것 같다.</p>\n<p>‘객체지향’이라는 관점을 떠나서 ‘객체’를 생각해보았을 때, ‘메서드’와 ‘프로퍼티’로 이루어진 것이 ‘객체’라고 배우기는 쉽다. 그러나 아래 문장은 조금 낯설었다.</p>\n<blockquote>\n<p>객체지향 개발에서는 <strong>데이터</strong>와 <strong>프로세스</strong>를 객체라는 하나의 틀 안에 함께 묶어 놓음으로써 <strong>객체의 자율성</strong>을 보장한다</p>\n</blockquote>\n<p>일반적으로 사용했던 객체의 ‘프로퍼티’가 바로 <strong>데이터</strong>, ‘메서드’는 <strong>프로세스</strong>에 해당할 것이다. 데이터와 프로세스가 단순히 하나의 객체로 묶이는 것이 아니라, 그렇게 함으로써 객체의 내부와 외부를 명확하게 구분하여 <strong>객체의 자율성</strong>을 보장한다는 것은 새롭게 생각해보게 된 내용이었다.</p>\n<p>객체의 <strong>역할, 책임, 협력</strong>에 집중하여 객체 각각이 아니라 전체의 큰 그림에서 객체들 간에 어떻게 메시지를 주고받는지에 집중하여 객체지향 프로그래밍을 익혀나가야겠다.</p>","timeToRead":4,"frontmatter":{"title":"객체지향의 사실과 오해 - 1장","date":"January 29, 2022","description":null,"tags":["oop-true-and-false"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/oop-true-or-false/oop-true-and-false-1/","previous":{"fields":{"slug":"/refactoring/refactoring-1-1/","langKey":"en","directoryName":"refactoring"},"frontmatter":{"date":"January 29, 2022","description":null,"title":"리팩터링 1장 - 1","tags":["refactoring"]}},"next":{"fields":{"slug":"/weekly/2022-1-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"January 29, 2022","description":"weekly-i-learned","title":"1월 4주차 기록","tags":["weekly"]}},"previousInSameTag":{"fields":{"slug":"/oop-true-or-false/oop-true-and-false-2/","langKey":"en","directoryName":"oop-true-or-false"},"frontmatter":{"date":"February 12, 2022","description":null,"title":"객체지향의 사실과 오해 - 2장","tags":["oop-true-and-false"]}},"nextInSameTag":null,"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}