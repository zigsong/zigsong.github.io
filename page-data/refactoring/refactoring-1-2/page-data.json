{"componentChunkName":"component---src-templates-blog-post-js","path":"/refactoring/refactoring-1-2/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"eb8c632a-067c-5a50-bb3b-f633ff498c72","excerpt":"리팩터링: 첫 번째 예시 1.6 계산 단계와 포맷팅 단계 분리하기 앞서 작성한 코드를 두 단계로 나눌 것이다. 에 필요한 데이터를 처리하기 앞서 처리한 결과를 텍스트나 HTML…","html":"<p>리팩터링: 첫 번째 예시</p>\n<!-- more -->\n<hr>\n<h2 id=\"16-계산-단계와-포맷팅-단계-분리하기\" style=\"position:relative;\"><a href=\"#16-%EA%B3%84%EC%82%B0-%EB%8B%A8%EA%B3%84%EC%99%80-%ED%8F%AC%EB%A7%B7%ED%8C%85-%EB%8B%A8%EA%B3%84-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"16 계산 단계와 포맷팅 단계 분리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.6 계산 단계와 포맷팅 단계 분리하기</h2>\n<p>앞서 작성한 코드를 두 단계로 나눌 것이다.</p>\n<ol>\n<li><code class=\"language-text\">statement()</code>에 필요한 데이터를 처리하기</li>\n<li>앞서 처리한 결과를 텍스트나 HTML로 표현하기</li>\n</ol>\n<p>그 다음 함수를 추출한다. 이때 계산 관련 코드는 전부 <code class=\"language-text\">statement()</code> 함수로 모으고 <code class=\"language-text\">renderPlainText()</code>는 <code class=\"language-text\">data</code> 매개변수로 전달된 데이터만 처리하게 만든다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">invoice<span class=\"token punctuation\">,</span> plays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> statementData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 고객 데이터, 공연 정보를 중간 데이터로 옮김</span>\n  statementData<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\n  statementData<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 필요 없어진 인수 삭제</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span>statementData<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> plays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">usd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aNumber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">volumeCreditsFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>연극 제목도 중간 데이터 구조에서 가져온다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">invoice<span class=\"token punctuation\">,</span> plays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> statementData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  statementData<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\n  statementData<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>enrichPerformances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span>statementData<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">playFor()</code> 함수와 <code class=\"language-text\">amountFor()</code> 함수를 <code class=\"language-text\">statement()</code>로 옮겨준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">invoice<span class=\"token punctuation\">,</span> plays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 중간 데이터에 연극 정보를 저장</span>\n    result<span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// renderPlainText()의 중첩 함수였던 playFor()를 statement()로 옮김</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> plays<span class=\"token punctuation\">[</span>aPerformance<span class=\"token punctuation\">.</span>playID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">renderPlainText()</code> 안에서 <code class=\"language-text\">playFor()</code>와 <code class=\"language-text\">amountFor()</code>를 호출하던 부분을 중간 데이터를 사용하도록 바꿔주고, 같은 방식으로 다른 중첩 함수들도 옮겨주었다.</p>\n<p>다음으로는 반복문을 파이프라인으로 바꾼다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// for 반복문을 파이프라인으로 바꿈</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> p</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// for 반복문을 파이프라인으로 바꿈</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> p</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>volumeCredits<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">statement()</code>에 필요한 데이터 처리에 해당하는 코드를 모두 별도 함수로 빼낸다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">invoice<span class=\"token punctuation\">,</span> plays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span><span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 중간 데이터 생성을 전담</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">invoice<span class=\"token punctuation\">,</span> plays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>enrichPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>totalAmount <span class=\"token operator\">=</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>totalVolumeCredits <span class=\"token operator\">=</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">volumeCreditsFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마지막으로, 단계별로 분리한 코드를 별도 파일에 저장한 후 HTML 버전을 작성해준다.</p>\n<hr>\n<h2 id=\"17-중간-점검-두-파일과-두-단계로-분리됨\" style=\"position:relative;\"><a href=\"#17-%EC%A4%91%EA%B0%84-%EC%A0%90%EA%B2%80-%EB%91%90-%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EB%91%90-%EB%8B%A8%EA%B3%84%EB%A1%9C-%EB%B6%84%EB%A6%AC%EB%90%A8\" aria-label=\"17 중간 점검 두 파일과 두 단계로 분리됨 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.7 중간 점검: 두 파일(과 두 단계)로 분리됨</h2>\n<ul>\n<li>\n<p>statement.js</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> createStatementData <span class=\"token keyword\">from</span> <span class=\"token string\">\"./createStatementData.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">invoice<span class=\"token punctuation\">,</span> plays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span><span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> plays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">htmlStatement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">invoice<span class=\"token punctuation\">,</span> plays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">renderHtml</span><span class=\"token punctuation\">(</span><span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderHtml</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">usd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aNumber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>createStatementData.js</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">invoice<span class=\"token punctuation\">,</span> plays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>enrichPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>totalAmount <span class=\"token operator\">=</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>totalVolumeCredits <span class=\"token operator\">=</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">volumeCreditsFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>함수를 추출하면서 코드량은 많이 늘었지만, 모듈화를 통해 전체 로직을 구성하는 요소 각각이 더 뚜렷해지고 계산하는 부분과 출력 형식을 다루는 부분이 분리됐다.</p>\n<hr>\n<h2 id=\"18-다형성을-활용해-계산-코드-재구성하기\" style=\"position:relative;\"><a href=\"#18-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%B4-%EA%B3%84%EC%82%B0-%EC%BD%94%EB%93%9C-%EC%9E%AC%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"18 다형성을 활용해 계산 코드 재구성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.8 다형성을 활용해 계산 코드 재구성하기</h2>\n<p>조건부 로직을 다형성으로 바꿀 수 있다. 여기서는 공연료 계산기를 만들 것이다. 공연 관련 데이터를 계산하는 함수들로 구성된 클래스를 만들어 상속 계층을 정의한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>performance <span class=\"token operator\">=</span> aPerformance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 계산기 클래스의 생성자에 함수 선언 바꾸기를 적용하여 연극의 레코드를 계산기로 전달한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance<span class=\"token punctuation\">,</span> aPlay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>performance <span class=\"token operator\">=</span> aPerformance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> aPlay<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 함수들을 계산기로 옮겨준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// amountFor() 대신 계산기의 함수 이용</span>\n  result<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// volumeCreditsFor() 대신 계산기의 함수 이용</span>\n  result<span class=\"token punctuation\">.</span>volumeCredits <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span>volumeCredits<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// amountFor() 함수의 코드를 계산기 클래스로 복사</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">amount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"tragedy\"</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// ...</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// volumeCreditsFor() 함수의 코드를 계산기 클래스로 복사</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">volumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>상속 받은 서브클래스들을 활용하여 공연료 계산기를 다형성 버전으로 만들어준다. 타입 코드를 서브클래스로 바꾸고, 생성자를 팩터리 함수로 바꾼다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 생성자 대신 팩터리 함수 이용</span>\n  <span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token function\">createPerformanceCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createPerformanceCalculator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aPerformance<span class=\"token punctuation\">,</span> aPlay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>aPlay<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"tragedy\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TragedyCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> aPlay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"comedy\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ComedyCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> aPlay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TragedyCalculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ComedyCalculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러면 조건부 로직을 다형성으로 바꿔줄 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TragedyCalculator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">amount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">amount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"tragedy\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token string\">\"오류 발생\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 비극 공연료는 TragedyCalculator를 이용하도록 유도</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"comedy\"</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>장르를 통틀어서 공통되는 부분은 일반적인 경우를 기본으로 삼아 슈퍼클래스에 남겨두고, 장르마다 달라지는 부분은 필요할 때 오버라이드하게 만들어주었다.</p>\n<hr>\n<h2 id=\"19-상태-점검-다형성을-활용하여-데이터-생성하기\" style=\"position:relative;\"><a href=\"#19-%EC%83%81%ED%83%9C-%EC%A0%90%EA%B2%80-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"19 상태 점검 다형성을 활용하여 데이터 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.9 상태 점검: 다형성을 활용하여 데이터 생성하기</h2>\n<p>두 개의 함수 <code class=\"language-text\">amountFor()</code>와 <code class=\"language-text\">volumeCreditsFor()</code>의 조건부 로직을 생성 함수 하나로 옮겨 같은 타입의 다형성을 기반으로 실행되는 함수를 모듈화했다.</p>\n<p>계산기가 중간 데이터 구조를 채우게 한 지금의 코드와 달리 <code class=\"language-text\">createStatementData()</code>가 계산기 자체를 반환하게 구현해도 되지만, 여기서는 다형성 계산기를 사용한다는 사실을 숨기기보다는 중간 데이터 구조를 이용하는 방법을 보여주는 방식으로 작성했다.</p>\n<hr>\n<h2 id=\"110-마치며\" style=\"position:relative;\"><a href=\"#110-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"110 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.10 마치며</h2>\n<p>이번 장에서 살펴본 리팩터링 기법들은 다음과 같다</p>\n<ul>\n<li>함수 추출하기</li>\n<li>변수 인라인하기</li>\n<li>함수 옮기기</li>\n<li>조건부 로직을 다형성으로 바꾸기</li>\n</ul>\n<p>이번 장의 예제에서는 리팩터링을 크게 세 단계로 진행했다.</p>\n<ol>\n<li>원본 함수를 중첩 함수 여러 개로 나누기</li>\n<li>단계 쪼개기 - 계산 코드와 출력 코드를 분리했다.</li>\n<li>계산 로직을 다형성으로 표현했다.</li>\n</ol>\n<blockquote>\n<p>💡 좋은 코드를 가늠하는 확실한 방법은 ‘얼마나 수정하기 쉬운가’다.</p>\n</blockquote>\n<p>리팩터링을 효과적으로 하는 핵심은, 단계를 잘게 나눠야 더 빠르게 처리할 수 있고, 코드는 절대 깨지지 않으며, 이러한 작은 단계들이 모여서 상당히 큰 변화를 이룰 수 있다는 사실을 깨닫는 것이다.</p>","timeToRead":6,"frontmatter":{"title":"리팩터링 1장 - 2","date":"February 03, 2022","description":null,"tags":["refactoring"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/refactoring/refactoring-1-2/","previous":{"fields":{"slug":"/weekly/2022-2-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"February 05, 2022","description":"weekly-i-learned","title":"2월 첫주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/etc/git-commands-everything/","langKey":"en","directoryName":"etc"},"frontmatter":{"date":"January 31, 2022","description":null,"title":"git 명령어 부셔보기","tags":["git"]}},"previousInSameTag":{"fields":{"slug":"/refactoring/refactoring-2/","langKey":"en","directoryName":"refactoring"},"frontmatter":{"date":"February 09, 2022","description":null,"title":"리팩터링 2장","tags":["refactoring"]}},"nextInSameTag":{"fields":{"slug":"/refactoring/refactoring-1-1/","langKey":"en","directoryName":"refactoring"},"frontmatter":{"date":"January 29, 2022","description":null,"title":"리팩터링 1장 - 1","tags":["refactoring"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}