{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/typescript-declare/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"718b441f-6170-5d0f-9add-d6740d021db7","excerpt":"(다시 쓸 예정) 놀토 프로젝트에서 사용하는 Kakao API를 TypeScript와 함께 사용하기 위해서는 아래처럼 Kakao API를 초기화해주는 작업이 필요하다. 이때 TypeScript는 에서 Kakao를 찾지 못하므로, 직접 window 객체에 Kakao…","html":"<p>(다시 쓸 예정)</p>\n<!-- more -->\n<p>놀토 프로젝트에서 사용하는 Kakao API를 TypeScript와 함께 사용하기 위해서는 아래처럼 Kakao API를 초기화해주는 작업이 필요하다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">window<span class=\"token punctuation\">.</span>Kakao<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">KAKAO_API_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이때 TypeScript는 <code class=\"language-text\">window</code>에서 Kakao를 찾지 못하므로, 직접 window 객체에 Kakao를 정의해줘야 한다. Type declare의 방식을 사용했다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// global.d.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Window</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-explicit-any</span>\n    Kakao<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한 <code class=\"language-text\">svg</code> 확장자 파일을 사용하기 위해서도 해당 확장자에 대한 <code class=\"language-text\">declare</code>를 선언해줘야 한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// custom.d.ts</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"*.svg\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">content</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> fill<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> SVGProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>🤔 declare는 무엇이고, 왜 사용하는 걸까?</strong></p>\n<p><code class=\"language-text\">xxx.d.ts</code> 파일은, TypeScript를 지원하지 않는 서드파티 라이브러리를 사용할 때 타입을 직접 선언해주기 위해 필요하다. 해당 파일은 구현부가 아닌 선언부만을 작성하는 용도로, JavaScript 코드로 컴파일되지 않으며 TypeScript 컴파일러에게 타입 정보를 알려주기만 한다. <code class=\"language-text\">xxx.d.ts</code> 파일을 만든 후 tsconfig.json에도 해당 declare 파일을 쓸 것이라고 알려준다.</p>\n<blockquote>\n<p>인스톨 시 <code class=\"language-text\">@types/</code>로 시작하는 라이브러리를 함께 설치하는 경우 별도의 타입 선언이 필요하지 않다. TypeScript는 기본적으로 <code class=\"language-text\">@types/</code>로 시작하는 패키지들을 컴파일에 포함한다. 해당 패키지들은 <a href=\"http://definitelytyped.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DefinitelyTyped</a>에 의해 선언부가 정의되어 있다.</p>\n</blockquote>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"includes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"global.d.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"custom.d.ts\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또는 <code class=\"language-text\">typeRoots</code>를 작성해줄 수도 있다. <code class=\"language-text\">typeRoots</code>를 지정하면, TypeScript는 <code class=\"language-text\">typeRoots</code>의 경로에 지정된 패키지만 컴파일 과정에 포함한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token string-property property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"src/types\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"node_modules/@types\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">xxx.d.ts</code> 파일을 만들었다면, <code class=\"language-text\">declare</code> 키워드를 통해 모듈을 선언한다. <code class=\"language-text\">declare</code>를 이용한 모듈의 기본 선언 방식을 <strong>앰비언트 선언(ambient declaration)</strong> 이라고 한다. 이는 TypeScript 컴파일러에 JavaScript 구현 ‘환경’에 대한 정보를 알려주는 것으로, 구체적인 실행에 대한 내용 없이 선언부만 작성하기 때문에 ‘앰비언트’라고 한다.</p>\n<p>아래처럼 변수를 선언할 수도 있으며,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> hello<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">module</code> 키워드를 사용해 엠비언트 모듈을 선언할 수도 있다. 이때 모듈 내에는 interface, class, function 등의 요소를 선언할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"module1\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한 속기 선언 방식을 통해 선언부의 body 없이 빠르게 앰비언트 선언을 작성할 수 없다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 와일드카드(*)를 사용한 속기 선언 방식</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"*.png\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>namespace도 정의해줄 수 있는데, 이때 <code class=\"language-text\">namespace</code> 키워드를 생략할 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> global <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>module과 namespace로 선언한 선언부의 경우 내부에 <code class=\"language-text\">export</code>를 붙인 필드만 외부에서 참조가 가능하다.</p>\n<blockquote>\n<p>👾 <strong>module vs namespace</strong></p>\n<ul>\n<li><strong>module</strong> - import &#x26; export로 사용하며, 코드와 선언부 모두를 포함한다. 모듈은 모듈 로더(ex. CommonJS 등)에 대한 의존성이나 ESModule이 제공하는 런타임을 가지고 있다.</li>\n<li><strong>namespace</strong> - 전역 namespace에서 JavaScript 일반 객체로 컴파일된다. (<code class=\"language-text\">declare</code> 키워드로 선언 시 JavaScript로 컴파일되지 않는다.) IIFE 함수에 해당 객체를 전달하고 그 함수를 즉시 호출하는 방식으로 컴파일된다. 모듈과 달리 여러 개의 파일을 포함할 수 있다.</li>\n</ul>\n</blockquote>\n<p>이렇게 작성한 선언들은 자동으로 <code class=\"language-text\">export</code> 키워드가 붙게 되며, 명시적으로 import하지 않고도 프로젝트의 모든 파일에서 전역적으로 사용할 수 있다.</p>\n<p>import-export를 사용하는 일반 모듈 파일들에서도 전역 참조가 가능한 선언부를 작성하고 싶을 때에는 <code class=\"language-text\">global</code> 키워드를 사용한다. 위에서 사용했던 Kakao API 사용을 위한 declare global이 여기에 해당한다.</p>\n<blockquote>\n<p>👾 global 객체를 확장하려는 경우 ambient 또는 external module을 사용해야 하는데, ambient module을 사용할 수 없으므로(= module로 선언할 수 없으므로) <code class=\"language-text\">export {}</code>를 통해 external module로 만들어준다.</p>\n</blockquote>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ndeclare global <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Ref</strong>\n<a href=\"https://it-eldorado.tistory.com/127\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://it-eldorado.tistory.com/127</a>\n<a href=\"https://soft91.tistory.com/74\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://soft91.tistory.com/74</a>\n<a href=\"https://typescript-kr.github.io/pages/namespaces-and-modules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://typescript-kr.github.io/pages/namespaces-and-modules.html</a>\n<a href=\"https://typescript-kr.github.io/pages/modules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://typescript-kr.github.io/pages/modules.html</a>\n<a href=\"https://elfi-y.medium.com/typescript-ambient-module-8816c9e5d426\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://elfi-y.medium.com/typescript-ambient-module-8816c9e5d426</a></p>","timeToRead":3,"frontmatter":{"title":"TypeScript declare","date":"September 18, 2021","description":null,"tags":["typescript"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/typescript/typescript-declare/","previous":{"fields":{"slug":"/wtc/wtc-week-32/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"September 18, 2021","description":null,"title":"우테코 32주차 기록","tags":["woowacourse"]}},"next":{"fields":{"slug":"/frontend/apple-clone/","langKey":"en","directoryName":"frontend"},"frontmatter":{"date":"September 18, 2021","description":null,"title":"애플 클론코딩(을 빙자한 복제)","tags":["frontend"]}},"previousInSameTag":{"fields":{"slug":"/typescript/typescript-declare-2/","langKey":"en","directoryName":"typescript"},"frontmatter":{"date":"October 29, 2022","description":null,"title":"타입스크립트 declare 다시 알아보기","tags":["typescript"]}},"nextInSameTag":{"fields":{"slug":"/typescript/typescript-type-guard/","langKey":"en","directoryName":"typescript"},"frontmatter":{"date":"August 01, 2021","description":null,"title":"타입스크립트 타입 가드","tags":["typescript"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}