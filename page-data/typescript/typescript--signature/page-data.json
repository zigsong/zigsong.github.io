{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/typescript--signature/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"d113e46f-103e-52ab-a944-549fcc0f95f7","excerpt":"타입스크립트의 index signature 앱에서 사용하는 feed의 필드를 아래와 같이 정의했다. 그리고 사용자가 feed를 새로 업로드할 때, 하나의 form 안의 각각의 input에서 가져온 값을 FormData에 key-value…","html":"<p>타입스크립트의 index signature</p>\n<!-- more -->\n<hr>\n<p>앱에서 사용하는 feed의 필드를 아래와 같이 정의했다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// types.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Feed</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  author<span class=\"token operator\">:</span> User<span class=\"token punctuation\">;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  content<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  techs<span class=\"token operator\">:</span> Tech<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// custom type</span>\n  <span class=\"token class-name\">step</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  sos<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  thumbnailImage<span class=\"token operator\">:</span> File<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 사용자가 feed를 새로 업로드할 때, 하나의 form 안의 각각의 input에서 가져온 값을 FormData에 key-value 값으로 매핑하여 담아주고 싶었다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// form의 event handler</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uploadFeed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> Feed<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  uploadFeeds<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span>formData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그런데 formData에 append할 value로 들어가는 <code class=\"language-text\">data[key]</code>에서 문제가 발생했다.</p>\n<blockquote>\n<p>🚨 Element implicitly has an ‘any’ type because expression of type ‘string’ can’t be used to index type ‘Feed’. No index signature with a parameter of type ‘string’ was found on type ‘Feed’</p>\n</blockquote>\n<p>TypeScript는 기본적으로 객체의 프로퍼티를 읽을 때, <code class=\"language-text\">string</code> 타입의 key 사용을 허용하지 않는다. TypeScript에서는 <code class=\"language-text\">string literal</code> 타입과 <code class=\"language-text\">string</code> 타입을 구분하기 때문이다.</p>\n<p>아래 예제에서 a, b, c는 모두 같은 값을 가지지만 타입은 서로 다르다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Hello world' 타입 (string literal)</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string 타입</span>\n<span class=\"token keyword\">const</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string 타입</span></code></pre></div>\n<p>b 변수는 let으로 선언되어 언제든지 재할당이 가능하기 때문에 컴파일러는 이 변수를 string 타입으로 추론한다.</p>\n<p>c 변수는 명시적으로 string 타입으로 선언했기 때문에 그냥 string 타입이다.</p>\n<p>a 변수는 조금 특이하다. TypeScript 컴파일러는 이 변수를 string이 아닌 좁은 타입(narrowed type)으로 선언한 것으로 추론한다. 리터럴 타입, 말 그래도 ‘Hello world’ 타입이 된 것이다.</p>\n<p>위에서 언급한 문제에서도, <code class=\"language-text\">Object.keys(data)</code>를 돌며 <code class=\"language-text\">data</code>의 인덱싱 값으로 사용하려 했던 <code class=\"language-text\">key</code>라는 변수가 <code class=\"language-text\">Feed</code> 타입의 필드 네임으로 정의되지 않은 문자열일 수도 있기 때문에 오류를 뱉는 것이다.</p>\n<p>index signature를 사용하여 이 문제를 해결했다. 원래 index signature는 객체에 대괄호(<code class=\"language-text\">[]</code>)를 통해 인덱싱하는 것을 의미한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">[</span><span class=\"token string\">\"zig\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"song\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">[</span><span class=\"token string\">\"zig\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// song</span></code></pre></div>\n<p>TypeScript에서는 특정 객체에 인덱싱 값으로 사용할 수 있는 변수의 타입을 명시적으로 선언해주기 위해 index signature를 사용할 수 있다. 여기서는 index 타입으로 <code class=\"language-text\">string</code>을 사용했다.</p>\n<blockquote>\n<p>TypeScript의 index signature는 <code class=\"language-text\">string</code>이나 <code class=\"language-text\">number</code> 타입을 강제한다.\n(➕ <code class=\"language-text\">Symbol</code> 타입도 지원한다.)</p>\n</blockquote>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Feed</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> User <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> Tech<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> File<span class=\"token punctuation\">;</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  author<span class=\"token operator\">:</span> User<span class=\"token punctuation\">;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  content<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  techs<span class=\"token operator\">:</span> Tech<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// custom type</span>\n  <span class=\"token class-name\">step</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  sos<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  thumbnailImage<span class=\"token operator\">:</span> File<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(<code class=\"language-text\">index</code>라는 네이밍은 편의를 위한 것이며, 얼마든지 바꿔도 된다. <code class=\"language-text\">key</code> 등의 네이밍도 괜찮다고 생각한다.)</p>\n<p>index signature의 타입을 string으로 강제했다. 또 index signature를 선언한 경우 모든 멤버가 그에 따라야 하므로, 멤버에 해당하는 모든 타입들을 index signature의 value 타입에 열거해준다.</p>\n<p>이제 외부에서 <code class=\"language-text\">Feed</code> 타입의 객체를 순회할 때, index에는 string 타입의 값이 들어오며 value의 타입은 위와 같은 union type에 속한 타입들 중 하나에 해당한다는 것을 알 수 있다. string 타입의 key로 정상적으로 인덱싱을 할 수 있게 되었다!</p>\n<hr>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://itmining.tistory.com/87\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://itmining.tistory.com/87</a></li>\n<li><a href=\"https://soopdop.github.io/2020/12/01/index-signatures-in-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://soopdop.github.io/2020/12/01/index-signatures-in-typescript/</a></li>\n</ul>","timeToRead":2,"frontmatter":{"title":"타입스크립트의 index signature","date":"July 18, 2021","description":null,"tags":["typescript"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/typescript/typescript--signature/","previous":{"fields":{"slug":"/react/forwardRef/","langKey":"en","directoryName":"react"},"frontmatter":{"date":"July 18, 2021","description":null,"title":"왜 forwardRef를 사용할까?","tags":["react"]}},"next":{"fields":{"slug":"/react/modal-provider/","langKey":"en","directoryName":"react"},"frontmatter":{"date":"July 18, 2021","description":null,"title":"ModalProvider 만들기","tags":["react"]}},"previousInSameTag":{"fields":{"slug":"/typescript/typescript-type-guard/","langKey":"en","directoryName":"typescript"},"frontmatter":{"date":"August 01, 2021","description":null,"title":"타입스크립트 타입 가드","tags":["typescript"]}},"nextInSameTag":null,"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}