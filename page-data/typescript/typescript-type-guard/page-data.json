{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/typescript-type-guard/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"30b30272-6386-5975-bc0e-e830e2d68021","excerpt":"TypeScript type guard 서버 데이터를 가져오는 과정에서 에러 핸들링을 하면서 TypeScript와의 굉장한 싸움에 시달렸다. 그러던 중 type guard에 대해서 알게 되었다. type guard…","html":"<p>TypeScript type guard</p>\n<!-- more -->\n<hr>\n<p>서버 데이터를 가져오는 과정에서 에러 핸들링을 하면서 TypeScript와의 굉장한 싸움에 시달렸다. 그러던 중 type guard에 대해서 알게 되었다.</p>\n<p>type guard를 사용하면 조건문에서 객체의 타입을 좁혀나갈 수 있다. <code class=\"language-text\">typeof</code>, <code class=\"language-text\">instanceof</code>, <code class=\"language-text\">in</code> 등 기본으로 제공하는 타입 가드 연산자를 사용할 수도 있지만, 사용자 정의 type guard를 작성할 수도 있다.</p>\n<p>사용자 정의 type guard 함수는 단순히 <strong>어떤 인자명은 어떠한 타입이다</strong>라는 값을 리턴하는 함수다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  common<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">{</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  common<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 사용자 정의 Type Guard!\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isFoo</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> arg <span class=\"token keyword\">is</span> Foo <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">arg is Foo</code>는 사용자가 정의한 type predicate에 해당한다. <code class=\"language-text\">parameterName is Type</code>에서 <code class=\"language-text\">parameterName</code>은 현재 함수 시그니처의 인수 이름과 같아야 한다. 여기서는 <code class=\"language-text\">arg</code>라는 인자가 <code class=\"language-text\">Foo</code> 타입이라고 예측하여 넘겨준 다음, 정말 <code class=\"language-text\">Foo</code> 타입이 맞는지를 검사해서 반환한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 사용자 정의 Type Guard 사용 예시</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> Foo <span class=\"token operator\">|</span> Bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFoo</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Property 'bar' does not exist on type 'Foo'</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Property 'foo' does not exist on type 'Bar'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> common<span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123 undefined</span>\n<span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> bar<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> common<span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined 123</span></code></pre></div>\n<p>프로젝트에서는 에러 응답 형식을 구분하여 알맞은 방식으로 처리해주기 위해 아래처럼 type guard를 사용했다.</p>\n<p>우선 사용한 인터페이스는 다음과 같다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// types.tsx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ErrorResponse</span> <span class=\"token punctuation\">{</span>\n  status<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HttpErrorResponse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ErrorResponse</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    errorCode<span class=\"token operator\">:</span> <span class=\"token constant\">ERROR_CODE_KEY</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">isErrorResponse</code>, <code class=\"language-text\">isErrorCode</code>, <code class=\"language-text\">isHttpErrorResponse</code> 세 가지 방식으로 에러 응답의 타입을 확인해주었다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// typeGuard.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> isErrorResponse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> response <span class=\"token keyword\">is</span> ErrorResponse <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> isErrorCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> data <span class=\"token keyword\">is</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">ERROR_CODE</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> data <span class=\"token operator\">!==</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ERROR_CODE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> key <span class=\"token operator\">===</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> isHttpErrorResponse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  errorResponse<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> errorResponse <span class=\"token keyword\">is</span> HttpErrorResponse <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isErrorResponse</span><span class=\"token punctuation\">(</span>errorResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> errorResponse<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>data <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">!==</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isErrorCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>errorCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>완벽하지 않을 수 있지만, 사용할 때 보다 안전하게 타입 체킹을 한 후 에러 핸들러를 작성할 수 있게 되었다!</p>\n<hr>\n<p><strong>Ref</strong></p>\n<ul>\n<li><a href=\"https://radlohead.gitbook.io/typescript-deep-dive/type-system/typeguard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://radlohead.gitbook.io/typescript-deep-dive/type-system/typeguard</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.typescriptlang.org/docs/handbook/advanced-types.html</a></li>\n</ul>","timeToRead":2,"frontmatter":{"title":"타입스크립트 타입 가드","date":"August 01, 2021","description":null,"tags":["typescript"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/typescript/typescript-type-guard/","previous":{"fields":{"slug":"/wtc/wtc-week-26/","langKey":"en","directoryName":"wtc"},"frontmatter":{"date":"August 01, 2021","description":null,"title":"우테코 26주차 기록","tags":["woowacourse"]}},"next":{"fields":{"slug":"/react/react-hook-test/","langKey":"en","directoryName":"react"},"frontmatter":{"date":"August 01, 2021","description":null,"title":"리액트 훅 테스트","tags":["frontend"]}},"previousInSameTag":{"fields":{"slug":"/typescript/typescript-declare/","langKey":"en","directoryName":"typescript"},"frontmatter":{"date":"September 18, 2021","description":null,"title":"TypeScript declare","tags":["typescript"]}},"nextInSameTag":{"fields":{"slug":"/typescript/typescript--signature/","langKey":"en","directoryName":"typescript"},"frontmatter":{"date":"July 18, 2021","description":null,"title":"타입스크립트의 index signature","tags":["typescript"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","2466007692","2894998521","3765107650","683610688"]}