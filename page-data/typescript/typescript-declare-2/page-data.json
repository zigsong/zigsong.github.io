{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/typescript-declare-2/","result":{"data":{"site":{"siteMetadata":{"title":"ziglog","author":"zigsong","lang":"en"}},"markdownRemark":{"id":"5c5de79c-e202-57b4-9d07-515d85c3c751","excerpt":"이 글은 작년 9월에 쓴 글이 너무 구려서(…) 언젠가 다시 쓰겠노라 다짐만 하다가, 1년도 더 지난 지금 드디어 반성하며 작성하는 글이다. 모듈부터 알아보자 ES…","html":"<p>이 글은 작년 9월에 쓴 글이 너무 구려서(…) 언젠가 다시 쓰겠노라 다짐만 하다가, 1년도 더 지난 지금 드디어 반성하며 작성하는 글이다.</p>\n<!-- more -->\n<h2 id=\"모듈부터-알아보자\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88%EB%B6%80%ED%84%B0-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\" aria-label=\"모듈부터 알아보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈부터 알아보자</h2>\n<hr>\n<p>ES6 이후 자바스크립트에는 ‘모듈’이라는 개념이 등장했다. 모듈 덕분에 전역에서 모든 것을 선언하여 갖다 쓰는 지저분한(;) 방식 대신, 특정 스코프에서 변수, 함수 등등을 선언해서 그 안에서만 사용하거나, 외부로 export된 모듈을 명시적으로 import하여 사용할 수가 있게 되었다.</p>\n<p>타입스크립트는 ES6처럼 모듈을 지원한다. 이때 파일에 <code class=\"language-text\">import</code>나 <code class=\"language-text\">export</code>가 있어야만 모듈로 간주하며, <code class=\"language-text\">import</code>-<code class=\"language-text\">export</code> 없이 선언한 코드는 전역 스코프에서 사용 가능한 것으로 여겨진다.</p>\n<p>그래서 당연히 우리가 아는 일반적인 형태의 모듈은..</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 작성하고, 외부에서 <code class=\"language-text\">StringValidator</code>를 갖다 쓰는 방식.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ZipCodeValidator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myValidator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"namespace네임스페이스는-뭘까\" style=\"position:relative;\"><a href=\"#namespace%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-%EB%AD%98%EA%B9%8C\" aria-label=\"namespace네임스페이스는 뭘까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Namespace(네임스페이스)는 뭘까?</h2>\n<hr>\n<p>여러 동일한 코드가 반복될 때, 네임스페이스로 묶을 수 있다. 네임스페이스는 글로벌 네임스페이스에서 자바스크립트 객체로 컴파일된다. 구체적으로는 IIFE(즉시실행함수)에 해당 객체를 전달하고, 그 함수를 즉시 호출하는 식으로 컴파일된다.</p>\n<blockquote>\n<p>네임스페이스는 이전에 ‘내부 모듈(internal module)‘이라고 불렸었다.\n네임스페이스의 모든 의존성은 HTML 페이지의 <code class=\"language-text\">&lt;script></code> 태그로 포함한다.</p>\n</blockquote>\n<p><code class=\"language-text\">Validation</code> 네임스페이스를 예로 들어보자.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">namespace</span> Validation <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> lettersRegexp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[A-Za-z]+$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LettersOnlyValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> lettersRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Some samples to try</span>\n<span class=\"token keyword\">let</span> strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"98052\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"101\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Validators to use</span>\n<span class=\"token keyword\">let</span> validators<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Validation<span class=\"token punctuation\">.</span>StringValidator <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">\"Letters only\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Validation</span><span class=\"token punctuation\">.</span><span class=\"token function\">LettersOnlyValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Show whether each string passed each validator</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> s <span class=\"token keyword\">of</span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> name <span class=\"token keyword\">in</span> validators<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        validators<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"matches\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"does not match\"</span>\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Validation</code>이라는 네임스페이스를 선언하고, 그 안의 인터페이스와 클래스를 네임스페이스 바깥에서도 사용할 수 있도록 <code class=\"language-text\">export</code>해주었다. (<code class=\"language-text\">export</code>하지 않은 <code class=\"language-text\">lettersRegexp</code>와 같은 변수들은 네임스페이스 바깥에선 사용할 수 없다.) 네임스페이스 바깥에서는 <code class=\"language-text\">Validation.StringValidator</code>와 같이 네임스페이스의 이름 뒤에 <code class=\"language-text\">.</code>(점) 연산자를 붙여서 원하는 인터페이스나 클래스를 사용할 수 있다.</p>\n<p><code class=\"language-text\">Validation</code> 네임스페이스를 여러 파일에 분리해서 작성할 수도 있다. 이를 다중 파일 네임스페이스(multi-file namespaces)라고 한다. 파일 간 의존성이 있으므로, 참조 태그를 추가하여 컴파일러에게 파일 간의 관계를 알린다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Validation.ts</span>\n<span class=\"token keyword\">namespace</span> Validation <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// LettersOnlyValidator.ts</span>\n<span class=\"token comment\">/// &lt;reference path=\"Validation.ts\" /></span>\n<span class=\"token keyword\">namespace</span> Validation <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lettersRegexp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[A-Za-z]+$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LettersOnlyValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> lettersRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>트리플 슬래시 지시어 (<code class=\"language-text\">/// &lt;reference path=\"...\" /></code>)를 사용하면 파일 간의 의존성 선언을 가져올 수 있다. 컴파일러는 컴파일 과정에서 추가적인 파일들을 포함시킨다.</p>\n</blockquote>\n<p>위와 같이 파일이 분리되었더라도 타입스크립트 컴파일러는 각각이 같은 네임스페이스로 선언된 것처럼 취급할 수 있다.</p>\n<h2 id=\"ambient-module앰비언트-모듈\" style=\"position:relative;\"><a href=\"#ambient-module%EC%95%B0%EB%B9%84%EC%96%B8%ED%8A%B8-%EB%AA%A8%EB%93%88\" aria-label=\"ambient module앰비언트 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ambient Module(앰비언트 모듈)</h2>\n<hr>\n<p>모듈과 네임스페이스를 알아봤다. 그런데! 이것만 있으면 재미가 없다. 타입스크립트에는 <strong>‘앰비언트 모듈(ambient module)’</strong> 이라는 친구도 존재한다. 일반적인 모듈은 코드와 선언 둘 다 포함할 수 있지만, ‘앰비언트’ 모듈은 이름에서도 드러나듯 구체적인 구현체를 포함하지 않으며, 타입 선언부만 존재한다.</p>\n<blockquote>\n<p>구현체를 정의하지 않은 선언문을 ‘ambient’라고 부르며, 일반적으로 <code class=\"language-text\">.d.ts</code> 파일에 작성한다.\n앰비언트 모듈은 <code class=\"language-text\">declare</code> 키워드를 사용하여 선언한다.\n<code class=\"language-text\">.d.ts</code> 파일은 자바스크립트로 컴파일되지 않는다.</p>\n</blockquote>\n<p>앰비언트 모듈은 자바스크립트로 작성된 라이브러리들을 타입스크립트로 작성된 것처럼 안전하게 가져다 쓸 수 있게 해주는 타입스크립트의 기능이다. 주로 프로젝트나 라이브러리 단위의 타입 정의를 포함한다.</p>\n<p>우리는 이미 수많은 앰비언트 모듈들을 본 적이 있는데, 바로 자바스크립트 라이브러리들에 대한 타입을 선언한 <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DefinitelyTyped</a>가 대표적인 예시다. <code class=\"language-text\">@types/react</code>와 같이, npm으로 자바스크립트 라이브러리를 설치할 때 <code class=\"language-text\">@types/</code> prefix가 붙은 파일 설치 시 사용할 수 있다.</p>\n<p>만약 설치하고자 하는 라이브러리에 타입 정의가 없다면(<code class=\"language-text\">@types/</code> 파일이 없다면), 앰비언트 모듈을 사용하여 직접 라이브러리의 타입 정의 파일을 추가해주어야 한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// some-pureJS-library.d.ts</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"some-pureJS-library\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 tsconfig의 <code class=\"language-text\">compilerOptions</code>에 해당 파일 경로를 추가해준다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./some-pureJS-library\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Node.js에서, 대부분의 작업(task)은 하나 이상의 모듈을 로드해서 이루어진다. 각 모듈마다 <code class=\"language-text\">.d.ts</code> 파일을 작성하여 최상위에서 export할 수도 있겠지만, 그보다는 하나의 큰 <code class=\"language-text\">d.ts</code> 파일에 작성하는 것이 좋겠다. 이를 위해 <strong>앰비언트 모듈</strong>이 탄생했다.</p>\n<p>Node.js에서 앰비언트 모듈을 사용하는 방식을 보자.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// node.d.ts</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"url\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Url</span> <span class=\"token punctuation\">{</span>\n    protocol<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    hostname<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    pathname<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n    urlStr<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    parseQueryString<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n    slashesDenoteHost<span class=\"token operator\">?</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Url<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"path\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>paths<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> sep<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>삼중 슬래시 지시어(<code class=\"language-text\">///</code>)를 사용하여, node.d.ts에 선언된 앰비언트 모듈을 직접 가져다 쓸 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/// &lt;reference path=\"node.d.ts\"/></span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">URL</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myUrl <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.typescriptlang.org\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>삼중 슬래시 지시어(<code class=\"language-text\">///</code>)를 사용하는 대신, tsconfig.json 파일의 <code class=\"language-text\">compilerOptions</code>를 통해서 앰비언트 모듈을 사용할 수도 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./types\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">paths</code>를 사용하여 사용하고자 하는 앰비언트 모듈의 경로를 표현식으로 지정해줄 수도 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"sample-module\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"../types/sample-module\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"wildcard-모듈-선언-사용하기\" style=\"position:relative;\"><a href=\"#wildcard-%EB%AA%A8%EB%93%88-%EC%84%A0%EC%96%B8-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"wildcard 모듈 선언 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wildcard 모듈 선언 사용하기</h2>\n<hr>\n<p>SystemJS나 AMD같은 모듈 로더들은 자바스크립트가 아닌 콘텐츠도 쓰게 해준다. 착하다… 이런 케이스들을 다루기 위해 와일드카드 모듈 선언문이 쓰인다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"*.png\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> content<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">'*.png'</code> 파일을 갖다 쓸 수 있다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> catImg <span class=\"token keyword\">from</span> <span class=\"token string\">\"images/cat.png\"</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>catImg<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>meow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">, document.getElementById('root'),)</span></code></pre></div>\n<h2 id=\"ambient-namespace앰비언트-네임스페이스\" style=\"position:relative;\"><a href=\"#ambient-namespace%EC%95%B0%EB%B9%84%EC%96%B8%ED%8A%B8-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"ambient namespace앰비언트 네임스페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ambient Namespace(앰비언트 네임스페이스)</h2>\n<hr>\n<p>‘앰비언트’는 모듈 뿐 아니라 네임스페이스에도 적용된다.</p>\n<p>다른 자바스크립트 라이브러리들을 사용한다면, 해당 라이브러리가 제공하는 API를 타입스크립트로 확장하여 선언할 수 있다.</p>\n<p>자바스크립트 D3 라이브러리를 예시로 들어보자. 이 라이브러리는 <code class=\"language-text\">d3</code>이라는 글로벌 객체에 함수들을 정의한다. D3 라이브러리는 모듈 로더가 아닌 <code class=\"language-text\">&lt;script></code> 태그를 통해 로드되므로, 타입스크립트는 이 형태를 보기 위해 앰비언트 네임스페이스 선언을 사용한다. 앰비언트 네임스페이스 역시 앰비언트 모듈과 마찬가지로 <code class=\"language-text\">declare</code> 키워드를 이용하여 선언한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// D3.d.ts</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">D3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Selectors</span> <span class=\"token punctuation\">{</span>\n    select<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>selector<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Selection<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span> EventTarget<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Selection<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Base</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Selectors</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> d3<span class=\"token operator\">:</span> <span class=\"token constant\">D3</span><span class=\"token punctuation\">.</span>Base<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"이제-declare의-쓰임새를-정리해보자\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%9C-declare%EC%9D%98-%EC%93%B0%EC%9E%84%EC%83%88%EB%A5%BC-%EC%A0%95%EB%A6%AC%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"이제 declare의 쓰임새를 정리해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이제 <code class=\"language-text\">declare</code>의 쓰임새를 정리해보자.</h2>\n<hr>\n<p><code class=\"language-text\">declare</code> 키워드를 사용하여 변수, 상수, 함수, 또는 클래스가 어딘가에 이미 선언되어 있음을 알릴 수 있다. 자바스크립트 코드로는 컴파일되지 않으며, 타입스크립트 컴파일러에게 타입 정보를 알리기만 한다.</p>\n<p><code class=\"language-text\">declare</code>는 크게 세 가지 방식으로 작성할 수 있다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">declare namespace Validator</code></p>\n<ul>\n<li>‘앰비언트 네임스페이스’ 또는 ‘내부 모듈(internal-module)‘이라고 불리며, 일반적인 네임스페이스처럼 자바스크립트 객체로 컴파일되지 않는다.</li>\n<li>몇몇 타입들을 의미적으로 묶고 싶은 경우 사용한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">declare module \"Validator\"</code></p>\n<ul>\n<li>‘앰비언트 모듈 선언’ 파일에 작성하는 블록으로, ‘앰비언트 모듈’ 또는 ‘외부 모듈(external-module)‘이라고 불린다.</li>\n<li>컴파일 대상에 포함되기만 한다면 이곳에 선언된 모듈(<code class=\"language-text\">Validator</code>)의 타입 정보를 참조할 수 있게 된다. (블록 내에서 <code class=\"language-text\">export</code>를 붙인 필드만 외부에서 참조할 수 있다.)</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">declare global</code></p>\n<ul>\n<li>모듈 파일에서도 전역 참조가 가능한 선언 코드를 작성하고 싶을 때 사용한다.\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// global.d.ts</span>\n<span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Window</span> <span class=\"token punctuation\">{</span>\n    newProperty<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">window<span class=\"token punctuation\">.</span>newProperty<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>오로지 <code class=\"language-text\">declare module</code> 블록 안에서만 중첩이 가능하다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">.d.ts</code> 파일에 작성되는 <code class=\"language-text\">declare namespace</code> 블록과 <code class=\"language-text\">declare module</code> 블록의 필드들에는 <code class=\"language-text\">export</code> 키워드가 기본적으로 붙어있으므로, 추가적으로 작성할 필요가 없다.</p>\n</blockquote>\n<hr>\n<h3 id=\"ref\" style=\"position:relative;\"><a href=\"#ref\" aria-label=\"ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ref</h3>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/modules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.typescriptlang.org/docs/handbook/modules.html</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/namespaces.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.typescriptlang.org/docs/handbook/namespaces.html</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html</a></li>\n<li><a href=\"https://it-eldorado.tistory.com/127\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://it-eldorado.tistory.com/127</a></li>\n<li><a href=\"https://isamatov.com/typescript-ambient-module/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://isamatov.com/typescript-ambient-module/</a></li>\n</ul>","timeToRead":7,"frontmatter":{"title":"타입스크립트 declare 다시 알아보기","date":"October 29, 2022","description":null,"tags":["typescript"],"disqus":null},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/typescript/typescript-declare-2/","previous":{"fields":{"slug":"/weekly/2022-11-week-1/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"November 04, 2022","description":"weekly-i-learned","title":"11월 첫주차 기록","tags":["weekly"]}},"next":{"fields":{"slug":"/weekly/2022-10-week-4/","langKey":"en","directoryName":"weekly"},"frontmatter":{"date":"October 29, 2022","description":"weekly-i-learned","title":"10월 4주차 기록","tags":["weekly"]}},"previousInSameTag":null,"nextInSameTag":{"fields":{"slug":"/typescript/typescript-declare/","langKey":"en","directoryName":"typescript"},"frontmatter":{"date":"September 18, 2021","description":null,"title":"TypeScript declare","tags":["typescript"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","1615650028","2894998521","3765107650","683610688"]}